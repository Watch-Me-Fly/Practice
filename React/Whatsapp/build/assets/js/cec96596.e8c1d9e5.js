"use strict";(self.webpackChunkovrsea_whatsapp_tuto=self.webpackChunkovrsea_whatsapp_tuto||[]).push([[9700],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>u});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),d=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=d(e.components);return a.createElement(o.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=d(n),u=r,m=p["".concat(o,".").concat(u)]||p[u]||h[u]||s;return n?a.createElement(m,i(i({ref:t},l),{},{components:n})):a.createElement(m,i({ref:t},l))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=p;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var d=2;d<s;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},3439:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>d});var a=n(7462),r=(n(7294),n(3905));const s={sidebar_label:"Step 12: Adding and removing chats",sidebar_position:12},i="Step 12: Adding and removing chats",c={unversionedId:"tuto-whatsapp/step12",id:"tuto-whatsapp/step12",title:"Step 12: Adding and removing chats",description:"[//]: # (head-end)",source:"@site/docs/tuto-whatsapp/step12.md",sourceDirName:"tuto-whatsapp",slug:"/tuto-whatsapp/step12",permalink:"/docs/next/tuto-whatsapp/step12",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tuto-whatsapp/step12.md",tags:[],version:"current",sidebarPosition:12,frontMatter:{sidebar_label:"Step 12: Adding and removing chats",sidebar_position:12},sidebar:"tutorialSidebar",previous:{title:"Step 11: Users",permalink:"/docs/next/tuto-whatsapp/step11"}},o={},d=[{value:"<strong>Server</strong> Step 9.1: Add Query.users",id:"server-step-91-add-queryusers",level:4},{value:"Changed schema/resolvers.ts",id:"changed-schemaresolversts",level:5},{value:"Changed schema/typeDefs.graphql",id:"changed-schematypedefsgraphql",level:5},{value:"Added tests/queries/__snapshots__/getUsers.test.ts.snap",id:"added-testsqueries__snapshots__getuserstesttssnap",level:5},{value:"Added tests/queries/getUsers.test.ts",id:"added-testsqueriesgetuserstestts",level:5},{value:"<strong>Client</strong> Step 12.1: Add basic ChatCreationScreen",id:"client-step-121-add-basic-chatcreationscreen",level:4},{value:"Changed src/graphql/fragments/index.ts",id:"changed-srcgraphqlfragmentsindexts",level:5},{value:"Added src/graphql/fragments/user.fragment.ts",id:"added-srcgraphqlfragmentsuserfragmentts",level:5},{value:"<strong>Client</strong> Step 12.1: Add basic ChatCreationScreen",id:"client-step-121-add-basic-chatcreationscreen-1",level:4},{value:"Added src/components/UsersList.tsx",id:"added-srccomponentsuserslisttsx",level:5},{value:"<strong>Client</strong> Step 12.1: Add basic ChatCreationScreen",id:"client-step-121-add-basic-chatcreationscreen-2",level:4},{value:"Added src/components/ChatCreationScreen/ChatCreationNavbar.tsx",id:"added-srccomponentschatcreationscreenchatcreationnavbartsx",level:5},{value:"Added src/components/ChatCreationScreen/index.tsx",id:"added-srccomponentschatcreationscreenindextsx",level:5},{value:"<strong>Client</strong> Step 12.1: Add basic ChatCreationScreen",id:"client-step-121-add-basic-chatcreationscreen-3",level:4},{value:"Changed src/App.tsx",id:"changed-srcapptsx",level:5},{value:"<strong>Client</strong> Step 12.1: Add basic ChatCreationScreen",id:"client-step-121-add-basic-chatcreationscreen-4",level:4},{value:"Added src/components/ChatsListScreen/AddChatButton.tsx",id:"added-srccomponentschatslistscreenaddchatbuttontsx",level:5},{value:"<strong>Client</strong> Step 12.1: Add basic ChatCreationScreen",id:"client-step-121-add-basic-chatcreationscreen-5",level:4},{value:"Changed src/components/ChatsListScreen/index.tsx",id:"changed-srccomponentschatslistscreenindextsx",level:5},{value:"<strong>Server</strong> Step 9.2: Add Mutation.addChat",id:"server-step-92-add-mutationaddchat",level:4},{value:"Changed schema/resolvers.ts",id:"changed-schemaresolversts-1",level:5},{value:"Changed schema/typeDefs.graphql",id:"changed-schematypedefsgraphql-1",level:5},{value:"<strong>Client</strong> Step 12.2: Create chat on user pick",id:"client-step-122-create-chat-on-user-pick",level:4},{value:"Changed src/components/UsersList.tsx",id:"changed-srccomponentsuserslisttsx",level:5},{value:"<strong>Client</strong> Step 12.2: Create chat on user pick",id:"client-step-122-create-chat-on-user-pick-1",level:4},{value:"Changed src/components/ChatCreationScreen/index.tsx",id:"changed-srccomponentschatcreationscreenindextsx",level:5},{value:"<strong>Server</strong> Step 9.3: Add Subscription.chatAdded",id:"server-step-93-add-subscriptionchatadded",level:4},{value:"Changed schema/resolvers.ts",id:"changed-schemaresolversts-2",level:5},{value:"Changed schema/typeDefs.graphql",id:"changed-schematypedefsgraphql-2",level:5},{value:"<strong>Client</strong> Step 12.3: Write chat on chatAdded",id:"client-step-123-write-chat-on-chatadded",level:4},{value:"Added src/graphql/subscriptions/chatAdded.subscription.ts",id:"added-srcgraphqlsubscriptionschataddedsubscriptionts",level:5},{value:"Changed src/graphql/subscriptions/index.ts",id:"changed-srcgraphqlsubscriptionsindexts",level:5},{value:"<strong>Client</strong> Step 12.3: Write chat on chatAdded",id:"client-step-123-write-chat-on-chatadded-1",level:4},{value:"Changed src/components/ChatCreationScreen/index.tsx",id:"changed-srccomponentschatcreationscreenindextsx-1",level:5},{value:"Added src/graphql/subscriptions/chatAdded.subscription.ts",id:"added-srcgraphqlsubscriptionschataddedsubscriptionts-1",level:5},{value:"Changed src/graphql/subscriptions/index.ts",id:"changed-srcgraphqlsubscriptionsindexts-1",level:5},{value:"Changed src/services/cache.service.ts",id:"changed-srcservicescacheservicets",level:5},{value:"<strong>Server</strong> Step 9.4: Add Mutation.removeChat",id:"server-step-94-add-mutationremovechat",level:4},{value:"Changed schema/resolvers.ts",id:"changed-schemaresolversts-3",level:5},{value:"Changed schema/typeDefs.graphql",id:"changed-schematypedefsgraphql-3",level:5},{value:"<strong>Client</strong> Step 12.4: Add chat removal function",id:"client-step-124-add-chat-removal-function",level:4},{value:"Changed src/components/ChatRoomScreen/ChatNavbar.tsx",id:"changed-srccomponentschatroomscreenchatnavbartsx",level:5},{value:"Changed src/components/ChatRoomScreen/index.tsx",id:"changed-srccomponentschatroomscreenindextsx",level:5},{value:"<strong>Server</strong> Step 9.5: Add Subscription.chatRemoved",id:"server-step-95-add-subscriptionchatremoved",level:4},{value:"Changed schema/resolvers.ts",id:"changed-schemaresolversts-4",level:5},{value:"Changed schema/typeDefs.graphql",id:"changed-schematypedefsgraphql-4",level:5},{value:"<strong>Client</strong> Step 12.5: Update cache on chat removal",id:"client-step-125-update-cache-on-chat-removal",level:4},{value:"Added src/graphql/subscriptions/chatRemoved.subscription.ts",id:"added-srcgraphqlsubscriptionschatremovedsubscriptionts",level:5},{value:"Changed src/graphql/subscriptions/index.ts",id:"changed-srcgraphqlsubscriptionsindexts-2",level:5},{value:"<strong>Client</strong> Step 12.5: Update cache on chat removal",id:"client-step-125-update-cache-on-chat-removal-1",level:4},{value:"Changed src/services/cache.service.ts",id:"changed-srcservicescacheservicets-1",level:5},{value:"<strong>Client</strong> Step 12.5: Update cache on chat removal",id:"client-step-125-update-cache-on-chat-removal-2",level:4},{value:"Changed src/components/ChatRoomScreen/ChatNavbar.tsx",id:"changed-srccomponentschatroomscreenchatnavbartsx-1",level:5},{value:"Changed src/components/ChatRoomScreen/index.tsx",id:"changed-srccomponentschatroomscreenindextsx-1",level:5}],l={toc:d};function h(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"step-12-adding-and-removing-chats"},"Step 12: Adding and removing chats"),(0,r.kt)("p",null,"Now that the users system is ready it would be a lot more comfortable to implement a chat creation feature. In the original Whatsapp, you can create a new chat based on your available contacts - a list of your contacts will appear on the screen and by picking one of the items you\u2019ll basically be able to start chatting with the selected contact. However, since in our app we don\u2019t have any real contacts (yet), we will implement the chats creation feature based on all available users in our DB. By picking a user from the users list we will be able to start chatting with it."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/7648874/55896445-e4c67200-5bf0-11e9-9c1c-88318642ef81.gif",alt:"demo"})),(0,r.kt)("p",null,"To be able to fetch users in our system we will need to add a new query called ",(0,r.kt)("inlineCode",{parentName:"p"},"users"),". The ",(0,r.kt)("inlineCode",{parentName:"p"},"users")," query will retrieve all users except for current user:"),(0,r.kt)("h4",{id:"server-step-91-add-queryusers"},(0,r.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/e456930997e39bde1081106da668718c3fc10462"},(0,r.kt)("strong",{parentName:"a"},"Server")," Step 9.1: Add Query.users")),(0,r.kt)("h5",{id:"changed-schemaresolversts"},"Changed schema","/","resolvers.ts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -85,6 +85,12 @@\n \u250a85\u250a85\u250a\n \u250a86\u250a86\u250a      return chat.participants.includes(currentUser.id) ? chat : null;\n \u250a87\u250a87\u250a    },\n+\u250a  \u250a88\u250a\n+\u250a  \u250a89\u250a    users(root, args, { currentUser }) {\n+\u250a  \u250a90\u250a      if (!currentUser) return [];\n+\u250a  \u250a91\u250a\n+\u250a  \u250a92\u250a      return users.filter(u => u.id !== currentUser.id);\n+\u250a  \u250a93\u250a    },\n \u250a88\u250a94\u250a  },\n \u250a89\u250a95\u250a\n \u250a90\u250a96\u250a  Mutation: {\n")),(0,r.kt)("h5",{id:"changed-schematypedefsgraphql"},"Changed schema","/","typeDefs.graphql"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -29,6 +29,7 @@\n \u250a29\u250a29\u250atype Query {\n \u250a30\u250a30\u250a  chats: [Chat!]!\n \u250a31\u250a31\u250a  chat(chatId: ID!): Chat\n+\u250a  \u250a32\u250a  users: [User!]!\n \u250a32\u250a33\u250a}\n \u250a33\u250a34\u250a\n \u250a34\u250a35\u250atype Mutation {\n")),(0,r.kt)("h5",{id:"added-testsqueries__snapshots__getuserstesttssnap"},"Added tests","/","queries","/","_","_snapshots__","/","getUsers.test.ts.snap"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},'@@ -0,0 +1,55 @@\n+\u250a  \u250a 1\u250a// Jest Snapshot v1, https://goo.gl/fbAQLP\n+\u250a  \u250a 2\u250a\n+\u250a  \u250a 3\u250aexports[`Query.getUsers should fetch all users except the one signed-in 1`] = `\n+\u250a  \u250a 4\u250aObject {\n+\u250a  \u250a 5\u250a  "users": Array [\n+\u250a  \u250a 6\u250a    Object {\n+\u250a  \u250a 7\u250a      "id": "2",\n+\u250a  \u250a 8\u250a      "name": "Ethan Gonzalez",\n+\u250a  \u250a 9\u250a      "picture": "https://randomuser.me/api/portraits/thumb/men/1.jpg",\n+\u250a  \u250a10\u250a    },\n+\u250a  \u250a11\u250a    Object {\n+\u250a  \u250a12\u250a      "id": "3",\n+\u250a  \u250a13\u250a      "name": "Bryan Wallace",\n+\u250a  \u250a14\u250a      "picture": "https://randomuser.me/api/portraits/thumb/men/2.jpg",\n+\u250a  \u250a15\u250a    },\n+\u250a  \u250a16\u250a    Object {\n+\u250a  \u250a17\u250a      "id": "4",\n+\u250a  \u250a18\u250a      "name": "Avery Stewart",\n+\u250a  \u250a19\u250a      "picture": "https://randomuser.me/api/portraits/thumb/women/1.jpg",\n+\u250a  \u250a20\u250a    },\n+\u250a  \u250a21\u250a    Object {\n+\u250a  \u250a22\u250a      "id": "5",\n+\u250a  \u250a23\u250a      "name": "Katie Peterson",\n+\u250a  \u250a24\u250a      "picture": "https://randomuser.me/api/portraits/thumb/women/2.jpg",\n+\u250a  \u250a25\u250a    },\n+\u250a  \u250a26\u250a  ],\n+\u250a  \u250a27\u250a}\n+\u250a  \u250a28\u250a`;\n+\u250a  \u250a29\u250a\n+\u250a  \u250a30\u250aexports[`Query.getUsers should fetch all users except the one signed-in 2`] = `\n+\u250a  \u250a31\u250aObject {\n+\u250a  \u250a32\u250a  "users": Array [\n+\u250a  \u250a33\u250a    Object {\n+\u250a  \u250a34\u250a      "id": "1",\n+\u250a  \u250a35\u250a      "name": "Ray Edwards",\n+\u250a  \u250a36\u250a      "picture": "https://randomuser.me/api/portraits/thumb/lego/1.jpg",\n+\u250a  \u250a37\u250a    },\n+\u250a  \u250a38\u250a    Object {\n+\u250a  \u250a39\u250a      "id": "3",\n+\u250a  \u250a40\u250a      "name": "Bryan Wallace",\n+\u250a  \u250a41\u250a      "picture": "https://randomuser.me/api/portraits/thumb/men/2.jpg",\n+\u250a  \u250a42\u250a    },\n+\u250a  \u250a43\u250a    Object {\n+\u250a  \u250a44\u250a      "id": "4",\n+\u250a  \u250a45\u250a      "name": "Avery Stewart",\n+\u250a  \u250a46\u250a      "picture": "https://randomuser.me/api/portraits/thumb/women/1.jpg",\n+\u250a  \u250a47\u250a    },\n+\u250a  \u250a48\u250a    Object {\n+\u250a  \u250a49\u250a      "id": "5",\n+\u250a  \u250a50\u250a      "name": "Katie Peterson",\n+\u250a  \u250a51\u250a      "picture": "https://randomuser.me/api/portraits/thumb/women/2.jpg",\n+\u250a  \u250a52\u250a    },\n+\u250a  \u250a53\u250a  ],\n+\u250a  \u250a54\u250a}\n+\u250a  \u250a55\u250a`;\n')),(0,r.kt)("h5",{id:"added-testsqueriesgetuserstestts"},"Added tests","/","queries","/","getUsers.test.ts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,51 @@\n+\u250a  \u250a 1\u250aimport { createTestClient } from 'apollo-server-testing';\n+\u250a  \u250a 2\u250aimport { ApolloServer, gql } from 'apollo-server-express';\n+\u250a  \u250a 3\u250aimport schema from '../../schema';\n+\u250a  \u250a 4\u250aimport { users } from '../../db';\n+\u250a  \u250a 5\u250a\n+\u250a  \u250a 6\u250adescribe('Query.getUsers', () => {\n+\u250a  \u250a 7\u250a  it('should fetch all users except the one signed-in', async () => {\n+\u250a  \u250a 8\u250a    let currentUser = users[0];\n+\u250a  \u250a 9\u250a\n+\u250a  \u250a10\u250a    const server = new ApolloServer({\n+\u250a  \u250a11\u250a      schema,\n+\u250a  \u250a12\u250a      context: () => ({ currentUser }),\n+\u250a  \u250a13\u250a    });\n+\u250a  \u250a14\u250a\n+\u250a  \u250a15\u250a    const { query } = createTestClient(server);\n+\u250a  \u250a16\u250a\n+\u250a  \u250a17\u250a    let res = await query({\n+\u250a  \u250a18\u250a      query: gql`\n+\u250a  \u250a19\u250a        query GetUsers {\n+\u250a  \u250a20\u250a          users {\n+\u250a  \u250a21\u250a            id\n+\u250a  \u250a22\u250a            name\n+\u250a  \u250a23\u250a            picture\n+\u250a  \u250a24\u250a          }\n+\u250a  \u250a25\u250a        }\n+\u250a  \u250a26\u250a      `,\n+\u250a  \u250a27\u250a    });\n+\u250a  \u250a28\u250a\n+\u250a  \u250a29\u250a    expect(res.data).toBeDefined();\n+\u250a  \u250a30\u250a    expect(res.errors).toBeUndefined();\n+\u250a  \u250a31\u250a    expect(res.data).toMatchSnapshot();\n+\u250a  \u250a32\u250a\n+\u250a  \u250a33\u250a    currentUser = users[1];\n+\u250a  \u250a34\u250a\n+\u250a  \u250a35\u250a    res = await query({\n+\u250a  \u250a36\u250a      query: gql`\n+\u250a  \u250a37\u250a        query GetUsers {\n+\u250a  \u250a38\u250a          users {\n+\u250a  \u250a39\u250a            id\n+\u250a  \u250a40\u250a            name\n+\u250a  \u250a41\u250a            picture\n+\u250a  \u250a42\u250a          }\n+\u250a  \u250a43\u250a        }\n+\u250a  \u250a44\u250a      `,\n+\u250a  \u250a45\u250a    });\n+\u250a  \u250a46\u250a\n+\u250a  \u250a47\u250a    expect(res.data).toBeDefined();\n+\u250a  \u250a48\u250a    expect(res.errors).toBeUndefined();\n+\u250a  \u250a49\u250a    expect(res.data).toMatchSnapshot();\n+\u250a  \u250a50\u250a  });\n+\u250a  \u250a51\u250a});\n")),(0,r.kt)("p",null,"This query will be reflected in a component called ",(0,r.kt)("inlineCode",{parentName:"p"},"UsersList"),". First we will define and export a new fragment called ",(0,r.kt)("inlineCode",{parentName:"p"},"User"),":"),(0,r.kt)("h4",{id:"client-step-121-add-basic-chatcreationscreen"},(0,r.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/bbb1203275b8d385ad62f26dd6e104842128506a"},(0,r.kt)("strong",{parentName:"a"},"Client")," Step 12.1: Add basic ChatCreationScreen")),(0,r.kt)("h5",{id:"changed-srcgraphqlfragmentsindexts"},"Changed src","/","graphql","/","fragments","/","index.ts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,3 +1,4 @@\n \u250a1\u250a1\u250aexport { default as chat } from './chat.fragment';\n \u250a2\u250a2\u250aexport { default as fullChat } from './fullChat.fragment';\n \u250a3\u250a3\u250aexport { default as message } from './message.fragment';\n+\u250a \u250a4\u250aexport { default as user } from './user.fragment';\n")),(0,r.kt)("h5",{id:"added-srcgraphqlfragmentsuserfragmentts"},"Added src","/","graphql","/","fragments","/","user.fragment.ts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,9 @@\n+\u250a \u250a1\u250aimport gql from 'graphql-tag';\n+\u250a \u250a2\u250a\n+\u250a \u250a3\u250aexport default gql`\n+\u250a \u250a4\u250a  fragment User on User {\n+\u250a \u250a5\u250a    id\n+\u250a \u250a6\u250a    name\n+\u250a \u250a7\u250a    picture\n+\u250a \u250a8\u250a  }\n+\u250a \u250a9\u250a`;\n")),(0,r.kt)("p",null,"And then we will implement the ",(0,r.kt)("inlineCode",{parentName:"p"},"UsersList")," component which is going to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"users")," query with the ",(0,r.kt)("inlineCode",{parentName:"p"},"User")," fragment:"),(0,r.kt)("h4",{id:"client-step-121-add-basic-chatcreationscreen-1"},(0,r.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/bbb1203275b8d385ad62f26dd6e104842128506a"},(0,r.kt)("strong",{parentName:"a"},"Client")," Step 12.1: Add basic ChatCreationScreen")),(0,r.kt)("h5",{id:"added-srccomponentsuserslisttsx"},"Added src","/","components","/","UsersList.tsx"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,64 @@\n+\u250a  \u250a 1\u250aimport MaterialList from '@material-ui/core/List';\n+\u250a  \u250a 2\u250aimport MaterialItem from '@material-ui/core/ListItem';\n+\u250a  \u250a 3\u250aimport gql from 'graphql-tag';\n+\u250a  \u250a 4\u250aimport React from 'react';\n+\u250a  \u250a 5\u250aimport styled from 'styled-components';\n+\u250a  \u250a 6\u250aimport * as fragments from '../graphql/fragments';\n+\u250a  \u250a 7\u250aimport { useUsersListQuery } from '../graphql/types';\n+\u250a  \u250a 8\u250a\n+\u250a  \u250a 9\u250aconst ActualList = styled(MaterialList)`\n+\u250a  \u250a10\u250a  padding: 0;\n+\u250a  \u250a11\u250a`;\n+\u250a  \u250a12\u250a\n+\u250a  \u250a13\u250aconst UserItem = styled(MaterialItem)`\n+\u250a  \u250a14\u250a  position: relative;\n+\u250a  \u250a15\u250a  padding: 7.5px 15px;\n+\u250a  \u250a16\u250a  display: flex;\n+\u250a  \u250a17\u250a  cursor: pinter;\n+\u250a  \u250a18\u250a`;\n+\u250a  \u250a19\u250a\n+\u250a  \u250a20\u250aconst ProfilePicture = styled.img`\n+\u250a  \u250a21\u250a  height: 50px;\n+\u250a  \u250a22\u250a  width: 50px;\n+\u250a  \u250a23\u250a  object-fit: cover;\n+\u250a  \u250a24\u250a  border-radius: 50%;\n+\u250a  \u250a25\u250a`;\n+\u250a  \u250a26\u250a\n+\u250a  \u250a27\u250aconst Name = styled.div`\n+\u250a  \u250a28\u250a  padding-left: 15px;\n+\u250a  \u250a29\u250a  font-weight: bold;\n+\u250a  \u250a30\u250a`;\n+\u250a  \u250a31\u250a\n+\u250a  \u250a32\u250aexport const UsersListQuery = gql`\n+\u250a  \u250a33\u250a  query UsersList {\n+\u250a  \u250a34\u250a    users {\n+\u250a  \u250a35\u250a      ...User\n+\u250a  \u250a36\u250a    }\n+\u250a  \u250a37\u250a  }\n+\u250a  \u250a38\u250a  ${fragments.user}\n+\u250a  \u250a39\u250a`;\n+\u250a  \u250a40\u250a\n+\u250a  \u250a41\u250aconst UsersList: React.FC = () => {\n+\u250a  \u250a42\u250a  const { data, loading: loadingUsers } = useUsersListQuery();\n+\u250a  \u250a43\u250a\n+\u250a  \u250a44\u250a  if (data === undefined) return null;\n+\u250a  \u250a45\u250a  const users = data.users;\n+\u250a  \u250a46\u250a\n+\u250a  \u250a47\u250a  return (\n+\u250a  \u250a48\u250a    <ActualList>\n+\u250a  \u250a49\u250a      {!loadingUsers &&\n+\u250a  \u250a50\u250a        users.map((user) => (\n+\u250a  \u250a51\u250a          <UserItem key={user.id} button>\n+\u250a  \u250a52\u250a            {user !== null && user.picture !== null && (\n+\u250a  \u250a53\u250a              <>\n+\u250a  \u250a54\u250a                <ProfilePicture data-testid=\"picture\" src={user.picture} />\n+\u250a  \u250a55\u250a                <Name data-testid=\"name\">{user.name}</Name>\n+\u250a  \u250a56\u250a              </>\n+\u250a  \u250a57\u250a            )}\n+\u250a  \u250a58\u250a          </UserItem>\n+\u250a  \u250a59\u250a        ))}\n+\u250a  \u250a60\u250a    </ActualList>\n+\u250a  \u250a61\u250a  );\n+\u250a  \u250a62\u250a};\n+\u250a  \u250a63\u250a\n+\u250a  \u250a64\u250aexport default UsersList;\n")),(0,r.kt)("p",null,"The list is likely to change when a new user signs-up. We will implement a subscription and live-update the list further this tutorial when we go through authentication. Now we will implement a new screen component called ",(0,r.kt)("inlineCode",{parentName:"p"},"ChatCreationScreen"),". The screen will simply render the ",(0,r.kt)("inlineCode",{parentName:"p"},"UsersList")," along with a navigation bar:"),(0,r.kt)("h4",{id:"client-step-121-add-basic-chatcreationscreen-2"},(0,r.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/bbb1203275b8d385ad62f26dd6e104842128506a"},(0,r.kt)("strong",{parentName:"a"},"Client")," Step 12.1: Add basic ChatCreationScreen")),(0,r.kt)("h5",{id:"added-srccomponentschatcreationscreenchatcreationnavbartsx"},"Added src","/","components","/","ChatCreationScreen","/","ChatCreationNavbar.tsx"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,45 @@\n+\u250a  \u250a 1\u250aimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\n+\u250a  \u250a 2\u250aimport { Toolbar, Button } from '@material-ui/core';\n+\u250a  \u250a 3\u250aimport React from 'react';\n+\u250a  \u250a 4\u250aimport { useCallback } from 'react';\n+\u250a  \u250a 5\u250aimport styled from 'styled-components';\n+\u250a  \u250a 6\u250aimport { useNavigate } from 'react-router-dom';\n+\u250a  \u250a 7\u250a\n+\u250a  \u250a 8\u250aconst Container = styled(Toolbar)`\n+\u250a  \u250a 9\u250a  display: flex;\n+\u250a  \u250a10\u250a  background-color: var(--primary-bg);\n+\u250a  \u250a11\u250a  color: var(--primary-text);\n+\u250a  \u250a12\u250a  font-size: 20px;\n+\u250a  \u250a13\u250a  line-height: 40px;\n+\u250a  \u250a14\u250a`;\n+\u250a  \u250a15\u250a\n+\u250a  \u250a16\u250aconst BackButton = styled(Button)`\n+\u250a  \u250a17\u250a  svg {\n+\u250a  \u250a18\u250a    color: var(--primary-text);\n+\u250a  \u250a19\u250a  }\n+\u250a  \u250a20\u250a`;\n+\u250a  \u250a21\u250a\n+\u250a  \u250a22\u250aconst Title = styled.div`\n+\u250a  \u250a23\u250a  flex: 1;\n+\u250a  \u250a24\u250a`;\n+\u250a  \u250a25\u250a\n+\u250a  \u250a29\u250a\n+\u250a  \u250a30\u250aconst ChatCreationNavbar: React.FC = () => {\n+\u250a  \u250a30\u250a  const navigate = useNavigate();\n+\u250a  \u250a31\u250a  const navBack = useCallback(() => {\n+\u250a  \u250a32\u250a    navigate('/chats', { replace: true });\n+\u250a  \u250a33\u250a  }, [navigate]);\n+\u250a  \u250a34\u250a\n+\u250a  \u250a35\u250a  return (\n+\u250a  \u250a36\u250a    <Container>\n+\u250a  \u250a37\u250a      <BackButton data-testid=\"back-button\" onClick={navBack}>\n+\u250a  \u250a38\u250a        <ArrowBackIcon />\n+\u250a  \u250a39\u250a      </BackButton>\n+\u250a  \u250a40\u250a      <Title>Create Chat</Title>\n+\u250a  \u250a41\u250a    </Container>\n+\u250a  \u250a42\u250a  );\n+\u250a  \u250a43\u250a};\n+\u250a  \u250a44\u250a\n+\u250a  \u250a45\u250aexport default ChatCreationNavbar;\n")),(0,r.kt)("h5",{id:"added-srccomponentschatcreationscreenindextsx"},"Added src","/","components","/","ChatCreationScreen","/","index.tsx"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,29 @@\n+\u250a  \u250a 1\u250aimport React from 'react';\n+\u250a  \u250a 2\u250aimport styled from 'styled-components';\n+\u250a  \u250a 3\u250aimport UsersList from '../UsersList';\n+\u250a  \u250a 4\u250aimport ChatCreationNavbar from './ChatCreationNavbar';\n+\u250a  \u250a 6\u250a\n+\u250a  \u250a 7\u250a// eslint-disable-next-line\n+\u250a  \u250a 8\u250aconst Container = styled.div`\n+\u250a  \u250a 9\u250a  height: calc(100% - 56px);\n+\u250a  \u250a10\u250a  overflow-y: overlay;\n+\u250a  \u250a11\u250a`;\n+\u250a  \u250a12\u250a\n+\u250a  \u250a13\u250a// eslint-disable-next-line\n+\u250a  \u250a14\u250aconst StyledUsersList = styled(UsersList)`\n+\u250a  \u250a15\u250a  height: calc(100% - 56px);\n+\u250a  \u250a16\u250a`;\n+\u250a  \u250a17\u250a\n+\u250a  \u250a21\u250a\n+\u250a  \u250a22\u250aconst ChatCreationScreen: React.FC = () => (\n+\u250a  \u250a23\u250a  <div>\n+\u250a  \u250a24\u250a    <ChatCreationNavbar />\n+\u250a  \u250a25\u250a    <UsersList />\n+\u250a  \u250a26\u250a  </div>\n+\u250a  \u250a27\u250a);\n+\u250a  \u250a28\u250a\n+\u250a  \u250a29\u250aexport default ChatCreationScreen;\n")),(0,r.kt)("p",null,"The screen will be available under the route ",(0,r.kt)("inlineCode",{parentName:"p"},"/new-chat"),". The new route will be restricted, since only authenticated users should be able to access it:"),(0,r.kt)("h4",{id:"client-step-121-add-basic-chatcreationscreen-3"},(0,r.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/bbb1203275b8d385ad62f26dd6e104842128506a"},(0,r.kt)("strong",{parentName:"a"},"Client")," Step 12.1: Add basic ChatCreationScreen")),(0,r.kt)("h5",{id:"changed-srcapptsx"},"Changed src","/","App.tsx"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -8,6 +8,7 @@\n \u250a 8\u250a 8\u250aimport AuthScreen from './components/AuthScreen';\n \u250a 9\u250a 9\u250aimport ChatRoomScreen from './components/ChatRoomScreen';\n \u250a10\u250a10\u250aimport ChatsListScreen from './components/ChatsListScreen';\n+\u250a  \u250a11\u250aimport ChatCreationScreen from './components/ChatCreationScreen';\n \u250a11\u250a12\u250aimport { Routes } from 'react-router-dom';\n \u250a12\u250a13\u250aimport { WithAuth } from './services/auth.service';\n \u250a13\u250a14\u250a\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},'@@ -26,6 +27,8 @@\n \u250a26\u250a27\u250a          <WithAuthProvider/>\n \u250a27\u250a28\u250a        }\n \u250a28\u250a29\u250a      />\n+\u250a  \u250a30\u250a\n+\u250a  \u250a31\u250a      <Route\n+\u250a  \u250a31\u250a        path="/new-chat"\n+\u250a  \u250a31\u250a        element={\n+\u250a  \u250a31\u250a          <WithAuth>\n+\u250a  \u250a31\u250a            <ChatCreationScreen />\n+\u250a  \u250a31\u250a          <WithAuth />\n+\u250a  \u250a31\u250a        }\n+\u250a  \u250a31\u250a      />\n \u250a30\u250a33\u250a      <Route\n')),(0,r.kt)("p",null,"the ",(0,r.kt)("inlineCode",{parentName:"p"},"/new-chat")," route will be accessible directly from the main ",(0,r.kt)("inlineCode",{parentName:"p"},"ChatsListScreen"),". We will implement a navigation button which is gonna have a fixed position at the bottom right corner of the screen:"),(0,r.kt)("h4",{id:"client-step-121-add-basic-chatcreationscreen-4"},(0,r.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/bbb1203275b8d385ad62f26dd6e104842128506a"},(0,r.kt)("strong",{parentName:"a"},"Client")," Step 12.1: Add basic ChatCreationScreen")),(0,r.kt)("h5",{id:"added-srccomponentschatslistscreenaddchatbuttontsx"},"Added src","/","components","/","ChatsListScreen","/","AddChatButton.tsx"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,43 @@\n+\u250a  \u250a 1\u250aimport Button from '@material-ui/core/Button';\n+\u250a  \u250a 2\u250aimport ChatIcon from '@material-ui/icons/Chat';\n+\u250a  \u250a 3\u250aimport React from 'react';\n+\u250a  \u250a 4\u250aimport styled from 'styled-components';\n+\u250a  \u250a 5\u250aimport { useNavigate } from 'react-router-dom';\n+\u250a  \u250a 6\u250a\n+\u250a  \u250a 7\u250aconst Container = styled.div`\n+\u250a  \u250a 8\u250a  position: fixed;\n+\u250a  \u250a 9\u250a  right: 10px;\n+\u250a  \u250a10\u250a  bottom: 10px;\n+\u250a  \u250a11\u250a\n+\u250a  \u250a12\u250a  button {\n+\u250a  \u250a13\u250a    min-width: 50px;\n+\u250a  \u250a14\u250a    width: 50px;\n+\u250a  \u250a15\u250a    height: 50px;\n+\u250a  \u250a16\u250a    border-radius: 999px;\n+\u250a  \u250a17\u250a    background-color: var(--secondary-bg);\n+\u250a  \u250a18\u250a    color: white;\n+\u250a  \u250a19\u250a  }\n+\u250a  \u250a20\u250a`;\n+\u250a  \u250a24\u250a\n+\u250a  \u250a25\u250aconst AddChatButton: React.FC = () => {\n+\u250a  \u250a25\u250a  const navigate = useNavigate();\n+\u250a  \u250a26\u250a  const onClick = () => {\n+\u250a  \u250a27\u250a    navigate('/new-chat');\n+\u250a  \u250a28\u250a  };\n+\u250a  \u250a29\u250a\n+\u250a  \u250a30\u250a  return (\n+\u250a  \u250a31\u250a    <Container>\n+\u250a  \u250a32\u250a      <Button\n+\u250a  \u250a33\u250a        data-testid=\"new-chat-button\"\n+\u250a  \u250a34\u250a        variant=\"contained\"\n+\u250a  \u250a35\u250a        color=\"secondary\"\n+\u250a  \u250a36\u250a        onClick={onClick}>\n+\u250a  \u250a37\u250a        <ChatIcon />\n+\u250a  \u250a38\u250a      </Button>\n+\u250a  \u250a39\u250a    </Container>\n+\u250a  \u250a40\u250a  );\n+\u250a  \u250a41\u250a};\n+\u250a  \u250a42\u250a\n+\u250a  \u250a43\u250aexport default AddChatButton;\n")),(0,r.kt)("p",null,"And then we will render it in the ",(0,r.kt)("inlineCode",{parentName:"p"},"ChatsListScreen"),":"),(0,r.kt)("h4",{id:"client-step-121-add-basic-chatcreationscreen-5"},(0,r.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/bbb1203275b8d385ad62f26dd6e104842128506a"},(0,r.kt)("strong",{parentName:"a"},"Client")," Step 12.1: Add basic ChatCreationScreen")),(0,r.kt)("h5",{id:"changed-srccomponentschatslistscreenindextsx"},"Changed src","/","components","/","ChatsListScreen","/","index.tsx"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -3,6 +3,7 @@\n \u250a3\u250a3\u250aimport ChatsList from './ChatsList';\n \u250a4\u250a4\u250aimport styled from 'styled-components';\n+\u250a \u250a6\u250aimport AddChatButton from './AddChatButton';\n \u250a6\u250a7\u250a\n \u250a7\u250a8\u250aconst Container = styled.div`\n \u250a8\u250a9\u250a  height: 100vh;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -16,6 +17,7 @@\n \u250a16\u250a17\u250a  <Container>\n \u250a17\u250a18\u250a    <ChatsNavbar />\n \u250a18\u250a19\u250a    <ChatsList />\n+\u250a  \u250a20\u250a    <AddChatButton />\n \u250a19\u250a21\u250a  </Container>\n \u250a20\u250a22\u250a);\n \u250a21\u250a23\u250a\n")),(0,r.kt)("p",null,"For now we can only observe the users list. Our goal now is to be able to start chatting with a user once it has been clicked. First we will need to add a new mutation called ",(0,r.kt)("inlineCode",{parentName:"p"},"addChat")," which will create a new chat document and add it to the chats collection. If the chat already exists we will return the existing instance. This behavior will help us navigate to the desired ",(0,r.kt)("inlineCode",{parentName:"p"},"ChatRoomScreen"),", whether it exists or not:"),(0,r.kt)("h4",{id:"server-step-92-add-mutationaddchat"},(0,r.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/5008bbfc0a1545b134ba5c609a6b5abd55907118"},(0,r.kt)("strong",{parentName:"a"},"Server")," Step 9.2: Add Mutation.addChat")),(0,r.kt)("h5",{id:"changed-schemaresolversts-1"},"Changed schema","/","resolvers.ts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,6 +1,6 @@\n \u250a1\u250a1\u250aimport { withFilter } from 'apollo-server-express';\n \u250a2\u250a2\u250aimport { DateTimeResolver, URLResolver } from 'graphql-scalars';\n-\u250a3\u250a \u250aimport { User, Message, chats, messages, users } from '../db';\n+\u250a \u250a3\u250aimport { User, Message, Chat, chats, messages, users } from '../db';\n \u250a4\u250a4\u250aimport { Resolvers } from '../types/graphql';\n \u250a5\u250a5\u250a\n \u250a6\u250a6\u250aconst resolvers: Resolvers = {\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -130,6 +130,31 @@\n \u250a130\u250a130\u250a\n \u250a131\u250a131\u250a      return message;\n \u250a132\u250a132\u250a    },\n+\u250a   \u250a133\u250a\n+\u250a   \u250a134\u250a    addChat(root, { recipientId }, { currentUser }) {\n+\u250a   \u250a135\u250a      if (!currentUser) return null;\n+\u250a   \u250a136\u250a      if (!users.some(u => u.id === recipientId)) return null;\n+\u250a   \u250a137\u250a\n+\u250a   \u250a138\u250a      let chat = chats.find(\n+\u250a   \u250a139\u250a        c =>\n+\u250a   \u250a140\u250a          c.participants.includes(currentUser.id) &&\n+\u250a   \u250a141\u250a          c.participants.includes(recipientId)\n+\u250a   \u250a142\u250a      );\n+\u250a   \u250a143\u250a\n+\u250a   \u250a144\u250a      if (chat) return chat;\n+\u250a   \u250a145\u250a\n+\u250a   \u250a146\u250a      const chatsIds = chats.map(c => Number(c.id));\n+\u250a   \u250a147\u250a\n+\u250a   \u250a148\u250a      chat = {\n+\u250a   \u250a149\u250a        id: String(Math.max(...chatsIds) + 1),\n+\u250a   \u250a150\u250a        participants: [currentUser.id, recipientId],\n+\u250a   \u250a151\u250a        messages: [],\n+\u250a   \u250a152\u250a      };\n+\u250a   \u250a153\u250a\n+\u250a   \u250a154\u250a      chats.push(chat);\n+\u250a   \u250a155\u250a\n+\u250a   \u250a156\u250a      return chat;\n+\u250a   \u250a157\u250a    },\n \u250a133\u250a158\u250a  },\n \u250a134\u250a159\u250a\n \u250a135\u250a160\u250a  Subscription: {\n")),(0,r.kt)("h5",{id:"changed-schematypedefsgraphql-1"},"Changed schema","/","typeDefs.graphql"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -34,6 +34,7 @@\n \u250a34\u250a34\u250a\n \u250a35\u250a35\u250atype Mutation {\n \u250a36\u250a36\u250a  addMessage(chatId: ID!, content: String!): Message\n+\u250a  \u250a37\u250a  addChat(recipientId: ID!): Chat\n \u250a37\u250a38\u250a}\n \u250a38\u250a39\u250a\n \u250a39\u250a40\u250atype Subscription {\n")),(0,r.kt)("p",null,"To use the new mutation, we will define a new callback called ",(0,r.kt)("inlineCode",{parentName:"p"},"onUserPick")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"UsersList")," so it can be used from the ",(0,r.kt)("inlineCode",{parentName:"p"},"ChatCreationScreen"),":"),(0,r.kt)("h4",{id:"client-step-122-create-chat-on-user-pick"},(0,r.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/808313e16d7bb7fce1cf5571de278b2e72f505da"},(0,r.kt)("strong",{parentName:"a"},"Client")," Step 12.2: Create chat on user pick")),(0,r.kt)("h5",{id:"changed-srccomponentsuserslisttsx"},"Changed src","/","components","/","UsersList.tsx"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -4,7 +4,7 @@\n \u250a 4\u250a 4\u250aimport React from 'react';\n \u250a 5\u250a 5\u250aimport styled from 'styled-components';\n \u250a 6\u250a 6\u250aimport * as fragments from '../graphql/fragments';\n-\u250a 7\u250a  \u250aimport { useUsersListQuery } from '../graphql/types';\n+\u250a  \u250a 7\u250aimport { useUsersListQuery, User } from '../graphql/types';\n \u250a 8\u250a 8\u250a\n \u250a 9\u250a 9\u250aconst ActualList = styled(MaterialList)`\n \u250a10\u250a10\u250a  padding: 0;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -38,7 +38,13 @@\n \u250a38\u250a38\u250a  ${fragments.user}\n \u250a39\u250a39\u250a`;\n \u250a40\u250a40\u250a\n-\u250a41\u250a  \u250aconst UsersList: React.FC = () => {\n+\u250a  \u250a41\u250ainterface ChildComponentProps {\n+\u250a  \u250a42\u250a  onUserPick: any;\n+\u250a  \u250a43\u250a}\n+\u250a  \u250a44\u250a\n+\u250a  \u250a45\u250aconst UsersList: React.FC<ChildComponentProps> = ({\n+\u250a  \u250a46\u250a  onUserPick = (user: User) => {},\n+\u250a  \u250a47\u250a}) => {\n \u250a42\u250a48\u250a  const { data, loading: loadingUsers } = useUsersListQuery();\n \u250a43\u250a49\u250a\n \u250a44\u250a50\u250a  if (data === undefined) return null;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},'@@ -48,7 +54,11 @@\n \u250a48\u250a54\u250a    <ActualList>\n \u250a49\u250a55\u250a      {!loadingUsers &&\n \u250a50\u250a56\u250a        users.map((user) => (\n-\u250a51\u250a  \u250a          <UserItem key={user.id} button>\n+\u250a  \u250a57\u250a          <UserItem\n+\u250a  \u250a58\u250a            key={user.id}\n+\u250a  \u250a59\u250a            data-testid="user"\n+\u250a  \u250a60\u250a            onClick={onUserPick.bind(null, user)}\n+\u250a  \u250a61\u250a            button>\n \u250a52\u250a62\u250a            {user !== null && user.picture !== null && (\n \u250a53\u250a63\u250a              <>\n \u250a54\u250a64\u250a                <ProfilePicture data-testid="picture" src={user.picture} />\n')),(0,r.kt)("p",null,"In the ",(0,r.kt)("inlineCode",{parentName:"p"},"ChatCreationScreen/index.tsx")," module, we will define an ",(0,r.kt)("inlineCode",{parentName:"p"},"AddChat")," document with ",(0,r.kt)("inlineCode",{parentName:"p"},"graphql-tag"),". Using the ",(0,r.kt)("inlineCode",{parentName:"p"},"$ yarn codegen")," command we can generate the correlated React mutation hook and use it as the ",(0,r.kt)("inlineCode",{parentName:"p"},"onUserPick")," callback:"),(0,r.kt)("h4",{id:"client-step-122-create-chat-on-user-pick-1"},(0,r.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/808313e16d7bb7fce1cf5571de278b2e72f505da"},(0,r.kt)("strong",{parentName:"a"},"Client")," Step 12.2: Create chat on user pick")),(0,r.kt)("h5",{id:"changed-srccomponentschatcreationscreenindextsx"},"Changed src","/","components","/","ChatCreationScreen","/","index.tsx"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,8 +1,12 @@\n+\u250a  \u250a 1\u250aimport gql from 'graphql-tag';\n \u250a 1\u250a 2\u250aimport React from 'react';\n+\u250a  \u250a 3\u250aimport { useCallback } from 'react';\n \u250a 2\u250a 4\u250aimport styled from 'styled-components';\n+\u250a  \u250a 5\u250aimport * as fragments from '../../graphql/fragments';\n \u250a 3\u250a 6\u250aimport UsersList from '../UsersList';\n \u250a 4\u250a 7\u250aimport ChatCreationNavbar from './ChatCreationNavbar';\n+\u250a  \u250a 8\u250aimport { useNavigate } from 'react-router-dom';\n+\u250a  \u250a 9\u250aimport { useAddChatMutation } from '../../graphql/types';\n \u250a 6\u250a10\u250a\n \u250a 7\u250a11\u250a// eslint-disable-next-line\n \u250a 8\u250a12\u250aconst Container = styled.div`\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -15,15 +19,52 @@\n \u250a15\u250a19\u250a  height: calc(100% - 56px);\n \u250a16\u250a20\u250a`;\n \u250a17\u250a21\u250a\n+\u250a  \u250a22\u250agql`\n+\u250a  \u250a23\u250a  mutation AddChat($recipientId: ID!) {\n+\u250a  \u250a24\u250a    addChat(recipientId: $recipientId) {\n+\u250a  \u250a25\u250a      ...Chat\n+\u250a  \u250a26\u250a    }\n+\u250a  \u250a27\u250a  }\n+\u250a  \u250a28\u250a  ${fragments.chat}\n+\u250a  \u250a29\u250a`;\n+\u250a  \u250a30\u250a\n \u250a21\u250a34\u250a\n-\u250a22\u250a  \u250aconst ChatCreationScreen: React.FC = () => (\n-\u250a23\u250a  \u250a  <div>\n-\u250a24\u250a  \u250a    <ChatCreationNavbar />\n-\u250a25\u250a  \u250a    <UsersList />\n-\u250a26\u250a  \u250a  </div>\n-\u250a27\u250a  \u250a);\n+\u250a  \u250a35\u250aconst ChatCreationScreen: React.FC = () => {\n+\u250a  \u250a36\u250a  const navigate = useNavigate();\n+\u250a  \u250a36\u250a  const [addChat] = useAddChatMutation();\n+\u250a  \u250a37\u250a\n+\u250a  \u250a38\u250a  const onUserPick = useCallback(\n+\u250a  \u250a39\u250a    (user) =>\n+\u250a  \u250a40\u250a      addChat({\n+\u250a  \u250a41\u250a        optimisticResponse: {\n+\u250a  \u250a42\u250a          __typename: 'Mutation',\n+\u250a  \u250a43\u250a          addChat: {\n+\u250a  \u250a44\u250a            __typename: 'Chat',\n+\u250a  \u250a45\u250a            id: Math.random().toString(36).substr(2, 9),\n+\u250a  \u250a46\u250a            name: user.name,\n+\u250a  \u250a47\u250a            picture: user.picture,\n+\u250a  \u250a48\u250a            lastMessage: null,\n+\u250a  \u250a49\u250a          },\n+\u250a  \u250a50\u250a        },\n+\u250a  \u250a51\u250a        variables: {\n+\u250a  \u250a52\u250a          recipientId: user.id,\n+\u250a  \u250a53\u250a        },\n+\u250a  \u250a54\u250a      }).then((result) => {\n+\u250a  \u250a55\u250a        if (result && result.data !== null) {\n+\u250a  \u250a56\u250a          navigate(`/chats/${result.data!.addChat!.id}`);\n+\u250a  \u250a57\u250a        }\n+\u250a  \u250a58\u250a      }),\n+\u250a  \u250a59\u250a    [addChat, navigate]\n+\u250a  \u250a60\u250a  );\n+\u250a  \u250a61\u250a\n+\u250a  \u250a62\u250a  return (\n+\u250a  \u250a63\u250a    <div>\n+\u250a  \u250a64\u250a      <ChatCreationNavbar />\n+\u250a  \u250a65\u250a      <UsersList onUserPick={onUserPick} />\n+\u250a  \u250a66\u250a    </div>\n+\u250a  \u250a67\u250a  );\n+\u250a  \u250a68\u250a};\n \u250a28\u250a69\u250a\n \u250a29\u250a70\u250aexport default ChatCreationScreen;\n")),(0,r.kt)("p",null,"Chats can now be created, you can test out the function by signing in with different users. However, the chats list in the ",(0,r.kt)("inlineCode",{parentName:"p"},"ChatsListScreen")," will not be updated unless we refresh the page manually. In the server project, we will define a new subscription called ",(0,r.kt)("inlineCode",{parentName:"p"},"chatAdded"),". The subscription should be broadcasted to the current user only if he is a participant of the published chat:"),(0,r.kt)("h4",{id:"server-step-93-add-subscriptionchatadded"},(0,r.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/d361ec1455881cabd6b4c8e6d60285045073ffe3"},(0,r.kt)("strong",{parentName:"a"},"Server")," Step 9.3: Add Subscription.chatAdded")),(0,r.kt)("h5",{id:"changed-schemaresolversts-2"},"Changed schema","/","resolvers.ts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -131,7 +131,7 @@\n \u250a131\u250a131\u250a      return message;\n \u250a132\u250a132\u250a    },\n \u250a133\u250a133\u250a\n-\u250a134\u250a   \u250a    addChat(root, { recipientId }, { currentUser }) {\n+\u250a   \u250a134\u250a    addChat(root, { recipientId }, { currentUser, pubsub }) {\n \u250a135\u250a135\u250a      if (!currentUser) return null;\n \u250a136\u250a136\u250a      if (!users.some(u => u.id === recipientId)) return null;\n \u250a137\u250a137\u250a\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -153,6 +153,10 @@\n \u250a153\u250a153\u250a\n \u250a154\u250a154\u250a      chats.push(chat);\n \u250a155\u250a155\u250a\n+\u250a   \u250a156\u250a      pubsub.publish('chatAdded', {\n+\u250a   \u250a157\u250a        chatAdded: chat,\n+\u250a   \u250a158\u250a      });\n+\u250a   \u250a159\u250a\n \u250a156\u250a160\u250a      return chat;\n \u250a157\u250a161\u250a    },\n \u250a158\u250a162\u250a  },\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -170,6 +174,17 @@\n \u250a170\u250a174\u250a        }\n \u250a171\u250a175\u250a      ),\n \u250a172\u250a176\u250a    },\n+\u250a   \u250a177\u250a\n+\u250a   \u250a178\u250a    chatAdded: {\n+\u250a   \u250a179\u250a      subscribe: withFilter(\n+\u250a   \u250a180\u250a        (root, args, { pubsub }) => pubsub.asyncIterator('chatAdded'),\n+\u250a   \u250a181\u250a        ({ chatAdded }: { chatAdded: Chat }, args, { currentUser }) => {\n+\u250a   \u250a182\u250a          if (!currentUser) return false;\n+\u250a   \u250a183\u250a\n+\u250a   \u250a184\u250a          return chatAdded.participants.some(p => p === currentUser.id);\n+\u250a   \u250a185\u250a        }\n+\u250a   \u250a186\u250a      ),\n+\u250a   \u250a187\u250a    },\n \u250a173\u250a188\u250a  },\n \u250a174\u250a189\u250a};\n \u250a175\u250a190\u250a\n")),(0,r.kt)("h5",{id:"changed-schematypedefsgraphql-2"},"Changed schema","/","typeDefs.graphql"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -39,4 +39,5 @@\n \u250a39\u250a39\u250a\n \u250a40\u250a40\u250atype Subscription {\n \u250a41\u250a41\u250a  messageAdded: Message!\n+\u250a  \u250a42\u250a  chatAdded: Chat!\n \u250a42\u250a43\u250a}\n")),(0,r.kt)("p",null,"Now we will listen to the new subscription in the client and update the cache. First we will define the subscription document:"),(0,r.kt)("h4",{id:"client-step-123-write-chat-on-chatadded"},(0,r.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/6e0c22036959b53d99f82fd7a7b578b5f74577ff"},(0,r.kt)("strong",{parentName:"a"},"Client")," Step 12.3: Write chat on chatAdded")),(0,r.kt)("h5",{id:"added-srcgraphqlsubscriptionschataddedsubscriptionts"},"Added src","/","graphql","/","subscriptions","/","chatAdded.subscription.ts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,11 @@\n+\u250a  \u250a 1\u250aimport gql from 'graphql-tag';\n+\u250a  \u250a 2\u250aimport * as fragments from '../fragments';\n+\u250a  \u250a 3\u250a\n+\u250a  \u250a 4\u250aexport default gql`\n+\u250a  \u250a 5\u250a  subscription ChatAdded {\n+\u250a  \u250a 6\u250a    chatAdded {\n+\u250a  \u250a 7\u250a      ...Chat\n+\u250a  \u250a 8\u250a    }\n+\u250a  \u250a 9\u250a  }\n+\u250a  \u250a10\u250a  ${fragments.chat}\n+\u250a  \u250a11\u250a`;\n")),(0,r.kt)("h5",{id:"changed-srcgraphqlsubscriptionsindexts"},"Changed src","/","graphql","/","subscriptions","/","index.ts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1 +1,2 @@\n \u250a1\u250a1\u250aexport { default as messageAdded } from './messageAdded.subscription';\n+\u250a \u250a2\u250aexport { default as chatAdded } from './chatAdded.subscription';\n")),(0,r.kt)("p",null,"And then we will update the ",(0,r.kt)("inlineCode",{parentName:"p"},"cache.service")," to write the broadcasted chat to the store. We will write the fragment, and we will also update the ",(0,r.kt)("inlineCode",{parentName:"p"},"chats")," query to contain the new chat. We will also check if the chat already exists before we update the query, because remember, the ",(0,r.kt)("inlineCode",{parentName:"p"},"addChat")," mutation will return the chat even if it already exists, not if it was created only:"),(0,r.kt)("h4",{id:"client-step-123-write-chat-on-chatadded-1"},(0,r.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/6e0c22036959b53d99f82fd7a7b578b5f74577ff"},(0,r.kt)("strong",{parentName:"a"},"Client")," Step 12.3: Write chat on chatAdded")),(0,r.kt)("h5",{id:"changed-srccomponentschatcreationscreenindextsx-1"},"Changed src","/","components","/","ChatCreationScreen","/","index.tsx"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -7,6 +7,7 @@\n \u250a 7\u250a 7\u250aimport ChatCreationNavbar from './ChatCreationNavbar';\n \u250a 8\u250a 8\u250aimport { useNavigate } from 'react-router-dom';\n \u250a 9\u250a 9\u250aimport { useAddChatMutation } from '../../graphql/types';\n+\u250a  \u250a10\u250aimport { writeChat } from '../../services/cache.service';\n \u250a10\u250a11\u250a\n \u250a11\u250a12\u250a// eslint-disable-next-line\n \u250a12\u250a13\u250aconst Container = styled.div`\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -51,6 +52,11 @@\n \u250a51\u250a52\u250a        variables: {\n \u250a52\u250a53\u250a          recipientId: user.id,\n \u250a53\u250a54\u250a        },\n+\u250a  \u250a55\u250a        update: (client, { data }) => {\n+\u250a  \u250a56\u250a          if (data && data.addChat) {\n+\u250a  \u250a57\u250a            writeChat(client, data.addChat);\n+\u250a  \u250a58\u250a          }\n+\u250a  \u250a59\u250a        },\n \u250a54\u250a60\u250a      }).then((result) => {\n \u250a55\u250a61\u250a        if (result && result.data !== null) {\n \u250a56\u250a62\u250a          navigate(`/chats/${result.data!.addChat!.id}`);\n")),(0,r.kt)("h5",{id:"added-srcgraphqlsubscriptionschataddedsubscriptionts-1"},"Added src","/","graphql","/","subscriptions","/","chatAdded.subscription.ts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,11 @@\n+\u250a  \u250a 1\u250aimport gql from 'graphql-tag';\n+\u250a  \u250a 2\u250aimport * as fragments from '../fragments';\n+\u250a  \u250a 3\u250a\n+\u250a  \u250a 4\u250aexport default gql`\n+\u250a  \u250a 5\u250a  subscription ChatAdded {\n+\u250a  \u250a 6\u250a    chatAdded {\n+\u250a  \u250a 7\u250a      ...Chat\n+\u250a  \u250a 8\u250a    }\n+\u250a  \u250a 9\u250a  }\n+\u250a  \u250a10\u250a  ${fragments.chat}\n+\u250a  \u250a11\u250a`;\n")),(0,r.kt)("h5",{id:"changed-srcgraphqlsubscriptionsindexts-1"},"Changed src","/","graphql","/","subscriptions","/","index.ts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1 +1,2 @@\n \u250a1\u250a1\u250aexport { default as messageAdded } from './messageAdded.subscription';\n+\u250a \u250a2\u250aexport { default as chatAdded } from './chatAdded.subscription';\n")),(0,r.kt)("h5",{id:"changed-srcservicescacheservicets"},"Changed src","/","services","/","cache.service.ts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -6,6 +6,8 @@\n \u250a 6\u250a 6\u250a  MessageFragment,\n \u250a 7\u250a 7\u250a  useMessageAddedSubscription,\n \u250a 8\u250a 8\u250a  ChatsQuery,\n+\u250a  \u250a 9\u250a  ChatFragment,\n+\u250a  \u250a10\u250a  useChatAddedSubscription,\n \u250a 9\u250a11\u250a} from '../graphql/types';\n \u250a10\u250a12\u250a\n \u250a11\u250a13\u250atype Client = Pick<\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -21,6 +23,14 @@\n \u250a21\u250a23\u250a      }\n \u250a22\u250a24\u250a    },\n \u250a23\u250a25\u250a  });\n+\u250a  \u250a26\u250a\n+\u250a  \u250a27\u250a  useChatAddedSubscription({\n+\u250a  \u250a28\u250a    onSubscriptionData: ({ client, subscriptionData: { data } }) => {\n+\u250a  \u250a29\u250a      if (data) {\n+\u250a  \u250a30\u250a        writeChat(client, data.chatAdded);\n+\u250a  \u250a31\u250a      }\n+\u250a  \u250a32\u250a    },\n+\u250a  \u250a33\u250a  });\n \u250a24\u250a34\u250a};\n \u250a25\u250a35\u250a\n \u250a26\u250a36\u250aexport const writeMessage = (client: Client, message: MessageFragment) => {\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -90,3 +100,40 @@\n \u250a 90\u250a100\u250a    data: { chats: chats },\n \u250a 91\u250a101\u250a  });\n \u250a 92\u250a102\u250a};\n+\u250a   \u250a103\u250a\n+\u250a   \u250a104\u250aexport const writeChat = (client: Client, chat: ChatFragment) => {\n+\u250a   \u250a105\u250a  const chatId = defaultDataIdFromObject(chat);\n+\u250a   \u250a106\u250a  if (chatId === null) {\n+\u250a   \u250a107\u250a    return;\n+\u250a   \u250a108\u250a  }\n+\u250a   \u250a109\u250a\n+\u250a   \u250a110\u250a  client.writeFragment({\n+\u250a   \u250a111\u250a    id: chatId,\n+\u250a   \u250a112\u250a    fragment: fragments.chat,\n+\u250a   \u250a113\u250a    fragmentName: 'Chat',\n+\u250a   \u250a114\u250a    data: chat,\n+\u250a   \u250a115\u250a  });\n+\u250a   \u250a116\u250a\n+\u250a   \u250a117\u250a  let data;\n+\u250a   \u250a118\u250a  try {\n+\u250a   \u250a119\u250a    data = client.readQuery<ChatsQuery>({\n+\u250a   \u250a120\u250a      query: queries.chats,\n+\u250a   \u250a121\u250a    });\n+\u250a   \u250a122\u250a  } catch (e) {\n+\u250a   \u250a123\u250a    return;\n+\u250a   \u250a124\u250a  }\n+\u250a   \u250a125\u250a\n+\u250a   \u250a126\u250a  if (!data) return;\n+\u250a   \u250a127\u250a\n+\u250a   \u250a128\u250a  const chats = data.chats;\n+\u250a   \u250a129\u250a\n+\u250a   \u250a130\u250a  if (!chats) return;\n+\u250a   \u250a131\u250a  if (chats.some((c: any) => c.id === chat.id)) return;\n+\u250a   \u250a132\u250a\n+\u250a   \u250a133\u250a  chats.unshift(chat);\n+\u250a   \u250a134\u250a\n+\u250a   \u250a135\u250a  client.writeQuery({\n+\u250a   \u250a136\u250a    query: queries.chats,\n+\u250a   \u250a137\u250a    data: { chats },\n+\u250a   \u250a138\u250a  });\n+\u250a   \u250a139\u250a};\n")),(0,r.kt)("p",null,"Now we can create new chats, and the chats list would be updated, without refreshing the page. You can also test it with 2 separate sessions in the browser and see how each tab/window affects the other. Lastly, we will implement a chat removal function. This is important as we don\u2019t want to garbage our chats collection, sometimes we would like to clean up some of them."),(0,r.kt)("p",null,"In the back-end, let\u2019s implement the ",(0,r.kt)("inlineCode",{parentName:"p"},"removeChat")," mutation. The chat can only be removed only if the current user is one of the chat\u2019s participants. The mutation will also remove all the messages which are related to the target chat, since we\u2019re not gonna use them anymore. The chat will be removed for all participants. This is not exactly the behavior of the original Whatsapp, but to keep things simple we will go with that solution:"),(0,r.kt)("h4",{id:"server-step-94-add-mutationremovechat"},(0,r.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/ceaf88f3d956bcf2ec05bfc9d08d3f89ffe1f026"},(0,r.kt)("strong",{parentName:"a"},"Server")," Step 9.4: Add Mutation.removeChat")),(0,r.kt)("h5",{id:"changed-schemaresolversts-3"},"Changed schema","/","resolvers.ts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -159,6 +159,30 @@\n \u250a159\u250a159\u250a\n \u250a160\u250a160\u250a      return chat;\n \u250a161\u250a161\u250a    },\n+\u250a   \u250a162\u250a\n+\u250a   \u250a163\u250a    removeChat(root, { chatId }, { currentUser }) {\n+\u250a   \u250a164\u250a      if (!currentUser) return null;\n+\u250a   \u250a165\u250a\n+\u250a   \u250a166\u250a      const chatIndex = chats.findIndex(c => c.id === chatId);\n+\u250a   \u250a167\u250a\n+\u250a   \u250a168\u250a      if (chatIndex === -1) return null;\n+\u250a   \u250a169\u250a\n+\u250a   \u250a170\u250a      const chat = chats[chatIndex];\n+\u250a   \u250a171\u250a\n+\u250a   \u250a172\u250a      if (!chat.participants.some(p => p === currentUser.id)) return null;\n+\u250a   \u250a173\u250a\n+\u250a   \u250a174\u250a      chat.messages.forEach(chatMessage => {\n+\u250a   \u250a175\u250a        const chatMessageIndex = messages.findIndex(m => m.id === chatMessage);\n+\u250a   \u250a176\u250a\n+\u250a   \u250a177\u250a        if (chatMessageIndex !== -1) {\n+\u250a   \u250a178\u250a          messages.splice(chatMessageIndex, 1);\n+\u250a   \u250a179\u250a        }\n+\u250a   \u250a180\u250a      });\n+\u250a   \u250a181\u250a\n+\u250a   \u250a182\u250a      chats.splice(chatIndex, 1);\n+\u250a   \u250a183\u250a\n+\u250a   \u250a184\u250a      return chatId;\n+\u250a   \u250a185\u250a    },\n \u250a162\u250a186\u250a  },\n \u250a163\u250a187\u250a\n \u250a164\u250a188\u250a  Subscription: {\n")),(0,r.kt)("h5",{id:"changed-schematypedefsgraphql-3"},"Changed schema","/","typeDefs.graphql"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -35,6 +35,7 @@\n \u250a35\u250a35\u250atype Mutation {\n \u250a36\u250a36\u250a  addMessage(chatId: ID!, content: String!): Message\n \u250a37\u250a37\u250a  addChat(recipientId: ID!): Chat\n+\u250a  \u250a38\u250a  removeChat(chatId: ID!): ID\n \u250a38\u250a39\u250a}\n \u250a39\u250a40\u250a\n \u250a40\u250a41\u250atype Subscription {\n")),(0,r.kt)("p",null,"In the client app, a chat could be removed directly from the ",(0,r.kt)("inlineCode",{parentName:"p"},"ChatRoomScreen"),". On the top right corner, right on the navbar, we will add a dispose button that will call the ",(0,r.kt)("inlineCode",{parentName:"p"},"removeChat")," mutation. Just like we did before, we will define the mutation document with ",(0,r.kt)("inlineCode",{parentName:"p"},"graphql-tag")," and generate the correlated hook with CodeGen:"),(0,r.kt)("h4",{id:"client-step-124-add-chat-removal-function"},(0,r.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/5491cf9ed0352a7a01cb773cdc3d62f2beb4bd64"},(0,r.kt)("strong",{parentName:"a"},"Client")," Step 12.4: Add chat removal function")),(0,r.kt)("h5",{id:"changed-srccomponentschatroomscreenchatnavbartsx"},"Changed src","/","components","/","ChatRoomScreen","/","ChatNavbar.tsx"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,10 +1,13 @@\n \u250a 1\u250a 1\u250aimport Button from '@material-ui/core/Button';\n \u250a 2\u250a 2\u250aimport Toolbar from '@material-ui/core/Toolbar';\n \u250a 3\u250a 3\u250aimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\n+\u250a  \u250a 4\u250aimport DeleteIcon from '@material-ui/icons/Delete';\n+\u250a  \u250a 5\u250aimport gql from 'graphql-tag';\n \u250a 4\u250a 6\u250aimport React from 'react';\n \u250a 5\u250a 7\u250aimport { useCallback } from 'react';\n \u250a 6\u250a 8\u250aimport styled from 'styled-components';\n \u250a 7\u250a 9\u250aimport { useNavigate } from 'react-router-dom';\n+\u250a  \u250a10\u250aimport { useRemoveChatMutation } from '../../graphql/types';\n \u250a 8\u250a11\u250a\n \u250a 9\u250a12\u250aconst Container = styled(Toolbar)`\n \u250a10\u250a13\u250a  padding: 0;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -20,6 +23,12 @@\n \u250a20\u250a23\u250a  }\n \u250a21\u250a24\u250a`;\n \u250a22\u250a25\u250a\n+\u250a  \u250a26\u250aconst Rest = styled.div`\n+\u250a  \u250a27\u250a  flex: 1;\n+\u250a  \u250a28\u250a  display: flex;\n+\u250a  \u250a29\u250a  justify-content: flex-end;\n+\u250a  \u250a30\u250a`;\n+\u250a  \u250a31\u250a\n \u250a23\u250a32\u250aconst Picture = styled.img`\n \u250a24\u250a33\u250a  height: 40px;\n \u250a25\u250a34\u250a  width: 40px;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -34,15 +43,38 @@\n \u250a34\u250a43\u250a  line-height: 56px;\n \u250a35\u250a44\u250a`;\n \u250a36\u250a45\u250a\n+\u250a  \u250a46\u250aconst DeleteButton = styled(Button)`\n+\u250a  \u250a47\u250a  color: var(--primary-text) !important;\n+\u250a  \u250a48\u250a`;\n+\u250a  \u250a49\u250a\n+\u250a  \u250a50\u250aexport const removeChatMutation = gql`\n+\u250a  \u250a51\u250a  mutation RemoveChat($chatId: ID!) {\n+\u250a  \u250a52\u250a    removeChat(chatId: $chatId)\n+\u250a  \u250a53\u250a  }\n+\u250a  \u250a54\u250a`;\n+\u250a  \u250a55\u250a\n \u250a37\u250a56\u250ainterface ChatNavbarProps {\n-\u250a39\u250a  \u250a  chat?: {\n+\u250a  \u250a58\u250a  chat: {\n \u250a40\u250a59\u250a    picture?: string | null;\n \u250a41\u250a60\u250a    name?: string | null;\n+\u250a  \u250a61\u250a    id: string;\n \u250a42\u250a62\u250a  };\n \u250a43\u250a63\u250a}\n \u250a44\u250a64\u250a\n \u250a45\u250a65\u250aconst ChatNavbar: React.FC<ChatNavbarProps> = ({ chat }) => {\n \u250a45\u250a65\u250a  const navigate : useNavigate();\n+\u250a  \u250a66\u250a  const [removeChat] = useRemoveChatMutation({\n+\u250a  \u250a67\u250a    variables: {\n+\u250a  \u250a68\u250a      chatId: chat.id,\n+\u250a  \u250a69\u250a    },\n+\u250a  \u250a70\u250a  });\n+\u250a  \u250a71\u250a\n+\u250a  \u250a72\u250a  const handleRemoveChat = useCallback(() => {\n+\u250a  \u250a73\u250a    removeChat().then(() => {\n+\u250a  \u250a74\u250a      navigate('/chats', { replace: true});\n+\u250a  \u250a75\u250a    });\n+\u250a  \u250a76\u250a  }, [removeChat, navigate]);\n+\u250a  \u250a77\u250a\n \u250a46\u250a78\u250a  const navBack = useCallback(() => {\n \u250a47\u250a79\u250a    navigate('/chats', { replace: true});\n \u250a48\u250a80\u250a  }, [navigate]);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},'@@ -58,6 +90,11 @@\n \u250a 58\u250a 90\u250a          <Name data-testid="chat-name">{chat.name}</Name>\n \u250a 59\u250a 91\u250a        </>\n \u250a 60\u250a 92\u250a      )}\n+\u250a   \u250a 93\u250a      <Rest>\n+\u250a   \u250a 94\u250a        <DeleteButton data-testid="delete-button" onClick={handleRemoveChat}>\n+\u250a   \u250a 95\u250a          <DeleteIcon />\n+\u250a   \u250a 96\u250a        </DeleteButton>\n+\u250a   \u250a 97\u250a      </Rest>\n \u250a 61\u250a 98\u250a    </Container>\n \u250a 62\u250a 99\u250a  );\n \u250a 63\u250a100\u250a};\n')),(0,r.kt)("h5",{id:"changed-srccomponentschatroomscreenindextsx"},"Changed src","/","components","/","ChatRoomScreen","/","index.tsx"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -97,7 +97,7 @@\n \u250a 97\u250a 97\u250a\n \u250a 98\u250a 98\u250a  return (\n \u250a 99\u250a 99\u250a    <Container>\n-\u250a100\u250a   \u250a      <ChatNavbar chat={chat} />\n+\u250a   \u250a100\u250a      {chat?.id && <ChatNavbar chat={chat} />}\n \u250a101\u250a101\u250a      {chat?.messages && <MessagesList messages={chat.messages} />}\n \u250a102\u250a102\u250a      <MessageInput onSendMessage={onSendMessage} />\n \u250a103\u250a103\u250a    </Container>\n")),(0,r.kt)("p",null,"Normally this is a dangerous behavior because we wipe out the entire history without any warnings, which is not recommended. For tutoring purposes only we will keep it the way it is, because it makes things simple and easier to understand."),(0,r.kt)("p",null,"To be able to update the chats list cache, we will implement a ",(0,r.kt)("inlineCode",{parentName:"p"},"chatRemoved")," subscription. The subscription will be broadcasted only to those who\u2019re participants of the published chat:"),(0,r.kt)("h4",{id:"server-step-95-add-subscriptionchatremoved"},(0,r.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/1b26dec38cba698d0bddd2c9881fdd344a0de48a"},(0,r.kt)("strong",{parentName:"a"},"Server")," Step 9.5: Add Subscription.chatRemoved")),(0,r.kt)("h5",{id:"changed-schemaresolversts-4"},"Changed schema","/","resolvers.ts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -160,7 +160,7 @@\n \u250a160\u250a160\u250a      return chat;\n \u250a161\u250a161\u250a    },\n \u250a162\u250a162\u250a\n-\u250a163\u250a   \u250a    removeChat(root, { chatId }, { currentUser }) {\n+\u250a   \u250a163\u250a    removeChat(root, { chatId }, { currentUser, pubsub }) {\n \u250a164\u250a164\u250a      if (!currentUser) return null;\n \u250a165\u250a165\u250a\n \u250a166\u250a166\u250a      const chatIndex = chats.findIndex(c => c.id === chatId);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -181,6 +181,11 @@\n \u250a181\u250a181\u250a\n \u250a182\u250a182\u250a      chats.splice(chatIndex, 1);\n \u250a183\u250a183\u250a\n+\u250a   \u250a184\u250a      pubsub.publish('chatRemoved', {\n+\u250a   \u250a185\u250a        chatRemoved: chat.id,\n+\u250a   \u250a186\u250a        targetChat: chat,\n+\u250a   \u250a187\u250a      });\n+\u250a   \u250a188\u250a\n \u250a184\u250a189\u250a      return chatId;\n \u250a185\u250a190\u250a    },\n \u250a186\u250a191\u250a  },\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -209,6 +214,17 @@\n \u250a209\u250a214\u250a        }\n \u250a210\u250a215\u250a      ),\n \u250a211\u250a216\u250a    },\n+\u250a   \u250a217\u250a\n+\u250a   \u250a218\u250a    chatRemoved: {\n+\u250a   \u250a219\u250a      subscribe: withFilter(\n+\u250a   \u250a220\u250a        (root, args, { pubsub }) => pubsub.asyncIterator('chatRemoved'),\n+\u250a   \u250a221\u250a        ({ targetChat }: { targetChat: Chat }, args, { currentUser }) => {\n+\u250a   \u250a222\u250a          if (!currentUser) return false;\n+\u250a   \u250a223\u250a\n+\u250a   \u250a224\u250a          return targetChat.participants.some(p => p === currentUser.id);\n+\u250a   \u250a225\u250a        }\n+\u250a   \u250a226\u250a      ),\n+\u250a   \u250a227\u250a    },\n \u250a212\u250a228\u250a  },\n \u250a213\u250a229\u250a};\n \u250a214\u250a230\u250a\n")),(0,r.kt)("h5",{id:"changed-schematypedefsgraphql-4"},"Changed schema","/","typeDefs.graphql"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -41,4 +41,5 @@\n \u250a41\u250a41\u250atype Subscription {\n \u250a42\u250a42\u250a  messageAdded: Message!\n \u250a43\u250a43\u250a  chatAdded: Chat!\n+\u250a  \u250a44\u250a  chatRemoved: ID!\n \u250a44\u250a45\u250a}\n")),(0,r.kt)("p",null,"In the client, we will define the right subscription document:"),(0,r.kt)("h4",{id:"client-step-125-update-cache-on-chat-removal"},(0,r.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/6fe238d3de5ed05bc39cf6963066a3f8f5f45265"},(0,r.kt)("strong",{parentName:"a"},"Client")," Step 12.5: Update cache on chat removal")),(0,r.kt)("h5",{id:"added-srcgraphqlsubscriptionschatremovedsubscriptionts"},"Added src","/","graphql","/","subscriptions","/","chatRemoved.subscription.ts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,7 @@\n+\u250a \u250a1\u250aimport gql from 'graphql-tag';\n+\u250a \u250a2\u250a\n+\u250a \u250a3\u250aexport default gql`\n+\u250a \u250a4\u250a  subscription ChatRemoved {\n+\u250a \u250a5\u250a    chatRemoved\n+\u250a \u250a6\u250a  }\n+\u250a \u250a7\u250a`;\n")),(0,r.kt)("h5",{id:"changed-srcgraphqlsubscriptionsindexts-2"},"Changed src","/","graphql","/","subscriptions","/","index.ts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,2 +1,3 @@\n \u250a1\u250a1\u250aexport { default as messageAdded } from './messageAdded.subscription';\n \u250a2\u250a2\u250aexport { default as chatAdded } from './chatAdded.subscription';\n+\u250a \u250a3\u250aexport { default as chatRemoved } from './chatRemoved.subscription';\n")),(0,r.kt)("p",null,"And we will update the ",(0,r.kt)("inlineCode",{parentName:"p"},"cache.service")," to listen to the new subscription and update the ",(0,r.kt)("inlineCode",{parentName:"p"},"chats")," query accordingly. When we deal with the fragment, we remove the ",(0,r.kt)("inlineCode",{parentName:"p"},"FullChat")," fragment because it consists of the ",(0,r.kt)("inlineCode",{parentName:"p"},"Chat")," fragment. If it was the other way around, we would still have some data leftovers from the ",(0,r.kt)("inlineCode",{parentName:"p"},"FullChat")," on the fragment, because of how Apollo-Cache manages the store:"),(0,r.kt)("h4",{id:"client-step-125-update-cache-on-chat-removal-1"},(0,r.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/6fe238d3de5ed05bc39cf6963066a3f8f5f45265"},(0,r.kt)("strong",{parentName:"a"},"Client")," Step 12.5: Update cache on chat removal")),(0,r.kt)("h5",{id:"changed-srcservicescacheservicets-1"},"Changed src","/","services","/","cache.service.ts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -8,6 +8,7 @@\n \u250a 8\u250a 8\u250a  ChatsQuery,\n \u250a 9\u250a 9\u250a  ChatFragment,\n \u250a10\u250a10\u250a  useChatAddedSubscription,\n+\u250a  \u250a11\u250a  useChatRemovedSubscription,\n \u250a11\u250a12\u250a} from '../graphql/types';\n \u250a12\u250a13\u250a\n \u250a13\u250a14\u250atype Client = Pick<\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -31,6 +32,14 @@\n \u250a31\u250a32\u250a      }\n \u250a32\u250a33\u250a    },\n \u250a33\u250a34\u250a  });\n+\u250a  \u250a35\u250a\n+\u250a  \u250a36\u250a  useChatRemovedSubscription({\n+\u250a  \u250a37\u250a    onSubscriptionData: ({ client, subscriptionData: { data } }) => {\n+\u250a  \u250a38\u250a      if (data) {\n+\u250a  \u250a39\u250a        eraseChat(client, data.chatRemoved);\n+\u250a  \u250a40\u250a      }\n+\u250a  \u250a41\u250a    },\n+\u250a  \u250a42\u250a  });\n \u250a34\u250a43\u250a};\n \u250a35\u250a44\u250a\n \u250a36\u250a45\u250aexport const writeMessage = (client: Client, message: MessageFragment) => {\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -137,3 +146,49 @@\n \u250a137\u250a146\u250a    data: { chats },\n \u250a138\u250a147\u250a  });\n \u250a139\u250a148\u250a};\n+\u250a   \u250a149\u250a\n+\u250a   \u250a150\u250aexport const eraseChat = (client: Client, chatId: string) => {\n+\u250a   \u250a151\u250a  const chatType = {\n+\u250a   \u250a152\u250a    __typename: 'Chat',\n+\u250a   \u250a153\u250a    id: chatId,\n+\u250a   \u250a154\u250a  };\n+\u250a   \u250a155\u250a\n+\u250a   \u250a156\u250a  const chatIdFromObject = defaultDataIdFromObject(chatType);\n+\u250a   \u250a157\u250a  if (chatIdFromObject === null) {\n+\u250a   \u250a158\u250a    return;\n+\u250a   \u250a159\u250a  }\n+\u250a   \u250a160\u250a\n+\u250a   \u250a161\u250a  client.writeFragment({\n+\u250a   \u250a162\u250a    id: chatIdFromObject,\n+\u250a   \u250a163\u250a    fragment: fragments.fullChat,\n+\u250a   \u250a164\u250a    fragmentName: 'FullChat',\n+\u250a   \u250a165\u250a    data: null,\n+\u250a   \u250a166\u250a  });\n+\u250a   \u250a167\u250a\n+\u250a   \u250a168\u250a  let data: ChatsQuery | null;\n+\u250a   \u250a169\u250a  try {\n+\u250a   \u250a170\u250a    data = client.readQuery<ChatsQuery>({\n+\u250a   \u250a171\u250a      query: queries.chats,\n+\u250a   \u250a172\u250a    });\n+\u250a   \u250a173\u250a  } catch (e) {\n+\u250a   \u250a174\u250a    return;\n+\u250a   \u250a175\u250a  }\n+\u250a   \u250a176\u250a\n+\u250a   \u250a177\u250a  if (!data || !data.chats) return;\n+\u250a   \u250a178\u250a\n+\u250a   \u250a179\u250a  const chats = data.chats;\n+\u250a   \u250a180\u250a\n+\u250a   \u250a181\u250a  if (!chats) return;\n+\u250a   \u250a182\u250a\n+\u250a   \u250a183\u250a  const chatIndex = chats.findIndex((c: any) => c.id === chatId);\n+\u250a   \u250a184\u250a\n+\u250a   \u250a185\u250a  if (chatIndex === -1) return;\n+\u250a   \u250a186\u250a\n+\u250a   \u250a187\u250a  // The chat will appear at the top of the ChatsList component\n+\u250a   \u250a188\u250a  chats.splice(chatIndex, 1);\n+\u250a   \u250a189\u250a\n+\u250a   \u250a190\u250a  client.writeQuery({\n+\u250a   \u250a191\u250a    query: queries.chats,\n+\u250a   \u250a192\u250a    data: { chats: chats },\n+\u250a   \u250a193\u250a  });\n+\u250a   \u250a194\u250a};\n")),(0,r.kt)("p",null,"We will also update the ",(0,r.kt)("inlineCode",{parentName:"p"},"ChatRoomScreen")," to redirect us to the ",(0,r.kt)("inlineCode",{parentName:"p"},"/chats")," route if the chat was not found."),(0,r.kt)("p",null,"The render method of the component will be re-triggered automatically by ",(0,r.kt)("inlineCode",{parentName:"p"},"@apollo/react-hooks")," if the cached result of ",(0,r.kt)("inlineCode",{parentName:"p"},"useGetChat()")," hook has changed,\nwhich means that even if you didn\u2019t actively remove the chat, you will still be redirected as a result:"),(0,r.kt)("h4",{id:"client-step-125-update-cache-on-chat-removal-2"},(0,r.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/6fe238d3de5ed05bc39cf6963066a3f8f5f45265"},(0,r.kt)("strong",{parentName:"a"},"Client")," Step 12.5: Update cache on chat removal")),(0,r.kt)("h5",{id:"changed-srccomponentschatroomscreenchatnavbartsx-1"},"Changed src","/","components","/","ChatRoomScreen","/","ChatNavbar.tsx"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -8,6 +8,7 @@\n \u250a 8\u250a 8\u250aimport styled from 'styled-components';\n \u250a 9\u250a 9\u250aimport { useNavigate } from 'react-router-dom';\n \u250a10\u250a10\u250aimport { useRemoveChatMutation } from '../../graphql/types';\n+\u250a  \u250a11\u250aimport { eraseChat } from '../../services/cache.service';\n \u250a11\u250a12\u250a\n \u250a12\u250a13\u250aconst Container = styled(Toolbar)`\n \u250a13\u250a14\u250a  padding: 0;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -67,6 +68,11 @@\n \u250a67\u250a68\u250a    variables: {\n \u250a68\u250a69\u250a      chatId: chat.id,\n \u250a69\u250a70\u250a    },\n+\u250a  \u250a71\u250a    update: (client, { data }) => {\n+\u250a  \u250a72\u250a      if (data && data.removeChat) {\n+\u250a  \u250a73\u250a        eraseChat(client, data.removeChat);\n+\u250a  \u250a74\u250a      }\n+\u250a  \u250a75\u250a    },\n \u250a70\u250a76\u250a  });\n \u250a71\u250a77\u250a\n \u250a72\u250a78\u250a  const handleRemoveChat = useCallback(() => {\n")),(0,r.kt)("h5",{id:"changed-srccomponentschatroomscreenindextsx-1"},"Changed src","/","components","/","ChatRoomScreen","/","index.tsx"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,6 +1,7 @@\n \u250a1\u250a1\u250aimport gql from 'graphql-tag';\n \u250a2\u250a2\u250aimport React from 'react';\n \u250a3\u250a3\u250aimport { useCallback } from 'react';\n+\u250a \u250a4\u250aimport { Navigate } from 'react-router-dom';\n \u250a4\u250a5\u250aimport styled from 'styled-components';\n \u250a5\u250a6\u250aimport ChatNavbar from './ChatNavbar';\n \u250a6\u250a7\u250aimport MessageInput from './MessageInput';\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},'@@ -95,6 +96,11 @@\n \u250a 95\u250a 96\u250a  if (loadingChat) return null;\n \u250a 96\u250a 97\u250a  if (chat === null) return null;\n \u250a 97\u250a 98\u250a\n+\u250a   \u250a 99\u250a  // Chat was probably removed from cache by the subscription handler\n+\u250a   \u250a100\u250a  if (!chat) {\n+\u250a   \u250a101\u250a    return <Navigate to="/chats" />;\n+\u250a   \u250a102\u250a  }\n+\u250a   \u250a103\u250a\n \u250a 98\u250a104\u250a  return (\n \u250a 99\u250a105\u250a    <Container>\n \u250a100\u250a106\u250a      {chat?.id && <ChatNavbar chat={chat} />}\n')),(0,r.kt)("p",null,"TODO: maybe mention that ApolloCache doesn\u2019t have Garbage Collector so even though the object is removed, everything else related to it says in cache."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"th",href:"https://github.com/Urigo/WhatsApp-Clone-Tutorial/tree/master@next/.tortilla/manuals/views/step11.md"},"< Previous Step")),(0,r.kt)("th",{parentName:"tr",align:"right"},(0,r.kt)("a",{parentName:"th",href:"https://github.com/Urigo/WhatsApp-Clone-Tutorial/tree/master@next/.tortilla/manuals/views/step13.md"},"Next Step >"))))))}h.isMDXComponent=!0}}]);