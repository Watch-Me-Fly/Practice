"use strict";(self.webpackChunkovrsea_whatsapp_tuto=self.webpackChunkovrsea_whatsapp_tuto||[]).push([[2336],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var r=t(7294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var d=r.createContext({}),l=function(e){var n=r.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(d.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,s=e.mdxType,a=e.originalType,d=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=l(t),m=s,h=u["".concat(d,".").concat(m)]||u[m]||p[m]||a;return t?r.createElement(h,o(o({ref:n},c),{},{components:t})):r.createElement(h,o({ref:n},c))}));function m(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var a=t.length,o=new Array(a);o[0]=u;var i={};for(var d in n)hasOwnProperty.call(n,d)&&(i[d]=n[d]);i.originalType=e,i.mdxType="string"==typeof e?e:s,o[1]=i;for(var l=2;l<a;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5825:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var r=t(7462),s=(t(7294),t(3905));const a={sidebar_label:"Step 16: Modularity",sidebar_position:16},o="Step 16: Modularity",i={unversionedId:"tuto-whatsapp/step16",id:"version-1.0.0/tuto-whatsapp/step16",title:"Step 16: Modularity",description:"[//]: # (head-end)",source:"@site/versioned_docs/version-1.0.0/tuto-whatsapp/step16.md",sourceDirName:"tuto-whatsapp",slug:"/tuto-whatsapp/step16",permalink:"/docs/1.0.0/tuto-whatsapp/step16",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/versioned_docs/version-1.0.0/tuto-whatsapp/step16.md",tags:[],version:"1.0.0",sidebarPosition:16,frontMatter:{sidebar_label:"Step 16: Modularity",sidebar_position:16},sidebar:"tutorialSidebar",previous:{title:"Step 15: Using a REST API",permalink:"/docs/1.0.0/tuto-whatsapp/step15"},next:{title:"Step 17: Performance",permalink:"/docs/1.0.0/tuto-whatsapp/step17"}},d={},l=[{value:"Issues we face when GraphQL API grows",id:"issues-we-face-when-graphql-api-grows",level:2},{value:"That&#39;s why modularity is a thing!",id:"thats-why-modularity-is-a-thing",level:2},{value:"Many ways to organize an API",id:"many-ways-to-organize-an-api",level:2},{value:"Modularized schema",id:"modularized-schema",level:2},{value:"Using directories",id:"using-directories",level:3},{value:"<strong>Server</strong> Step 13.1: Modularize schema",id:"server-step-131-modularize-schema",level:4},{value:"Added modules/common/index.ts",id:"added-modulescommonindexts",level:5},{value:"<strong>Server</strong> Step 13.1: Modularize schema",id:"server-step-131-modularize-schema-1",level:4},{value:"Added modules/users/index.ts",id:"added-modulesusersindexts",level:5},{value:"<strong>Server</strong> Step 13.1: Modularize schema",id:"server-step-131-modularize-schema-2",level:4},{value:"Changed schema/resolvers.ts",id:"changed-schemaresolversts",level:5},{value:"<strong>Server</strong> Step 13.1: Modularize schema",id:"server-step-131-modularize-schema-3",level:4},{value:"Changed schema/index.ts",id:"changed-schemaindexts",level:5},{value:"<strong>Server</strong> Step 13.1: Modularize schema",id:"server-step-131-modularize-schema-4",level:4},{value:"Changed codegen.yml",id:"changed-codegenyml",level:5},{value:"Using Apollo Modules",id:"using-apollo-modules",level:3},{value:"<strong>Server</strong> Step 13.2: Use Apollo Modules",id:"server-step-132-use-apollo-modules",level:4},{value:"Changed index.ts",id:"changed-indexts",level:5},{value:"Deleted schema/index.ts",id:"deleted-schemaindexts",level:5},{value:"<strong>Server</strong> Step 13.2: Use Apollo Modules",id:"server-step-132-use-apollo-modules-1",level:4},{value:"Changed codegen.yml",id:"changed-codegenyml-1",level:5},{value:"Using GraphQL Modules",id:"using-graphql-modules",level:3},{value:"<strong>Server</strong> Step 13.3: Use GraphQL Modules",id:"server-step-133-use-graphql-modules",level:4},{value:"Changed modules/common/index.ts",id:"changed-modulescommonindexts",level:5},{value:"<strong>Server</strong> Step 13.3: Use GraphQL Modules",id:"server-step-133-use-graphql-modules-1",level:4},{value:"Changed modules/users/index.ts",id:"changed-modulesusersindexts",level:5},{value:"<strong>Server</strong> Step 13.3: Use GraphQL Modules",id:"server-step-133-use-graphql-modules-2",level:4},{value:"Changed modules/chats/index.ts",id:"changed-moduleschatsindexts",level:5},{value:"<strong>Server</strong> Step 13.3: Use GraphQL Modules",id:"server-step-133-use-graphql-modules-3",level:4},{value:"Changed index.ts",id:"changed-indexts-1",level:5},{value:"Changed modules/chats/index.ts",id:"changed-moduleschatsindexts-1",level:5},{value:"Changed modules/common/index.ts",id:"changed-modulescommonindexts-1",level:5},{value:"Changed modules/users/index.ts",id:"changed-modulesusersindexts-1",level:5},{value:"Migrate Unsplash API to Chats",id:"migrate-unsplash-api-to-chats",level:4},{value:"<strong>Server</strong> Step 13.4: Migrate RESTDataSource",id:"server-step-134-migrate-restdatasource",level:4},{value:"Changed schema/unsplash.api.ts",id:"changed-schemaunsplashapits",level:5},{value:"<strong>Server</strong> Step 13.4: Migrate RESTDataSource",id:"server-step-134-migrate-restdatasource-1",level:4},{value:"Changed index.ts",id:"changed-indexts-2",level:5},{value:"Changed modules/chats/index.ts",id:"changed-moduleschatsindexts-2",level:5},{value:"<strong>Server</strong> Step 13.4: Migrate RESTDataSource",id:"server-step-134-migrate-restdatasource-2",level:4},{value:"Changed context.ts",id:"changed-contextts",level:5},{value:"<strong>Server</strong> Step 13.4: Migrate RESTDataSource",id:"server-step-134-migrate-restdatasource-3",level:4},{value:"Changed modules/chats/index.ts",id:"changed-moduleschatsindexts-3",level:5},{value:"Dependency Injection in GraphQL Modules",id:"dependency-injection-in-graphql-modules",level:4},{value:"<strong>Server</strong> Step 13.5: Use Dependency Injection",id:"server-step-135-use-dependency-injection",level:4},{value:"Changed context.ts",id:"changed-contextts-1",level:5},{value:"<strong>Server</strong> Step 13.5: Use Dependency Injection",id:"server-step-135-use-dependency-injection-1",level:4},{value:"Changed index.ts",id:"changed-indexts-3",level:5},{value:"Changed modules/chats/index.ts",id:"changed-moduleschatsindexts-4",level:5},{value:"Changed modules/common/index.ts",id:"changed-modulescommonindexts-2",level:5},{value:"<strong>Server</strong> Step 13.5: Use Dependency Injection",id:"server-step-135-use-dependency-injection-2",level:4},{value:"Changed modules/chats/unsplash.api.ts",id:"changed-moduleschatsunsplashapits",level:5},{value:"<strong>Server</strong> Step 13.5: Use Dependency Injection",id:"server-step-135-use-dependency-injection-3",level:4},{value:"Changed modules/chats/index.ts",id:"changed-moduleschatsindexts-5",level:5},{value:"Continuing with DI",id:"continuing-with-di",level:4},{value:"<strong>Server</strong> Step 13.6: Define Database provider",id:"server-step-136-define-database-provider",level:4},{value:"Added modules/common/database.provider.ts",id:"added-modulescommondatabaseproviderts",level:5},{value:"<strong>Server</strong> Step 13.6: Define Database provider",id:"server-step-136-define-database-provider-1",level:4},{value:"Changed modules/common/index.ts",id:"changed-modulescommonindexts-3",level:5},{value:"<strong>Server</strong> Step 13.6: Define Database provider",id:"server-step-136-define-database-provider-2",level:4},{value:"Creating Users and Chats services",id:"creating-users-and-chats-services",level:4},{value:"<strong>Server</strong> Step 13.7: Basic User provider",id:"server-step-137-basic-user-provider",level:4},{value:"Changed modules/users/index.ts",id:"changed-modulesusersindexts-2",level:5},{value:"Added modules/users/users.provider.ts",id:"added-modulesusersusersproviderts",level:5},{value:"<strong>Server</strong> Step 13.8: Implement newUser and findByUsername",id:"server-step-138-implement-newuser-and-findbyusername",level:4},{value:"Changed modules/users/index.ts",id:"changed-modulesusersindexts-3",level:5},{value:"Changed modules/users/users.provider.ts",id:"changed-modulesusersusersproviderts",level:5},{value:"<strong>Server</strong> Step 13.9: Implement findById and use in Chats module",id:"server-step-139-implement-findbyid-and-use-in-chats-module",level:4},{value:"Changed modules/chats/index.ts",id:"changed-moduleschatsindexts-6",level:5},{value:"Changed modules/users/users.provider.ts",id:"changed-modulesusersusersproviderts-1",level:5},{value:"<strong>Server</strong> Step 13.10: Basic Chats provider",id:"server-step-1310-basic-chats-provider",level:4},{value:"Added modules/chats/chats.provider.ts",id:"added-moduleschatschatsproviderts",level:5},{value:"Changed modules/chats/index.ts",id:"changed-moduleschatsindexts-7",level:5},{value:"<strong>Server</strong> Step 13.11: Implement findChatById",id:"server-step-1311-implement-findchatbyid",level:4},{value:"Changed modules/chats/chats.provider.ts",id:"changed-moduleschatschatsproviderts",level:5},{value:"Changed modules/chats/index.ts",id:"changed-moduleschatsindexts-8",level:5},{value:"<strong>Server</strong> Step 13.12: Find chat&#39;s messages",id:"server-step-1312-find-chats-messages",level:4},{value:"Changed modules/chats/chats.provider.ts",id:"changed-moduleschatschatsproviderts-1",level:5},{value:"Changed modules/chats/index.ts",id:"changed-moduleschatsindexts-9",level:5},{value:"<strong>Server</strong> Step 13.13: Find first participant",id:"server-step-1313-find-first-participant",level:4},{value:"Changed modules/chats/chats.provider.ts",id:"changed-moduleschatschatsproviderts-2",level:5},{value:"Changed modules/chats/index.ts",id:"changed-moduleschatsindexts-10",level:5},{value:"<strong>Server</strong> Step 13.14: Find all participants",id:"server-step-1314-find-all-participants",level:4},{value:"Changed modules/chats/chats.provider.ts",id:"changed-moduleschatschatsproviderts-3",level:5},{value:"Changed modules/chats/index.ts",id:"changed-moduleschatsindexts-11",level:5},{value:"<strong>Server</strong> Step 13.15: Check if a user belongs to a chat",id:"server-step-1315-check-if-a-user-belongs-to-a-chat",level:4},{value:"Changed modules/chats/chats.provider.ts",id:"changed-moduleschatschatsproviderts-4",level:5},{value:"Changed modules/chats/index.ts",id:"changed-moduleschatsindexts-12",level:5},{value:"Sharing PubSub",id:"sharing-pubsub",level:4},{value:"<strong>Server</strong> Step 13.16: Move PubSub to Dependency Injection",id:"server-step-1316-move-pubsub-to-dependency-injection",level:4},{value:"Changed context.ts",id:"changed-contextts-2",level:5},{value:"Changed modules/chats/index.ts",id:"changed-moduleschatsindexts-13",level:5},{value:"Changed modules/common/index.ts",id:"changed-modulescommonindexts-4",level:5},{value:"Added modules/common/pubsub.provider.ts",id:"added-modulescommonpubsubproviderts",level:5},{value:"<strong>Server</strong> Step 13.17: Migrate addMessage to Chats provider",id:"server-step-1317-migrate-addmessage-to-chats-provider",level:4},{value:"Changed modules/chats/chats.provider.ts",id:"changed-moduleschatschatsproviderts-5",level:5},{value:"Changed modules/chats/index.ts",id:"changed-moduleschatsindexts-14",level:5},{value:"<strong>Server</strong> Step 13.18: Migrate addChat to Chats provider",id:"server-step-1318-migrate-addchat-to-chats-provider",level:4},{value:"Changed modules/chats/chats.provider.ts",id:"changed-moduleschatschatsproviderts-6",level:5},{value:"Changed modules/chats/index.ts",id:"changed-moduleschatsindexts-15",level:5},{value:"Changed modules/users/users.provider.ts",id:"changed-modulesusersusersproviderts-2",level:5},{value:"<strong>Server</strong> Step 13.19: Migrate removeChat to Chats provider",id:"server-step-1319-migrate-removechat-to-chats-provider",level:4},{value:"Changed modules/chats/chats.provider.ts",id:"changed-moduleschatschatsproviderts-7",level:5},{value:"Changed modules/chats/index.ts",id:"changed-moduleschatsindexts-16",level:5},{value:"Implementing Auth service",id:"implementing-auth-service",level:4},{value:"<strong>Server</strong> Step 13.20: Implement Auth provider with currentUser method",id:"server-step-1320-implement-auth-provider-with-currentuser-method",level:4},{value:"Added modules/users/auth.provider.ts",id:"added-modulesusersauthproviderts",level:5},{value:"<strong>Server</strong> Step 13.20: Implement Auth provider with currentUser method",id:"server-step-1320-implement-auth-provider-with-currentuser-method-1",level:4},{value:"Changed context.ts",id:"changed-contextts-3",level:5},{value:"Changed modules/users/index.ts",id:"changed-modulesusersindexts-4",level:5},{value:"<strong>Server</strong> Step 13.20: Implement Auth provider with currentUser method",id:"server-step-1320-implement-auth-provider-with-currentuser-method-2",level:4},{value:"Changed modules/chats/index.ts",id:"changed-moduleschatsindexts-17",level:5},{value:"<strong>Server</strong> Step 13.21: Remove db from context",id:"server-step-1321-remove-db-from-context",level:4},{value:"Changed context.ts",id:"changed-contextts-4",level:5},{value:"Changed modules/chats/index.ts",id:"changed-moduleschatsindexts-18",level:5},{value:"Changed modules/common/index.ts",id:"changed-modulescommonindexts-5",level:5},{value:"Changed modules/users/index.ts",id:"changed-modulesusersindexts-5",level:5},{value:"<strong>Server</strong> Step 13.22: Move signUp logic to Auth provider",id:"server-step-1322-move-signup-logic-to-auth-provider",level:4},{value:"Changed modules/users/auth.provider.ts",id:"changed-modulesusersauthproviderts",level:5},{value:"Changed modules/users/index.ts",id:"changed-modulesusersindexts-6",level:5},{value:"<strong>Server</strong> Step 13.23: Move signIn logic to Auth provider",id:"server-step-1323-move-signin-logic-to-auth-provider",level:4},{value:"Changed context.ts",id:"changed-contextts-5",level:5},{value:"Changed modules/common/index.ts",id:"changed-modulescommonindexts-6",level:5},{value:"Changed modules/users/auth.provider.ts",id:"changed-modulesusersauthproviderts-1",level:5},{value:"Changed modules/users/index.ts",id:"changed-modulesusersindexts-7",level:5},{value:"Exposing server instance",id:"exposing-server-instance",level:4},{value:"<strong>Server</strong> Step 13.24: Move ApolloServer and RootModule into a separate file",id:"server-step-1324-move-apolloserver-and-rootmodule-into-a-separate-file",level:4},{value:"Changed index.ts",id:"changed-indexts-4",level:5},{value:"Added server.ts",id:"added-serverts",level:5},{value:"<strong>Server</strong> Step 13.25: Export server instance",id:"server-step-1325-export-server-instance",level:4},{value:"Changed server.ts",id:"changed-serverts",level:5},{value:"<strong>Server</strong> Step 13.26: Define mocked version of Auth provider",id:"server-step-1326-define-mocked-version-of-auth-provider",level:4},{value:"Added tests/mocks/auth.provider.ts",id:"added-testsmocksauthproviderts",level:5},{value:"<strong>Server</strong> Step 13.27: Adjust tests",id:"server-step-1327-adjust-tests",level:4},{value:"Changed tests/mutations/addChat.test.ts",id:"changed-testsmutationsaddchattestts",level:5},{value:"Changed tests/mutations/addMessage.test.ts",id:"changed-testsmutationsaddmessagetestts",level:5},{value:"Changed tests/mutations/removeChat.test.ts",id:"changed-testsmutationsremovechattestts",level:5},{value:"Changed tests/queries/getChat.test.ts",id:"changed-testsqueriesgetchattestts",level:5},{value:"Changed tests/queries/getChats.test.ts",id:"changed-testsqueriesgetchatstestts",level:5},{value:"Changed tests/queries/getMe.test.ts",id:"changed-testsqueriesgetmetestts",level:5},{value:"Changed tests/queries/getUsers.test.ts",id:"changed-testsqueriesgetuserstestts",level:5},{value:"Adjusting client",id:"adjusting-client",level:2},{value:"<strong>Client</strong> Step 14.1: Adjust to GraphQL Modules",id:"client-step-141-adjust-to-graphql-modules",level:4},{value:"Changed codegen.yml",id:"changed-codegenyml-2",level:5},{value:"Many ways to write GraphQL",id:"many-ways-to-write-graphql",level:2}],c={toc:l};function p(e){let{components:n,...t}=e;return(0,s.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"step-16-modularity"},"Step 16: Modularity"),(0,s.kt)("p",null,"This chapter is focused entirely on how to organize a GraphQL API. By far, our project's schema looks simple and keeping SDL and resolvers in two files is really enough."),(0,s.kt)("h2",{id:"issues-we-face-when-graphql-api-grows"},"Issues we face when GraphQL API grows"),(0,s.kt)("p",null,"Usually, every app starts small and the difficulty of maintenance grows while features are being implemented. I believe that you should always start small and see how a project involves. You could look up many articles about best practices of organising a project but they bring no benefit when your project is small. You don't want to jump between files in order to find what you're looking for, it should be intuitive. I agree a proper folder structure helps but if your schema has 100 lines of code then it makes no sense to split it into 5 files with 20 LOC each. The schema is so small that it won't hurt you when you hit the wall and separation will be necessary but until it happens you can easily move on with the project."),(0,s.kt)("p",null,"Bigger project means more people, more people means teams. In the current state of the app, they might interrupt each other and that eventually affects productivity.\nLack of separation makes the schema harder to maintain, especially once it grows rapidly."),(0,s.kt)("h2",{id:"thats-why-modularity-is-a-thing"},"That's why modularity is a thing!"),(0,s.kt)("p",null,"In order to improve and solve those issues we would have to split an API into many pieces.\nThose might be files, even folders, doesn't really matter because the goal is to keep relevant chunks of code in one place, conceptually called module."),(0,s.kt)("p",null,"If done right, one team won't disturb another and it also helps to understand an entire codebase just by looking at those modules or even learn a feature because everything related to it is within a single module."),(0,s.kt)("p",null,"There's also a very important aspect, reusability. Most APIs have something in common, the first thing that comes to mind is authentication and user mechanism in general.\nWhen working with modules, it gets easier to share those."),(0,s.kt)("h2",{id:"many-ways-to-organize-an-api"},"Many ways to organize an API"),(0,s.kt)("p",null,"GraphQL specification explains just the language and how to form an API. Managing codebase, that's on our side."),(0,s.kt)("p",null,"Since we're talking about modularity, let's see possible implementations."),(0,s.kt)("p",null,"The first thing on mind are files and folders. Putting relevant logic in a file won't scale well once we add more things, like business logic for example. Which means we need folders, that's for sure."),(0,s.kt)("p",null,"Okay, so the next question, how to store SDL and resolvers. Do we want to have them stored together or keep them separated?"),(0,s.kt)("p",null,"I'm a big fan of the former because in schema-first approach the SDL is written first and you see exactly how to construct resolvers. The latter would require to jump between files or have them opened side-by-side.\nAnother benefit shows up when you add, remove or just change part of a schema, less likely that you'll miss something."),(0,s.kt)("p",null,"But as always, there are things you can't do with that approach.\nOne that pops into my head right away is an IDE support\u2026 ?\n< guys, any ideas? >"),(0,s.kt)("p",null,"Let's talk about modularity in terms of SDL.\nWe know how to define types in GraphQL but what if a type is a sum of many features?\nThere two ways to do it. One is to use the ",(0,s.kt)("inlineCode",{parentName:"p"},"extend")," keyword, another to define a type multiple type. Both gave the same effect, all is merged into one type after all."),(0,s.kt)("p",null,"But there are few major differences."),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"extend")," keyword is obviously a part of the specification so IDEs and most tools support it. It feels more natural than the second option."),(0,s.kt)("p",null,"Defining the same type multiple times is the opposite. It might feel odd, not many IDEs and\ntools support it so you have to add a library that handles it but on the other way you don't care if there's already a type or not, you just make sure there's one with proper fields, no matter what. It might also warn you when fields overlap."),(0,s.kt)("h2",{id:"modularized-schema"},"Modularized schema"),(0,s.kt)("p",null,"There are couple solutions to help you modularize the schema and we will look at 3 of them."),(0,s.kt)("p",null,"First, let's start by defining 3 modules:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"common - things we want to share with all the rest"),(0,s.kt)("li",{parentName:"ul"},"users - everything related to users"),(0,s.kt)("li",{parentName:"ul"},"chats - core logic of WhatsApp")),(0,s.kt)("h3",{id:"using-directories"},"Using directories"),(0,s.kt)("p",null,"The simplest and most obvious solution would be to split what we have and move that into directories."),(0,s.kt)("p",null,"Starting with common module. We need to create a folder at ",(0,s.kt)("inlineCode",{parentName:"p"},"/modules/common")," and a ",(0,s.kt)("inlineCode",{parentName:"p"},"index.ts")," file in it:"),(0,s.kt)("h4",{id:"server-step-131-modularize-schema"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/4d80d4805eda25411de6a605ac26d0fe62440b26"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 13.1: Modularize schema")),(0,s.kt)("h5",{id:"added-modulescommonindexts"},"Added modules","/","common","/","index.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,25 @@\n+\u250a  \u250a 1\u250aimport { gql } from 'apollo-server-express';\n+\u250a  \u250a 2\u250aimport { DateTimeResolver, URLResolver } from 'graphql-scalars';\n+\u250a  \u250a 3\u250aimport { Resolvers } from '../../types/graphql';\n+\u250a  \u250a 4\u250a\n+\u250a  \u250a 5\u250aexport const typeDefs = gql`\n+\u250a  \u250a 6\u250a  scalar Date\n+\u250a  \u250a 7\u250a  scalar URL\n+\u250a  \u250a 8\u250a\n+\u250a  \u250a 9\u250a  type Query {\n+\u250a  \u250a10\u250a    _dummy: Boolean\n+\u250a  \u250a11\u250a  }\n+\u250a  \u250a12\u250a\n+\u250a  \u250a13\u250a  type Mutation {\n+\u250a  \u250a14\u250a    _dummy: Boolean\n+\u250a  \u250a15\u250a  }\n+\u250a  \u250a16\u250a\n+\u250a  \u250a17\u250a  type Subscription {\n+\u250a  \u250a18\u250a    _dummy: Boolean\n+\u250a  \u250a19\u250a  }\n+\u250a  \u250a20\u250a`;\n+\u250a  \u250a21\u250a\n+\u250a  \u250a22\u250aexport const resolvers: Resolvers = {\n+\u250a  \u250a23\u250a  Date: DateTimeResolver,\n+\u250a  \u250a24\u250a  URL: URLResolver,\n+\u250a  \u250a25\u250a};\n")),(0,s.kt)("p",null,"You can see a pattern here, two things are being exported, one with type definitions and the other with resolvers. Why those ",(0,s.kt)("inlineCode",{parentName:"p"},"_dummy")," fields? We want to use ",(0,s.kt)("inlineCode",{parentName:"p"},"extend")," keyword, that require a base type and GraphQL doesn't accept empty objects."),(0,s.kt)("p",null,"Now, let's do the same but with Users module:"),(0,s.kt)("h4",{id:"server-step-131-modularize-schema-1"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/4d80d4805eda25411de6a605ac26d0fe62440b26"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 13.1: Modularize schema")),(0,s.kt)("h5",{id:"added-modulesusersindexts"},"Added modules","/","users","/","index.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,100 @@\n+\u250a   \u250a  1\u250aimport { gql } from 'apollo-server-express';\n+\u250a   \u250a  2\u250aimport sql from 'sql-template-strings';\n+\u250a   \u250a  3\u250aimport bcrypt from 'bcrypt';\n+\u250a   \u250a  4\u250aimport jwt from 'jsonwebtoken';\n+\u250a   \u250a  5\u250aimport { secret, expiration } from '../../env';\n+\u250a   \u250a  6\u250aimport { validateLength, validatePassword } from '../../validators';\n+\u250a   \u250a  7\u250aimport { Resolvers } from '../../types/graphql';\n+\u250a   \u250a  8\u250a\n+\u250a   \u250a  9\u250aexport const typeDefs = gql`\n+\u250a   \u250a 10\u250a  type User {\n+\u250a   \u250a 11\u250a    id: ID!\n+\u250a   \u250a 12\u250a    name: String!\n+\u250a   \u250a 13\u250a    picture: URL\n+\u250a   \u250a 14\u250a  }\n+\u250a   \u250a 15\u250a\n+\u250a   \u250a 16\u250a  extend type Query {\n+\u250a   \u250a 17\u250a    me: User\n+\u250a   \u250a 18\u250a    users: [User!]!\n+\u250a   \u250a 19\u250a  }\n+\u250a   \u250a 20\u250a\n+\u250a   \u250a 21\u250a  extend type Mutation {\n+\u250a   \u250a 22\u250a    signIn(username: String!, password: String!): User\n+\u250a   \u250a 23\u250a    signUp(\n+\u250a   \u250a 24\u250a      name: String!\n+\u250a   \u250a 25\u250a      username: String!\n+\u250a   \u250a 26\u250a      password: String!\n+\u250a   \u250a 27\u250a      passwordConfirm: String!\n+\u250a   \u250a 28\u250a    ): User\n+\u250a   \u250a 29\u250a  }\n+\u250a   \u250a 30\u250a`;\n+\u250a   \u250a 31\u250a\n+\u250a   \u250a 32\u250aexport const resolvers: Resolvers = {\n+\u250a   \u250a 33\u250a  Query: {\n+\u250a   \u250a 34\u250a    me(root, args, { currentUser }) {\n+\u250a   \u250a 35\u250a      return currentUser || null;\n+\u250a   \u250a 36\u250a    },\n+\u250a   \u250a 37\u250a    async users(root, args, { currentUser, db }) {\n+\u250a   \u250a 38\u250a      if (!currentUser) return [];\n+\u250a   \u250a 39\u250a\n+\u250a   \u250a 40\u250a      const { rows } = await db.query(sql`\n+\u250a   \u250a 41\u250a        SELECT * FROM users WHERE users.id != ${currentUser.id}\n+\u250a   \u250a 42\u250a      `);\n+\u250a   \u250a 43\u250a\n+\u250a   \u250a 44\u250a      return rows;\n+\u250a   \u250a 45\u250a    },\n+\u250a   \u250a 46\u250a  },\n+\u250a   \u250a 47\u250a  Mutation: {\n+\u250a   \u250a 48\u250a    async signIn(root, { username, password }, { db, res }) {\n+\u250a   \u250a 49\u250a      const { rows } = await db.query(\n+\u250a   \u250a 50\u250a        sql`SELECT * FROM users WHERE username = ${username}`\n+\u250a   \u250a 51\u250a      );\n+\u250a   \u250a 52\u250a      const user = rows[0];\n+\u250a   \u250a 53\u250a\n+\u250a   \u250a 54\u250a      if (!user) {\n+\u250a   \u250a 55\u250a        throw new Error('user not found');\n+\u250a   \u250a 56\u250a      }\n+\u250a   \u250a 57\u250a\n+\u250a   \u250a 58\u250a      const passwordsMatch = bcrypt.compareSync(password, user.password);\n+\u250a   \u250a 59\u250a\n+\u250a   \u250a 60\u250a      if (!passwordsMatch) {\n+\u250a   \u250a 61\u250a        throw new Error('password is incorrect');\n+\u250a   \u250a 62\u250a      }\n+\u250a   \u250a 63\u250a\n+\u250a   \u250a 64\u250a      const authToken = jwt.sign(username, secret);\n+\u250a   \u250a 65\u250a\n+\u250a   \u250a 66\u250a      res.cookie('authToken', authToken, { maxAge: expiration });\n+\u250a   \u250a 67\u250a\n+\u250a   \u250a 68\u250a      return user;\n+\u250a   \u250a 69\u250a    },\n+\u250a   \u250a 70\u250a\n+\u250a   \u250a 71\u250a    async signUp(root, { name, username, password, passwordConfirm }, { db }) {\n+\u250a   \u250a 72\u250a      validateLength('req.name', name, 3, 50);\n+\u250a   \u250a 73\u250a      validateLength('req.username', username, 3, 18);\n+\u250a   \u250a 74\u250a      validatePassword('req.password', password);\n+\u250a   \u250a 75\u250a\n+\u250a   \u250a 76\u250a      if (password !== passwordConfirm) {\n+\u250a   \u250a 77\u250a        throw Error(\"req.password and req.passwordConfirm don't match\");\n+\u250a   \u250a 78\u250a      }\n+\u250a   \u250a 79\u250a\n+\u250a   \u250a 80\u250a      const existingUserQuery = await db.query(\n+\u250a   \u250a 81\u250a        sql`SELECT * FROM users WHERE username = ${username}`\n+\u250a   \u250a 82\u250a      );\n+\u250a   \u250a 83\u250a      if (existingUserQuery.rows[0]) {\n+\u250a   \u250a 84\u250a        throw Error('username already exists');\n+\u250a   \u250a 85\u250a      }\n+\u250a   \u250a 86\u250a\n+\u250a   \u250a 87\u250a      const passwordHash = bcrypt.hashSync(password, bcrypt.genSaltSync(8));\n+\u250a   \u250a 88\u250a\n+\u250a   \u250a 89\u250a      const createdUserQuery = await db.query(sql`\n+\u250a   \u250a 90\u250a        INSERT INTO users(password, picture, username, name)\n+\u250a   \u250a 91\u250a        VALUES(${passwordHash}, '', ${username}, ${name})\n+\u250a   \u250a 92\u250a        RETURNING *\n+\u250a   \u250a 93\u250a      `);\n+\u250a   \u250a 94\u250a\n+\u250a   \u250a 95\u250a      const user = createdUserQuery.rows[0];\n+\u250a   \u250a 96\u250a\n+\u250a   \u250a 97\u250a      return user;\n+\u250a   \u250a 98\u250a    },\n+\u250a   \u250a 99\u250a  },\n+\u250a   \u250a100\u250a};\n")),(0,s.kt)("p",null,"And Chats module:"),(0,s.kt)("h4",{id:"server-step-131-modularize-schema-2"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/4d80d4805eda25411de6a605ac26d0fe62440b26"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 13.1: Modularize schema")),(0,s.kt)("h5",{id:"changed-schemaresolversts"},"Changed schema","/","resolvers.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,17 +1,47 @@\n-\u250a 1\u250a  \u250aimport { withFilter } from 'apollo-server-express';\n-\u250a 2\u250a  \u250aimport { DateTimeResolver, URLResolver } from 'graphql-scalars';\n-\u250a 3\u250a  \u250aimport { Message, Chat, pool } from '../db';\n-\u250a 4\u250a  \u250aimport { Resolvers } from '../types/graphql';\n-\u250a 5\u250a  \u250aimport { secret, expiration } from '../env';\n-\u250a 6\u250a  \u250aimport bcrypt from 'bcrypt';\n-\u250a 7\u250a  \u250aimport jwt from 'jsonwebtoken';\n-\u250a 8\u250a  \u250aimport { validateLength, validatePassword } from '../validators';\n+\u250a  \u250a 1\u250aimport { gql, withFilter } from 'apollo-server-express';\n \u250a 9\u250a 2\u250aimport sql from 'sql-template-strings';\n-\u250a10\u250a  \u250a\n-\u250a11\u250a  \u250aconst resolvers: Resolvers = {\n-\u250a12\u250a  \u250a  Date: DateTimeResolver,\n-\u250a13\u250a  \u250a  URL: URLResolver,\n-\u250a14\u250a  \u250a\n+\u250a  \u250a 3\u250aimport { Message, Chat, pool } from '../../db';\n+\u250a  \u250a 4\u250aimport { Resolvers } from '../../types/graphql';\n+\u250a  \u250a 5\u250a\n+\u250a  \u250a 6\u250aexport const typeDefs = gql`\n+\u250a  \u250a 7\u250a  type Message {\n+\u250a  \u250a 8\u250a    id: ID!\n+\u250a  \u250a 9\u250a    content: String!\n+\u250a  \u250a10\u250a    createdAt: Date!\n+\u250a  \u250a11\u250a    chat: Chat\n+\u250a  \u250a12\u250a    sender: User\n+\u250a  \u250a13\u250a    recipient: User\n+\u250a  \u250a14\u250a    isMine: Boolean!\n+\u250a  \u250a15\u250a  }\n+\u250a  \u250a16\u250a\n+\u250a  \u250a17\u250a  type Chat {\n+\u250a  \u250a18\u250a    id: ID!\n+\u250a  \u250a19\u250a    name: String\n+\u250a  \u250a20\u250a    picture: URL\n+\u250a  \u250a21\u250a    lastMessage: Message\n+\u250a  \u250a22\u250a    messages: [Message!]!\n+\u250a  \u250a23\u250a    participants: [User!]!\n+\u250a  \u250a24\u250a  }\n+\u250a  \u250a25\u250a\n+\u250a  \u250a26\u250a  extend type Query {\n+\u250a  \u250a27\u250a    chats: [Chat!]!\n+\u250a  \u250a28\u250a    chat(chatId: ID!): Chat\n+\u250a  \u250a29\u250a  }\n+\u250a  \u250a30\u250a\n+\u250a  \u250a31\u250a  extend type Mutation {\n+\u250a  \u250a32\u250a    addMessage(chatId: ID!, content: String!): Message\n+\u250a  \u250a33\u250a    addChat(recipientId: ID!): Chat\n+\u250a  \u250a34\u250a    removeChat(chatId: ID!): ID\n+\u250a  \u250a35\u250a  }\n+\u250a  \u250a36\u250a\n+\u250a  \u250a37\u250a  extend type Subscription {\n+\u250a  \u250a38\u250a    messageAdded: Message!\n+\u250a  \u250a39\u250a    chatAdded: Chat!\n+\u250a  \u250a40\u250a    chatRemoved: ID!\n+\u250a  \u250a41\u250a  }\n+\u250a  \u250a42\u250a`;\n+\u250a  \u250a43\u250a\n+\u250a  \u250a44\u250aexport const resolvers: Resolvers = {\n \u250a15\u250a45\u250a  Message: {\n \u250a16\u250a46\u250a    createdAt(message) {\n \u250a17\u250a47\u250a      return new Date(message.created_at);\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -106,10 +136,6 @@\n \u250a106\u250a136\u250a  },\n \u250a107\u250a137\u250a\n \u250a108\u250a138\u250a  Query: {\n-\u250a109\u250a   \u250a    me(root, args, { currentUser }) {\n-\u250a110\u250a   \u250a      return currentUser || null;\n-\u250a111\u250a   \u250a    },\n-\u250a112\u250a   \u250a\n \u250a113\u250a139\u250a    async chats(root, args, { currentUser, db }) {\n \u250a114\u250a140\u250a      if (!currentUser) return [];\n \u250a115\u250a141\u250a\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -134,71 +160,9 @@\n \u250a134\u250a160\u250a\n \u250a135\u250a161\u250a      return rows[0] ? rows[0] : null;\n \u250a136\u250a162\u250a    },\n-\u250a137\u250a   \u250a\n-\u250a138\u250a   \u250a    async users(root, args, { currentUser, db }) {\n-\u250a139\u250a   \u250a      if (!currentUser) return [];\n-\u250a140\u250a   \u250a\n-\u250a141\u250a   \u250a      const { rows } = await db.query(sql`\n-\u250a142\u250a   \u250a        SELECT * FROM users WHERE users.id != ${currentUser.id}\n-\u250a143\u250a   \u250a      `);\n-\u250a144\u250a   \u250a\n-\u250a145\u250a   \u250a      return rows;\n-\u250a146\u250a   \u250a    },\n \u250a147\u250a163\u250a  },\n \u250a148\u250a164\u250a\n \u250a149\u250a165\u250a  Mutation: {\n-\u250a150\u250a   \u250a    async signIn(root, { username, password }, { db, res }) {\n-\u250a151\u250a   \u250a      const { rows } = await db.query(\n-\u250a152\u250a   \u250a        sql`SELECT * FROM users WHERE username = ${username}`\n-\u250a153\u250a   \u250a      );\n-\u250a154\u250a   \u250a      const user = rows[0];\n-\u250a155\u250a   \u250a\n-\u250a156\u250a   \u250a      if (!user) {\n-\u250a157\u250a   \u250a        throw new Error('user not found');\n-\u250a158\u250a   \u250a      }\n-\u250a159\u250a   \u250a\n-\u250a160\u250a   \u250a      const passwordsMatch = bcrypt.compareSync(password, user.password);\n-\u250a161\u250a   \u250a\n-\u250a162\u250a   \u250a      if (!passwordsMatch) {\n-\u250a163\u250a   \u250a        throw new Error('password is incorrect');\n-\u250a164\u250a   \u250a      }\n-\u250a165\u250a   \u250a\n-\u250a166\u250a   \u250a      const authToken = jwt.sign(username, secret);\n-\u250a167\u250a   \u250a\n-\u250a168\u250a   \u250a      res.cookie('authToken', authToken, { maxAge: expiration });\n-\u250a169\u250a   \u250a\n-\u250a170\u250a   \u250a      return user;\n-\u250a171\u250a   \u250a    },\n-\u250a172\u250a   \u250a\n-\u250a173\u250a   \u250a    async signUp(root, { name, username, password, passwordConfirm }, { db }) {\n-\u250a174\u250a   \u250a      validateLength('req.name', name, 3, 50);\n-\u250a175\u250a   \u250a      validateLength('req.username', username, 3, 18);\n-\u250a176\u250a   \u250a      validatePassword('req.password', password);\n-\u250a177\u250a   \u250a\n-\u250a178\u250a   \u250a      if (password !== passwordConfirm) {\n-\u250a179\u250a   \u250a        throw Error(\"req.password and req.passwordConfirm don't match\");\n-\u250a180\u250a   \u250a      }\n-\u250a181\u250a   \u250a\n-\u250a182\u250a   \u250a      const existingUserQuery = await db.query(\n-\u250a183\u250a   \u250a        sql`SELECT * FROM users WHERE username = ${username}`\n-\u250a184\u250a   \u250a      );\n-\u250a185\u250a   \u250a      if (existingUserQuery.rows[0]) {\n-\u250a186\u250a   \u250a        throw Error('username already exists');\n-\u250a187\u250a   \u250a      }\n-\u250a188\u250a   \u250a\n-\u250a189\u250a   \u250a      const passwordHash = bcrypt.hashSync(password, bcrypt.genSaltSync(8));\n-\u250a190\u250a   \u250a\n-\u250a191\u250a   \u250a      const createdUserQuery = await db.query(sql`\n-\u250a192\u250a   \u250a        INSERT INTO users(password, picture, username, name)\n-\u250a193\u250a   \u250a        VALUES(${passwordHash}, '', ${username}, ${name})\n-\u250a194\u250a   \u250a        RETURNING *\n-\u250a195\u250a   \u250a      `);\n-\u250a196\u250a   \u250a\n-\u250a197\u250a   \u250a      const user = createdUserQuery.rows[0];\n-\u250a198\u250a   \u250a\n-\u250a199\u250a   \u250a      return user;\n-\u250a200\u250a   \u250a    },\n-\u250a201\u250a   \u250a\n \u250a202\u250a166\u250a    async addMessage(root, { chatId, content }, { currentUser, pubsub, db }) {\n \u250a203\u250a167\u250a      if (!currentUser) return null;\n \u250a204\u250a168\u250a\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -359,5 +323,3 @@\n \u250a359\u250a323\u250a    },\n \u250a360\u250a324\u250a  },\n \u250a361\u250a325\u250a};\n-\u250a362\u250a   \u250a\n-\u250a363\u250a   \u250aexport default resolvers;\n")),(0,s.kt)("p",null,"Seems like modules are ready but we still need to create a Schema out of them."),(0,s.kt)("h4",{id:"server-step-131-modularize-schema-3"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/4d80d4805eda25411de6a605ac26d0fe62440b26"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 13.1: Modularize schema")),(0,s.kt)("h5",{id:"changed-schemaindexts"},"Changed schema","/","index.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,10 +1,15 @@\n-\u250a 1\u250a  \u250aimport { importSchema } from 'graphql-import';\n \u250a 2\u250a 1\u250aimport { makeExecutableSchema, IResolvers } from 'graphql-tools';\n-\u250a 3\u250a  \u250aimport resolvers from './resolvers';\n-\u250a 4\u250a  \u250a\n-\u250a 5\u250a  \u250aconst typeDefs = importSchema('schema/typeDefs.graphql');\n+\u250a  \u250a 2\u250aimport { merge } from 'lodash';\n+\u250a  \u250a 3\u250aimport * as commonModule from '../modules/common';\n+\u250a  \u250a 4\u250aimport * as usersModule from '../modules/users';\n+\u250a  \u250a 5\u250aimport * as chatsModule from '../modules/chats';\n \u250a 6\u250a 6\u250a\n \u250a 7\u250a 7\u250aexport default makeExecutableSchema({\n-\u250a 8\u250a  \u250a  resolvers: resolvers as IResolvers,\n-\u250a 9\u250a  \u250a  typeDefs,\n+\u250a  \u250a 8\u250a  resolvers: merge(\n+\u250a  \u250a 9\u250a    {},\n+\u250a  \u250a10\u250a    commonModule.resolvers,\n+\u250a  \u250a11\u250a    usersModule.resolvers,\n+\u250a  \u250a12\u250a    chatsModule.resolvers\n+\u250a  \u250a13\u250a  ) as IResolvers,\n+\u250a  \u250a14\u250a  typeDefs: [commonModule.typeDefs, usersModule.typeDefs, chatsModule.typeDefs],\n \u250a10\u250a15\u250a});\n")),(0,s.kt)("p",null,"Because we moved everything from ",(0,s.kt)("inlineCode",{parentName:"p"},"resolvers.ts")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"typeDefs.graphql")," files, those can now be removed."),(0,s.kt)("p",null,"The last thing we need to adjust is the GraphQL Code Generator's config, in ",(0,s.kt)("inlineCode",{parentName:"p"},"codegen.yml"),":"),(0,s.kt)("h4",{id:"server-step-131-modularize-schema-4"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/4d80d4805eda25411de6a605ac26d0fe62440b26"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 13.1: Modularize schema")),(0,s.kt)("h5",{id:"changed-codegenyml"},"Changed codegen.yml"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,7 +1,7 @@\n \u250a1\u250a1\u250aoverwrite: true\n \u250a2\u250a2\u250agenerates:\n \u250a3\u250a3\u250a  ./types/graphql.d.ts:\n-\u250a4\u250a \u250a    schema: ./schema/typeDefs.graphql\n+\u250a \u250a4\u250a    schema: ./modules/*/index.ts\n \u250a5\u250a5\u250a    plugins:\n \u250a6\u250a6\u250a      - typescript\n \u250a7\u250a7\u250a      - typescript-resolvers\n")),(0,s.kt)("p",null,"We no longer keep all type definitions in one place and all documents are wrapped with ",(0,s.kt)("inlineCode",{parentName:"p"},"gql")," tag, the codegen is smart enough to find those."),(0,s.kt)("h3",{id:"using-apollo-modules"},"Using Apollo Modules"),(0,s.kt)("p",null,"An alternative to the previous solution and far more interesting is a module feature of Apollo Server."),(0,s.kt)("p",null,"Let's see how it all might look like when using Apollo Server's modules:"),(0,s.kt)("h4",{id:"server-step-132-use-apollo-modules"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/b2e68df844c596421cf13d36f2741ee6a43d2b2f"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 13.2: Use Apollo Modules")),(0,s.kt)("h5",{id:"changed-indexts"},"Changed index.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -5,12 +5,15 @@\n \u250a 5\u250a 5\u250aimport { app } from './app';\n \u250a 6\u250a 6\u250aimport { pool } from './db';\n \u250a 7\u250a 7\u250aimport { origin, port, secret } from './env';\n-\u250a 8\u250a  \u250aimport schema from './schema';\n \u250a 9\u250a 8\u250aimport { MyContext } from './context';\n \u250a10\u250a 9\u250aimport sql from 'sql-template-strings';\n \u250a11\u250a10\u250aimport { UnsplashApi } from './schema/unsplash.api';\n \u250a12\u250a11\u250aconst { PostgresPubSub } = require('graphql-postgres-subscriptions');\n \u250a13\u250a12\u250a\n+\u250a  \u250a13\u250aimport * as commonModule from './modules/common';\n+\u250a  \u250a14\u250aimport * as usersModule from './modules/users';\n+\u250a  \u250a15\u250aimport * as chatsModule from './modules/chats';\n+\u250a  \u250a16\u250a\n \u250a14\u250a17\u250aconst pubsub = new PostgresPubSub({\n \u250a15\u250a18\u250a  host: 'localhost',\n \u250a16\u250a19\u250a  port: process.env.DB_PORT ? parseInt(process.env.DB_PORT) : 5432,\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -19,7 +22,7 @@\n \u250a19\u250a22\u250a  database: 'whatsapp',\n \u250a20\u250a23\u250a});\n \u250a21\u250a24\u250aconst server = new ApolloServer({\n-\u250a22\u250a  \u250a  schema,\n+\u250a  \u250a25\u250a  modules: [commonModule, usersModule, chatsModule],\n \u250a23\u250a26\u250a  context: async (session: any) => {\n \u250a24\u250a27\u250a    // Access the request object\n \u250a25\u250a28\u250a    let req = session.connection\n")),(0,s.kt)("h5",{id:"deleted-schemaindexts"},"Deleted schema","/","index.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,15 +0,0 @@\n-\u250a 1\u250a  \u250aimport { makeExecutableSchema, IResolvers } from 'graphql-tools';\n-\u250a 2\u250a  \u250aimport { merge } from 'lodash';\n-\u250a 3\u250a  \u250aimport * as commonModule from '../modules/common';\n-\u250a 4\u250a  \u250aimport * as usersModule from '../modules/users';\n-\u250a 5\u250a  \u250aimport * as chatsModule from '../modules/chats';\n-\u250a 6\u250a  \u250a\n-\u250a 7\u250a  \u250aexport default makeExecutableSchema({\n-\u250a 8\u250a  \u250a  resolvers: merge(\n-\u250a 9\u250a  \u250a    {},\n-\u250a10\u250a  \u250a    commonModule.resolvers,\n-\u250a11\u250a  \u250a    usersModule.resolvers,\n-\u250a12\u250a  \u250a    chatsModule.resolvers\n-\u250a13\u250a  \u250a  ) as IResolvers,\n-\u250a14\u250a  \u250a  typeDefs: [commonModule.typeDefs, usersModule.typeDefs, chatsModule.typeDefs],\n-\u250a15\u250a  \u250a});\n")),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"modules")," of ApolloServer accepts an array of objects with ",(0,s.kt)("inlineCode",{parentName:"p"},"resolvers")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"typeDefs")," properties. That's exactly what we exported and that's why we can use esmodules directly."),(0,s.kt)("p",null,"Because we no longer use ",(0,s.kt)("inlineCode",{parentName:"p"},"schema.ts"),", let's remove it."),(0,s.kt)("p",null,"If you would run the server right now, you will see a lot of warnings about missing index signatures. It's definitely nothing to worry about and can be easily fixed by using ",(0,s.kt)("inlineCode",{parentName:"p"},"useIndexSignature")," flag of codegen:"),(0,s.kt)("h4",{id:"server-step-132-use-apollo-modules-1"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/b2e68df844c596421cf13d36f2741ee6a43d2b2f"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 13.2: Use Apollo Modules")),(0,s.kt)("h5",{id:"changed-codegenyml-1"},"Changed codegen.yml"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -6,6 +6,7 @@\n \u250a 6\u250a 6\u250a      - typescript\n \u250a 7\u250a 7\u250a      - typescript-resolvers\n \u250a 8\u250a 8\u250a    config:\n+\u250a  \u250a 9\u250a      useIndexSignature: true\n \u250a 9\u250a10\u250a      contextType: ../context#MyContext\n \u250a10\u250a11\u250a      mappers:\n \u250a11\u250a12\u250a        # import { Message } from '../db'\n")),(0,s.kt)("p",null,"You might ask how is that different from what we have already implemented. The code is a bit simpler because the merging part is done by Apollo Server. We get some helpful messages when type's definition is missing but one of the modules was extending it and also when there are duplicates. Apollo Modules are very straightforward and basic but maybe that's all you really need in a project."),(0,s.kt)("h3",{id:"using-graphql-modules"},"Using GraphQL Modules"),(0,s.kt)("p",null,"There's an another alternative option that forces good patterns and providess a nice to work with API. It's called GraphQL Modules.\nThe main goal is to help organize an API and allow to develop it across multiple teams."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"yarn add @graphql-modules/core\n")),(0,s.kt)("p",null,"Same as Apollo Server's modules, has useful warnings and messages but you can use it with any implementation of GraphQL server."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import { GraphQLModule } from \u2018@graphql-modules/core';\n\nexport default = new GraphQLModule({\n  name: 'common',\n  typeDefs,\n  resolvers\n});\n")),(0,s.kt)("p",null,"It's a bit similar to what we have in Apollo Modules but as you probably noticed, it's wrapped within ",(0,s.kt)("inlineCode",{parentName:"p"},"GraphQLModule")," class.\nThe class manages a business logic, SDL, resolvers and dependencies between modules."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"An important thing to be aware of, GraphQL Modules encapsulates every module. To get a better understanding, think of it as CSS Modules.")),(0,s.kt)("p",null,"Now that you know some basics, let's implement the simplest of all modules:"),(0,s.kt)("h4",{id:"server-step-133-use-graphql-modules"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/649de12c95f6472da5edf6355a50a7590e3c94f1"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 13.3: Use GraphQL Modules")),(0,s.kt)("h5",{id:"changed-modulescommonindexts"},"Changed modules","/","common","/","index.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,8 +1,12 @@\n+\u250a  \u250a 1\u250aimport { GraphQLModule } from '@graphql-modules/core';\n \u250a 1\u250a 2\u250aimport { gql } from 'apollo-server-express';\n \u250a 2\u250a 3\u250aimport { DateTimeResolver, URLResolver } from 'graphql-scalars';\n+\u250a  \u250a 4\u250aimport { pool } from '../../db';\n \u250a 3\u250a 5\u250aimport { Resolvers } from '../../types/graphql';\n \u250a 4\u250a 6\u250a\n-\u250a 5\u250a  \u250aexport const typeDefs = gql`\n+\u250a  \u250a 7\u250aconst { PostgresPubSub } = require('graphql-postgres-subscriptions');\n+\u250a  \u250a 8\u250a\n+\u250a  \u250a 9\u250aconst typeDefs = gql`\n \u250a 6\u250a10\u250a  scalar Date\n \u250a 7\u250a11\u250a  scalar URL\n \u250a 8\u250a12\u250a\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -19,7 +23,34 @@\n \u250a19\u250a23\u250a  }\n \u250a20\u250a24\u250a`;\n \u250a21\u250a25\u250a\n-\u250a22\u250a  \u250aexport const resolvers: Resolvers = {\n+\u250a  \u250a26\u250aconst resolvers: Resolvers = {\n \u250a23\u250a27\u250a  Date: DateTimeResolver,\n \u250a24\u250a28\u250a  URL: URLResolver,\n \u250a25\u250a29\u250a};\n+\u250a  \u250a30\u250a\n+\u250a  \u250a31\u250aconst pubsub = new PostgresPubSub({\n+\u250a  \u250a32\u250a  host: 'localhost',\n+\u250a  \u250a33\u250a  port: process.env.DB_PORT ? parseInt(process.env.DB_PORT) : 5432,\n+\u250a  \u250a34\u250a  user: 'testuser',\n+\u250a  \u250a35\u250a  password: 'testpassword',\n+\u250a  \u250a36\u250a  database: 'whatsapp',\n+\u250a  \u250a37\u250a});\n+\u250a  \u250a38\u250a\n+\u250a  \u250a39\u250aexport default new GraphQLModule({\n+\u250a  \u250a40\u250a  name: 'common',\n+\u250a  \u250a41\u250a  typeDefs,\n+\u250a  \u250a42\u250a  resolvers,\n+\u250a  \u250a43\u250a  async context({ res, connection }) {\n+\u250a  \u250a44\u250a    let db;\n+\u250a  \u250a45\u250a\n+\u250a  \u250a46\u250a    if (!connection) {\n+\u250a  \u250a47\u250a      db = await pool.connect();\n+\u250a  \u250a48\u250a    }\n+\u250a  \u250a49\u250a\n+\u250a  \u250a50\u250a    return {\n+\u250a  \u250a51\u250a      pubsub,\n+\u250a  \u250a52\u250a      res,\n+\u250a  \u250a53\u250a      db,\n+\u250a  \u250a54\u250a    };\n+\u250a  \u250a55\u250a  },\n+\u250a  \u250a56\u250a});\n")),(0,s.kt)("p",null,"As we mentioned, there's no global context so we moved the common parts into Common module."),(0,s.kt)("p",null,"Let's take care of other two modules and migrate ",(0,s.kt)("inlineCode",{parentName:"p"},"modules/users/index.ts")," first:"),(0,s.kt)("h4",{id:"server-step-133-use-graphql-modules-1"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/649de12c95f6472da5edf6355a50a7590e3c94f1"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 13.3: Use GraphQL Modules")),(0,s.kt)("h5",{id:"changed-modulesusersindexts"},"Changed modules","/","users","/","index.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,12 +1,16 @@\n+\u250a  \u250a 1\u250aimport { GraphQLModule } from '@graphql-modules/core';\n \u250a 1\u250a 2\u250aimport { gql } from 'apollo-server-express';\n+\u250a  \u250a 3\u250aimport cookie from 'cookie';\n \u250a 2\u250a 4\u250aimport sql from 'sql-template-strings';\n \u250a 3\u250a 5\u250aimport bcrypt from 'bcrypt';\n \u250a 4\u250a 6\u250aimport jwt from 'jsonwebtoken';\n+\u250a  \u250a 7\u250aimport commonModule from '../common';\n \u250a 5\u250a 8\u250aimport { secret, expiration } from '../../env';\n+\u250a  \u250a 9\u250aimport { pool } from '../../db';\n \u250a 6\u250a10\u250aimport { validateLength, validatePassword } from '../../validators';\n \u250a 7\u250a11\u250aimport { Resolvers } from '../../types/graphql';\n \u250a 8\u250a12\u250a\n-\u250a 9\u250a  \u250aexport const typeDefs = gql`\n+\u250a  \u250a13\u250aconst typeDefs = gql`\n \u250a10\u250a14\u250a  type User {\n \u250a11\u250a15\u250a    id: ID!\n \u250a12\u250a16\u250a    name: String!\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -29,7 +33,7 @@\n \u250a29\u250a33\u250a  }\n \u250a30\u250a34\u250a`;\n \u250a31\u250a35\u250a\n-\u250a32\u250a  \u250aexport const resolvers: Resolvers = {\n+\u250a  \u250a36\u250aconst resolvers: Resolvers = {\n \u250a33\u250a37\u250a  Query: {\n \u250a34\u250a38\u250a    me(root, args, { currentUser }) {\n \u250a35\u250a39\u250a      return currentUser || null;\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -98,3 +102,38 @@\n \u250a 98\u250a102\u250a    },\n \u250a 99\u250a103\u250a  },\n \u250a100\u250a104\u250a};\n+\u250a   \u250a105\u250a\n+\u250a   \u250a106\u250aexport default new GraphQLModule({\n+\u250a   \u250a107\u250a  name: 'users',\n+\u250a   \u250a108\u250a  typeDefs,\n+\u250a   \u250a109\u250a  resolvers,\n+\u250a   \u250a110\u250a  imports: () => [commonModule],\n+\u250a   \u250a111\u250a  async context(session) {\n+\u250a   \u250a112\u250a    let currentUser;\n+\u250a   \u250a113\u250a\n+\u250a   \u250a114\u250a    // Access the request object\n+\u250a   \u250a115\u250a    let req = session.connection\n+\u250a   \u250a116\u250a      ? session.connection.context.request\n+\u250a   \u250a117\u250a      : session.req;\n+\u250a   \u250a118\u250a\n+\u250a   \u250a119\u250a    // It's subscription\n+\u250a   \u250a120\u250a    if (session.connection) {\n+\u250a   \u250a121\u250a      req.cookies = cookie.parse(req.headers.cookie || '');\n+\u250a   \u250a122\u250a    }\n+\u250a   \u250a123\u250a\n+\u250a   \u250a124\u250a    if (req.cookies.authToken) {\n+\u250a   \u250a125\u250a      const username = jwt.verify(req.cookies.authToken, secret) as string;\n+\u250a   \u250a126\u250a\n+\u250a   \u250a127\u250a      if (username) {\n+\u250a   \u250a128\u250a        const { rows } = await pool.query(\n+\u250a   \u250a129\u250a          sql`SELECT * FROM users WHERE username = ${username}`\n+\u250a   \u250a130\u250a        );\n+\u250a   \u250a131\u250a        currentUser = rows[0];\n+\u250a   \u250a132\u250a      }\n+\u250a   \u250a133\u250a    }\n+\u250a   \u250a134\u250a\n+\u250a   \u250a135\u250a    return {\n+\u250a   \u250a136\u250a      currentUser,\n+\u250a   \u250a137\u250a    };\n+\u250a   \u250a138\u250a  },\n+\u250a   \u250a139\u250a});\n")),(0,s.kt)("p",null,"Just like with Common, we also moved related context but there's a totally new thing called ",(0,s.kt)("inlineCode",{parentName:"p"},"imports"),". In order to let Users module see Common's contents (types, resolvers, context etc) we need to include it in the dependencies."),(0,s.kt)("p",null,"Now ",(0,s.kt)("inlineCode",{parentName:"p"},"Chats")," that depends on ",(0,s.kt)("inlineCode",{parentName:"p"},"Users")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"Common")," modules:"),(0,s.kt)("h4",{id:"server-step-133-use-graphql-modules-2"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/649de12c95f6472da5edf6355a50a7590e3c94f1"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 13.3: Use GraphQL Modules")),(0,s.kt)("h5",{id:"changed-moduleschatsindexts"},"Changed modules","/","chats","/","index.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,9 +1,12 @@\n+\u250a  \u250a 1\u250aimport { GraphQLModule } from '@graphql-modules/core';\n \u250a 1\u250a 2\u250aimport { gql, withFilter } from 'apollo-server-express';\n \u250a 2\u250a 3\u250aimport sql from 'sql-template-strings';\n+\u250a  \u250a 4\u250aimport commonModule from '../common';\n+\u250a  \u250a 5\u250aimport usersModule from '../users';\n \u250a 3\u250a 6\u250aimport { Message, Chat, pool } from '../../db';\n \u250a 4\u250a 7\u250aimport { Resolvers } from '../../types/graphql';\n \u250a 5\u250a 8\u250a\n-\u250a 6\u250a  \u250aexport const typeDefs = gql`\n+\u250a  \u250a 9\u250aconst typeDefs = gql`\n \u250a 7\u250a10\u250a  type Message {\n \u250a 8\u250a11\u250a    id: ID!\n \u250a 9\u250a12\u250a    content: String!\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -41,7 +44,7 @@\n \u250a41\u250a44\u250a  }\n \u250a42\u250a45\u250a`;\n \u250a43\u250a46\u250a\n-\u250a44\u250a  \u250aexport const resolvers: Resolvers = {\n+\u250a  \u250a47\u250aconst resolvers: Resolvers = {\n \u250a45\u250a48\u250a  Message: {\n \u250a46\u250a49\u250a    createdAt(message) {\n \u250a47\u250a50\u250a      return new Date(message.created_at);\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -323,3 +326,10 @@\n \u250a323\u250a326\u250a    },\n \u250a324\u250a327\u250a  },\n \u250a325\u250a328\u250a};\n+\u250a   \u250a329\u250a\n+\u250a   \u250a330\u250aexport default new GraphQLModule({\n+\u250a   \u250a331\u250a  name: 'chats',\n+\u250a   \u250a332\u250a  typeDefs,\n+\u250a   \u250a333\u250a  resolvers,\n+\u250a   \u250a334\u250a  imports: () => [commonModule, usersModule],\n+\u250a   \u250a335\u250a});\n")),(0,s.kt)("p",null,"Since every module is now a GraphQL Module, we can take care of how to use them in the ApolloServer."),(0,s.kt)("p",null,"To make things easier, we're going to create a module that's called ",(0,s.kt)("inlineCode",{parentName:"p"},"Root")," and represents our API."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"export const rootModule = new GraphQLModule({\n  name: 'root',\n  imports: [usersModule, chatsModule],\n});\n")),(0,s.kt)("p",null,"We want to pass ",(0,s.kt)("inlineCode",{parentName:"p"},"schema")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"context")," to ApolloServer:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"const server = new ApolloServer({\n  schema: rootModule.schema,\n  context: rootModule.context,\n  // ...\n")),(0,s.kt)("p",null,"Now with all that knowledge, take a look at all changes at once:"),(0,s.kt)("h4",{id:"server-step-133-use-graphql-modules-3"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/649de12c95f6472da5edf6355a50a7590e3c94f1"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 13.3: Use GraphQL Modules")),(0,s.kt)("h5",{id:"changed-indexts-1"},"Changed index.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,71 +1,23 @@\n \u250a 1\u250a 1\u250aimport { ApolloServer } from 'apollo-server-express';\n-\u250a 2\u250a  \u250aimport cookie from 'cookie';\n+\u250a  \u250a 2\u250aimport { GraphQLModule } from '@graphql-modules/core';\n \u250a 3\u250a 3\u250aimport http from 'http';\n-\u250a 4\u250a  \u250aimport jwt from 'jsonwebtoken';\n \u250a 5\u250a 4\u250aimport { app } from './app';\n-\u250a 6\u250a  \u250aimport { pool } from './db';\n-\u250a 7\u250a  \u250aimport { origin, port, secret } from './env';\n+\u250a  \u250a 5\u250aimport { origin, port } from './env';\n \u250a 8\u250a 6\u250aimport { MyContext } from './context';\n-\u250a 9\u250a  \u250aimport sql from 'sql-template-strings';\n \u250a10\u250a 7\u250aimport { UnsplashApi } from './schema/unsplash.api';\n-\u250a11\u250a  \u250aconst { PostgresPubSub } = require('graphql-postgres-subscriptions');\n \u250a12\u250a 8\u250a\n-\u250a13\u250a  \u250aimport * as commonModule from './modules/common';\n-\u250a14\u250a  \u250aimport * as usersModule from './modules/users';\n-\u250a15\u250a  \u250aimport * as chatsModule from './modules/chats';\n+\u250a  \u250a 9\u250aimport usersModule from './modules/users';\n+\u250a  \u250a10\u250aimport chatsModule from './modules/chats';\n \u250a16\u250a11\u250a\n-\u250a17\u250a  \u250aconst pubsub = new PostgresPubSub({\n-\u250a18\u250a  \u250a  host: 'localhost',\n-\u250a19\u250a  \u250a  port: process.env.DB_PORT ? parseInt(process.env.DB_PORT) : 5432,\n-\u250a20\u250a  \u250a  user: 'testuser',\n-\u250a21\u250a  \u250a  password: 'testpassword',\n-\u250a22\u250a  \u250a  database: 'whatsapp',\n+\u250a  \u250a12\u250aexport const rootModule = new GraphQLModule({\n+\u250a  \u250a13\u250a  name: 'root',\n+\u250a  \u250a14\u250a  imports: [usersModule, chatsModule],\n \u250a23\u250a15\u250a});\n-\u250a24\u250a  \u250aconst server = new ApolloServer({\n-\u250a25\u250a  \u250a  modules: [commonModule, usersModule, chatsModule],\n-\u250a26\u250a  \u250a  context: async (session: any) => {\n-\u250a27\u250a  \u250a    // Access the request object\n-\u250a28\u250a  \u250a    let req = session.connection\n-\u250a29\u250a  \u250a      ? session.connection.context.request\n-\u250a30\u250a  \u250a      : session.req;\n-\u250a31\u250a  \u250a\n-\u250a32\u250a  \u250a    // It's subscription\n-\u250a33\u250a  \u250a    if (session.connection) {\n-\u250a34\u250a  \u250a      req.cookies = cookie.parse(req.headers.cookie || '');\n-\u250a35\u250a  \u250a    }\n-\u250a36\u250a  \u250a\n-\u250a37\u250a  \u250a    let currentUser;\n-\u250a38\u250a  \u250a    if (req.cookies.authToken) {\n-\u250a39\u250a  \u250a      const username = jwt.verify(req.cookies.authToken, secret) as string;\n-\u250a40\u250a  \u250a      if (username) {\n-\u250a41\u250a  \u250a        const { rows } = await pool.query(\n-\u250a42\u250a  \u250a          sql`SELECT * FROM users WHERE username = ${username}`\n-\u250a43\u250a  \u250a        );\n-\u250a44\u250a  \u250a        currentUser = rows[0];\n-\u250a45\u250a  \u250a      }\n-\u250a46\u250a  \u250a    }\n-\u250a47\u250a  \u250a\n-\u250a48\u250a  \u250a    let db;\n \u250a49\u250a16\u250a\n-\u250a50\u250a  \u250a    if (!session.connection) {\n-\u250a51\u250a  \u250a      db = await pool.connect();\n-\u250a52\u250a  \u250a    }\n-\u250a53\u250a  \u250a\n-\u250a54\u250a  \u250a    return {\n-\u250a55\u250a  \u250a      currentUser,\n-\u250a56\u250a  \u250a      pubsub,\n-\u250a57\u250a  \u250a      db,\n-\u250a58\u250a  \u250a      res: session.res,\n-\u250a59\u250a  \u250a    };\n-\u250a60\u250a  \u250a  },\n-\u250a61\u250a  \u250a  subscriptions: {\n-\u250a62\u250a  \u250a    onConnect(params, ws, ctx) {\n-\u250a63\u250a  \u250a      // pass the request object to context\n-\u250a64\u250a  \u250a      return {\n-\u250a65\u250a  \u250a        request: ctx.request,\n-\u250a66\u250a  \u250a      };\n-\u250a67\u250a  \u250a    },\n-\u250a68\u250a  \u250a  },\n+\u250a  \u250a17\u250aconst server = new ApolloServer({\n+\u250a  \u250a18\u250a  schema: rootModule.schema,\n+\u250a  \u250a19\u250a  context: rootModule.context,\n+\u250a  \u250a20\u250a  subscriptions: rootModule.subscriptions,\n \u250a69\u250a21\u250a  formatResponse: (res: any, { context }: any) => {\n \u250a70\u250a22\u250a    context.db.release();\n \u250a71\u250a23\u250a\n")),(0,s.kt)("h5",{id:"changed-moduleschatsindexts-1"},"Changed modules","/","chats","/","index.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,9 +1,12 @@\n+\u250a  \u250a 1\u250aimport { GraphQLModule } from '@graphql-modules/core';\n \u250a 1\u250a 2\u250aimport { gql, withFilter } from 'apollo-server-express';\n \u250a 2\u250a 3\u250aimport sql from 'sql-template-strings';\n+\u250a  \u250a 4\u250aimport commonModule from '../common';\n+\u250a  \u250a 5\u250aimport usersModule from '../users';\n \u250a 3\u250a 6\u250aimport { Message, Chat, pool } from '../../db';\n \u250a 4\u250a 7\u250aimport { Resolvers } from '../../types/graphql';\n \u250a 5\u250a 8\u250a\n-\u250a 6\u250a  \u250aexport const typeDefs = gql`\n+\u250a  \u250a 9\u250aconst typeDefs = gql`\n \u250a 7\u250a10\u250a  type Message {\n \u250a 8\u250a11\u250a    id: ID!\n \u250a 9\u250a12\u250a    content: String!\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -41,7 +44,7 @@\n \u250a41\u250a44\u250a  }\n \u250a42\u250a45\u250a`;\n \u250a43\u250a46\u250a\n-\u250a44\u250a  \u250aexport const resolvers: Resolvers = {\n+\u250a  \u250a47\u250aconst resolvers: Resolvers = {\n \u250a45\u250a48\u250a  Message: {\n \u250a46\u250a49\u250a    createdAt(message) {\n \u250a47\u250a50\u250a      return new Date(message.created_at);\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -323,3 +326,10 @@\n \u250a323\u250a326\u250a    },\n \u250a324\u250a327\u250a  },\n \u250a325\u250a328\u250a};\n+\u250a   \u250a329\u250a\n+\u250a   \u250a330\u250aexport default new GraphQLModule({\n+\u250a   \u250a331\u250a  name: 'chats',\n+\u250a   \u250a332\u250a  typeDefs,\n+\u250a   \u250a333\u250a  resolvers,\n+\u250a   \u250a334\u250a  imports: () => [commonModule, usersModule],\n+\u250a   \u250a335\u250a});\n")),(0,s.kt)("h5",{id:"changed-modulescommonindexts-1"},"Changed modules","/","common","/","index.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,8 +1,12 @@\n+\u250a  \u250a 1\u250aimport { GraphQLModule } from '@graphql-modules/core';\n \u250a 1\u250a 2\u250aimport { gql } from 'apollo-server-express';\n \u250a 2\u250a 3\u250aimport { DateTimeResolver, URLResolver } from 'graphql-scalars';\n+\u250a  \u250a 4\u250aimport { pool } from '../../db';\n \u250a 3\u250a 5\u250aimport { Resolvers } from '../../types/graphql';\n \u250a 4\u250a 6\u250a\n-\u250a 5\u250a  \u250aexport const typeDefs = gql`\n+\u250a  \u250a 7\u250aconst { PostgresPubSub } = require('graphql-postgres-subscriptions');\n+\u250a  \u250a 8\u250a\n+\u250a  \u250a 9\u250aconst typeDefs = gql`\n \u250a 6\u250a10\u250a  scalar Date\n \u250a 7\u250a11\u250a  scalar URL\n \u250a 8\u250a12\u250a\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -19,7 +23,34 @@\n \u250a19\u250a23\u250a  }\n \u250a20\u250a24\u250a`;\n \u250a21\u250a25\u250a\n-\u250a22\u250a  \u250aexport const resolvers: Resolvers = {\n+\u250a  \u250a26\u250aconst resolvers: Resolvers = {\n \u250a23\u250a27\u250a  Date: DateTimeResolver,\n \u250a24\u250a28\u250a  URL: URLResolver,\n \u250a25\u250a29\u250a};\n+\u250a  \u250a30\u250a\n+\u250a  \u250a31\u250aconst pubsub = new PostgresPubSub({\n+\u250a  \u250a32\u250a  host: 'localhost',\n+\u250a  \u250a33\u250a  port: process.env.DB_PORT ? parseInt(process.env.DB_PORT) : 5432,\n+\u250a  \u250a34\u250a  user: 'testuser',\n+\u250a  \u250a35\u250a  password: 'testpassword',\n+\u250a  \u250a36\u250a  database: 'whatsapp',\n+\u250a  \u250a37\u250a});\n+\u250a  \u250a38\u250a\n+\u250a  \u250a39\u250aexport default new GraphQLModule({\n+\u250a  \u250a40\u250a  name: 'common',\n+\u250a  \u250a41\u250a  typeDefs,\n+\u250a  \u250a42\u250a  resolvers,\n+\u250a  \u250a43\u250a  async context({ res, connection }) {\n+\u250a  \u250a44\u250a    let db;\n+\u250a  \u250a45\u250a\n+\u250a  \u250a46\u250a    if (!connection) {\n+\u250a  \u250a47\u250a      db = await pool.connect();\n+\u250a  \u250a48\u250a    }\n+\u250a  \u250a49\u250a\n+\u250a  \u250a50\u250a    return {\n+\u250a  \u250a51\u250a      pubsub,\n+\u250a  \u250a52\u250a      res,\n+\u250a  \u250a53\u250a      db,\n+\u250a  \u250a54\u250a    };\n+\u250a  \u250a55\u250a  },\n+\u250a  \u250a56\u250a});\n")),(0,s.kt)("h5",{id:"changed-modulesusersindexts-1"},"Changed modules","/","users","/","index.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,12 +1,16 @@\n+\u250a  \u250a 1\u250aimport { GraphQLModule } from '@graphql-modules/core';\n \u250a 1\u250a 2\u250aimport { gql } from 'apollo-server-express';\n+\u250a  \u250a 3\u250aimport cookie from 'cookie';\n \u250a 2\u250a 4\u250aimport sql from 'sql-template-strings';\n \u250a 3\u250a 5\u250aimport bcrypt from 'bcrypt';\n \u250a 4\u250a 6\u250aimport jwt from 'jsonwebtoken';\n+\u250a  \u250a 7\u250aimport commonModule from '../common';\n \u250a 5\u250a 8\u250aimport { secret, expiration } from '../../env';\n+\u250a  \u250a 9\u250aimport { pool } from '../../db';\n \u250a 6\u250a10\u250aimport { validateLength, validatePassword } from '../../validators';\n \u250a 7\u250a11\u250aimport { Resolvers } from '../../types/graphql';\n \u250a 8\u250a12\u250a\n-\u250a 9\u250a  \u250aexport const typeDefs = gql`\n+\u250a  \u250a13\u250aconst typeDefs = gql`\n \u250a10\u250a14\u250a  type User {\n \u250a11\u250a15\u250a    id: ID!\n \u250a12\u250a16\u250a    name: String!\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -29,7 +33,7 @@\n \u250a29\u250a33\u250a  }\n \u250a30\u250a34\u250a`;\n \u250a31\u250a35\u250a\n-\u250a32\u250a  \u250aexport const resolvers: Resolvers = {\n+\u250a  \u250a36\u250aconst resolvers: Resolvers = {\n \u250a33\u250a37\u250a  Query: {\n \u250a34\u250a38\u250a    me(root, args, { currentUser }) {\n \u250a35\u250a39\u250a      return currentUser || null;\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -98,3 +102,38 @@\n \u250a 98\u250a102\u250a    },\n \u250a 99\u250a103\u250a  },\n \u250a100\u250a104\u250a};\n+\u250a   \u250a105\u250a\n+\u250a   \u250a106\u250aexport default new GraphQLModule({\n+\u250a   \u250a107\u250a  name: 'users',\n+\u250a   \u250a108\u250a  typeDefs,\n+\u250a   \u250a109\u250a  resolvers,\n+\u250a   \u250a110\u250a  imports: () => [commonModule],\n+\u250a   \u250a111\u250a  async context(session) {\n+\u250a   \u250a112\u250a    let currentUser;\n+\u250a   \u250a113\u250a\n+\u250a   \u250a114\u250a    // Access the request object\n+\u250a   \u250a115\u250a    let req = session.connection\n+\u250a   \u250a116\u250a      ? session.connection.context.request\n+\u250a   \u250a117\u250a      : session.req;\n+\u250a   \u250a118\u250a\n+\u250a   \u250a119\u250a    // It's subscription\n+\u250a   \u250a120\u250a    if (session.connection) {\n+\u250a   \u250a121\u250a      req.cookies = cookie.parse(req.headers.cookie || '');\n+\u250a   \u250a122\u250a    }\n+\u250a   \u250a123\u250a\n+\u250a   \u250a124\u250a    if (req.cookies.authToken) {\n+\u250a   \u250a125\u250a      const username = jwt.verify(req.cookies.authToken, secret) as string;\n+\u250a   \u250a126\u250a\n+\u250a   \u250a127\u250a      if (username) {\n+\u250a   \u250a128\u250a        const { rows } = await pool.query(\n+\u250a   \u250a129\u250a          sql`SELECT * FROM users WHERE username = ${username}`\n+\u250a   \u250a130\u250a        );\n+\u250a   \u250a131\u250a        currentUser = rows[0];\n+\u250a   \u250a132\u250a      }\n+\u250a   \u250a133\u250a    }\n+\u250a   \u250a134\u250a\n+\u250a   \u250a135\u250a    return {\n+\u250a   \u250a136\u250a      currentUser,\n+\u250a   \u250a137\u250a    };\n+\u250a   \u250a138\u250a  },\n+\u250a   \u250a139\u250a});\n")),(0,s.kt)("h4",{id:"migrate-unsplash-api-to-chats"},"Migrate Unsplash API to Chats"),(0,s.kt)("p",null,"We still make use of global context which won't work with GraphQL Modules. To be more specific, it's not the context definition itself but the thing that's being added by ApolloServer, Data Sources."),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"RESTDataSource")," is of course more than a class but in case of Unsplash API we won't loose any important features except the HTTP client. We're going to use ",(0,s.kt)("inlineCode",{parentName:"p"},"axios")," instead:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"yarn add axios\n")),(0,s.kt)("p",null,"We've got everything now so let's migrate UnsplashAPI class and move it from ",(0,s.kt)("inlineCode",{parentName:"p"},"schema/unsplash.api.ts")," under ",(0,s.kt)("inlineCode",{parentName:"p"},"modules/chats"),"!"),(0,s.kt)("h4",{id:"server-step-134-migrate-restdatasource"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/4092869850846ef7df513433d9821eb7b9e961c7"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 13.4: Migrate RESTDataSource")),(0,s.kt)("h5",{id:"changed-schemaunsplashapits"},"Changed schema","/","unsplash.api.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,30 +1,33 @@\n-\u250a 1\u250a  \u250aimport { RESTDataSource, RequestOptions } from 'apollo-datasource-rest';\n \u250a 2\u250a 1\u250aimport { resolve } from 'path';\n+\u250a  \u250a 2\u250aimport axios from 'axios';\n \u250a 3\u250a 3\u250aimport { trackProvider } from '@safe-api/middleware';\n-\u250a 4\u250a  \u250aimport { RandomPhoto } from '../types/unsplash';\n+\u250a  \u250a 4\u250aimport { RandomPhoto } from '../../types/unsplash';\n \u250a 5\u250a 5\u250a\n \u250a 6\u250a 6\u250ainterface RandomPhotoInput {\n \u250a 7\u250a 7\u250a  query: string;\n \u250a 8\u250a 8\u250a  orientation: 'landscape' | 'portrait' | 'squarish';\n \u250a 9\u250a 9\u250a}\n \u250a10\u250a10\u250a\n-\u250a11\u250a  \u250aexport class UnsplashApi extends RESTDataSource {\n-\u250a12\u250a  \u250a  constructor() {\n-\u250a13\u250a  \u250a    super();\n-\u250a14\u250a  \u250a    this.baseURL = 'https://api.unsplash.com/';\n-\u250a15\u250a  \u250a  }\n-\u250a16\u250a  \u250a\n-\u250a17\u250a  \u250a  willSendRequest(request: RequestOptions) {\n-\u250a18\u250a  \u250a    request.headers.set(\n-\u250a19\u250a  \u250a      'Authorization',\n-\u250a20\u250a  \u250a      'Client-ID 4d048cfb4383b407eff92e4a2a5ec36c0a866be85e64caafa588c110efad350d'\n-\u250a21\u250a  \u250a    );\n-\u250a22\u250a  \u250a  }\n+\u250a  \u250a11\u250aexport class UnsplashApi {\n+\u250a  \u250a12\u250a  baseURL = 'https://api.unsplash.com/';\n \u250a23\u250a13\u250a\n \u250a24\u250a14\u250a  async getRandomPhoto() {\n \u250a25\u250a15\u250a    const trackedRandomPhoto = await trackProvider(\n-\u250a26\u250a  \u250a      ({ query, orientation }: RandomPhotoInput) =>\n-\u250a27\u250a  \u250a        this.get<RandomPhoto>('photos/random', { query, orientation }),\n+\u250a  \u250a16\u250a      async ({ query, orientation }: RandomPhotoInput) => {\n+\u250a  \u250a17\u250a        const response = await axios.get<RandomPhoto>('photos/random', {\n+\u250a  \u250a18\u250a          baseURL: this.baseURL,\n+\u250a  \u250a19\u250a          headers: {\n+\u250a  \u250a20\u250a            Authorization:\n+\u250a  \u250a21\u250a              'Client-ID 4d048cfb4383b407eff92e4a2a5ec36c0a866be85e64caafa588c110efad350d',\n+\u250a  \u250a22\u250a          },\n+\u250a  \u250a23\u250a          params: {\n+\u250a  \u250a24\u250a            query,\n+\u250a  \u250a25\u250a            orientation,\n+\u250a  \u250a26\u250a          },\n+\u250a  \u250a27\u250a        });\n+\u250a  \u250a28\u250a\n+\u250a  \u250a29\u250a        return response.data;\n+\u250a  \u250a30\u250a      },\n \u250a28\u250a31\u250a      {\n \u250a29\u250a32\u250a        provider: 'Unsplash',\n \u250a30\u250a33\u250a        method: 'RandomPhoto',\n")),(0,s.kt)("p",null,"There is no big differences between now and what we had before, the only thing that's changed is the way we make http requests."),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"UnsplashAPI")," can be now removed from ",(0,s.kt)("inlineCode",{parentName:"p"},"dataSources")," and moved under Chats module's context:"),(0,s.kt)("h4",{id:"server-step-134-migrate-restdatasource-1"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/4092869850846ef7df513433d9821eb7b9e961c7"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 13.4: Migrate RESTDataSource")),(0,s.kt)("h5",{id:"changed-indexts-2"},"Changed index.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -4,7 +4,6 @@\n \u250a 4\u250a 4\u250aimport { app } from './app';\n \u250a 5\u250a 5\u250aimport { origin, port } from './env';\n \u250a 6\u250a 6\u250aimport { MyContext } from './context';\n-\u250a 7\u250a  \u250aimport { UnsplashApi } from './schema/unsplash.api';\n \u250a 8\u250a 7\u250a\n \u250a 9\u250a 8\u250aimport usersModule from './modules/users';\n \u250a10\u250a 9\u250aimport chatsModule from './modules/chats';\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -23,9 +22,6 @@\n \u250a23\u250a22\u250a\n \u250a24\u250a23\u250a    return res;\n \u250a25\u250a24\u250a  },\n-\u250a26\u250a  \u250a  dataSources: () => ({\n-\u250a27\u250a  \u250a    unsplashApi: new UnsplashApi(),\n-\u250a28\u250a  \u250a  }),\n \u250a29\u250a25\u250a});\n \u250a30\u250a26\u250a\n \u250a31\u250a27\u250aserver.applyMiddleware({\n")),(0,s.kt)("h5",{id:"changed-moduleschatsindexts-2"},"Changed modules","/","chats","/","index.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -5,6 +5,7 @@\n \u250a 5\u250a 5\u250aimport usersModule from '../users';\n \u250a 6\u250a 6\u250aimport { Message, Chat, pool } from '../../db';\n \u250a 7\u250a 7\u250aimport { Resolvers } from '../../types/graphql';\n+\u250a  \u250a 8\u250aimport { UnsplashApi } from './unsplash.api';\n \u250a 8\u250a 9\u250a\n \u250a 9\u250a10\u250aconst typeDefs = gql`\n \u250a10\u250a11\u250a  type Message {\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -93,7 +94,7 @@\n \u250a 93\u250a 94\u250a      return participant ? participant.name : null;\n \u250a 94\u250a 95\u250a    },\n \u250a 95\u250a 96\u250a\n-\u250a 96\u250a   \u250a    async picture(chat, args, { currentUser, db, dataSources }) {\n+\u250a   \u250a 97\u250a    async picture(chat, args, { currentUser, db, unsplashApi }) {\n \u250a 97\u250a 98\u250a      if (!currentUser) return null;\n \u250a 98\u250a 99\u250a\n \u250a 99\u250a100\u250a      const { rows } = await db.query(sql`\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -106,7 +107,7 @@\n \u250a106\u250a107\u250a\n \u250a107\u250a108\u250a      return participant && participant.picture\n \u250a108\u250a109\u250a        ? participant.picture\n-\u250a109\u250a   \u250a        : dataSources.unsplashApi.getRandomPhoto();\n+\u250a   \u250a110\u250a        : unsplashApi.getRandomPhoto();\n \u250a110\u250a111\u250a    },\n \u250a111\u250a112\u250a\n \u250a112\u250a113\u250a    async messages(chat, args, { db }) {\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -332,4 +333,9 @@\n \u250a332\u250a333\u250a  typeDefs,\n \u250a333\u250a334\u250a  resolvers,\n \u250a334\u250a335\u250a  imports: () => [commonModule, usersModule],\n+\u250a   \u250a336\u250a  context() {\n+\u250a   \u250a337\u250a    return {\n+\u250a   \u250a338\u250a      unsplashApi: new UnsplashApi(),\n+\u250a   \u250a339\u250a    };\n+\u250a   \u250a340\u250a  },\n \u250a335\u250a341\u250a});\n")),(0,s.kt)("h4",{id:"server-step-134-migrate-restdatasource-2"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/4092869850846ef7df513433d9821eb7b9e961c7"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 13.4: Migrate RESTDataSource")),(0,s.kt)("h5",{id:"changed-contextts"},"Changed context.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -2,14 +2,12 @@\n \u250a 2\u250a 2\u250aimport { User } from './db';\n \u250a 3\u250a 3\u250aimport { Response } from 'express';\n \u250a 4\u250a 4\u250aimport { PoolClient } from 'pg';\n-\u250a 5\u250a  \u250aimport { UnsplashApi } from './schema/unsplash.api';\n+\u250a  \u250a 5\u250aimport { UnsplashApi } from './modules/chats/unsplash.api';\n \u250a 6\u250a 6\u250a\n \u250a 7\u250a 7\u250aexport type MyContext = {\n \u250a 8\u250a 8\u250a  pubsub: PubSub;\n \u250a 9\u250a 9\u250a  currentUser: User;\n \u250a10\u250a10\u250a  res: Response;\n \u250a11\u250a11\u250a  db: PoolClient;\n-\u250a12\u250a  \u250a  dataSources: {\n-\u250a13\u250a  \u250a    unsplashApi: UnsplashApi;\n-\u250a14\u250a  \u250a  };\n+\u250a  \u250a12\u250a  unsplashApi: UnsplashApi;\n \u250a15\u250a13\u250a};\n")),(0,s.kt)("h4",{id:"server-step-134-migrate-restdatasource-3"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/4092869850846ef7df513433d9821eb7b9e961c7"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 13.4: Migrate RESTDataSource")),(0,s.kt)("h5",{id:"changed-moduleschatsindexts-3"},"Changed modules","/","chats","/","index.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -5,6 +5,7 @@\n \u250a 5\u250a 5\u250aimport usersModule from '../users';\n \u250a 6\u250a 6\u250aimport { Message, Chat, pool } from '../../db';\n \u250a 7\u250a 7\u250aimport { Resolvers } from '../../types/graphql';\n+\u250a  \u250a 8\u250aimport { UnsplashApi } from './unsplash.api';\n \u250a 8\u250a 9\u250a\n \u250a 9\u250a10\u250aconst typeDefs = gql`\n \u250a10\u250a11\u250a  type Message {\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -93,7 +94,7 @@\n \u250a 93\u250a 94\u250a      return participant ? participant.name : null;\n \u250a 94\u250a 95\u250a    },\n \u250a 95\u250a 96\u250a\n-\u250a 96\u250a   \u250a    async picture(chat, args, { currentUser, db, dataSources }) {\n+\u250a   \u250a 97\u250a    async picture(chat, args, { currentUser, db, unsplashApi }) {\n \u250a 97\u250a 98\u250a      if (!currentUser) return null;\n \u250a 98\u250a 99\u250a\n \u250a 99\u250a100\u250a      const { rows } = await db.query(sql`\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -106,7 +107,7 @@\n \u250a106\u250a107\u250a\n \u250a107\u250a108\u250a      return participant && participant.picture\n \u250a108\u250a109\u250a        ? participant.picture\n-\u250a109\u250a   \u250a        : dataSources.unsplashApi.getRandomPhoto();\n+\u250a   \u250a110\u250a        : unsplashApi.getRandomPhoto();\n \u250a110\u250a111\u250a    },\n \u250a111\u250a112\u250a\n \u250a112\u250a113\u250a    async messages(chat, args, { db }) {\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -332,4 +333,9 @@\n \u250a332\u250a333\u250a  typeDefs,\n \u250a333\u250a334\u250a  resolvers,\n \u250a334\u250a335\u250a  imports: () => [commonModule, usersModule],\n+\u250a   \u250a336\u250a  context() {\n+\u250a   \u250a337\u250a    return {\n+\u250a   \u250a338\u250a      unsplashApi: new UnsplashApi(),\n+\u250a   \u250a339\u250a    };\n+\u250a   \u250a340\u250a  },\n \u250a335\u250a341\u250a});\n")),(0,s.kt)("h4",{id:"dependency-injection-in-graphql-modules"},"Dependency Injection in GraphQL Modules"),(0,s.kt)("p",null,"The major feature of GraphQL Modules is the Dependency Injection. It's optional, you don't have to use it until it's really necessary. Even though WhatsApp clone doesn't need it yet, we're going to talk about DI and implement a simple thing, just for educational purpose."),(0,s.kt)("p",null,"If you're familiar with Dependency Injection then you will get it straight away. If not, please read about it here or here (",(0,s.kt)("strong",{parentName:"p"},"links"),")."),(0,s.kt)("p",null,"To start working with DI, we we need to install two packages:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"yarn add @graphql-modules/di reflect-metadata\n")),(0,s.kt)("p",null,"Let's now adjust the context type and import ",(0,s.kt)("inlineCode",{parentName:"p"},"reflect-metadata")," into the project:"),(0,s.kt)("h4",{id:"server-step-135-use-dependency-injection"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/0df0f93ac430bccaf5f5a6094f39ad521d4109d9"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 13.5: Use Dependency Injection")),(0,s.kt)("h5",{id:"changed-contextts-1"},"Changed context.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,13 +1,12 @@\n \u250a 1\u250a 1\u250aimport { PubSub } from 'apollo-server-express';\n+\u250a  \u250a 2\u250aimport { ModuleContext } from '@graphql-modules/core';\n \u250a 2\u250a 3\u250aimport { User } from './db';\n \u250a 3\u250a 4\u250aimport { Response } from 'express';\n \u250a 4\u250a 5\u250aimport { PoolClient } from 'pg';\n-\u250a 5\u250a  \u250aimport { UnsplashApi } from './modules/chats/unsplash.api';\n \u250a 6\u250a 6\u250a\n \u250a 7\u250a 7\u250aexport type MyContext = {\n \u250a 8\u250a 8\u250a  pubsub: PubSub;\n \u250a 9\u250a 9\u250a  currentUser: User;\n \u250a10\u250a10\u250a  res: Response;\n \u250a11\u250a11\u250a  db: PoolClient;\n-\u250a12\u250a  \u250a  unsplashApi: UnsplashApi;\n-\u250a13\u250a  \u250a};\n+\u250a  \u250a12\u250a} & ModuleContext;\n")),(0,s.kt)("h4",{id:"server-step-135-use-dependency-injection-1"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/0df0f93ac430bccaf5f5a6094f39ad521d4109d9"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 13.5: Use Dependency Injection")),(0,s.kt)("h5",{id:"changed-indexts-3"},"Changed index.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,3 +1,4 @@\n+\u250a \u250a1\u250aimport 'reflect-metadata';\n \u250a1\u250a2\u250aimport { ApolloServer } from 'apollo-server-express';\n \u250a2\u250a3\u250aimport { GraphQLModule } from '@graphql-modules/core';\n \u250a3\u250a4\u250aimport http from 'http';\n")),(0,s.kt)("h5",{id:"changed-moduleschatsindexts-4"},"Changed modules","/","chats","/","index.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -11,7 +11,7 @@\n \u250a11\u250a11\u250a  type Message {\n \u250a12\u250a12\u250a    id: ID!\n \u250a13\u250a13\u250a    content: String!\n-\u250a14\u250a  \u250a    createdAt: Date!\n+\u250a  \u250a14\u250a    createdAt: DateTime!\n \u250a15\u250a15\u250a    chat: Chat\n \u250a16\u250a16\u250a    sender: User\n \u250a17\u250a17\u250a    recipient: User\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -94,7 +94,7 @@\n \u250a 94\u250a 94\u250a      return participant ? participant.name : null;\n \u250a 95\u250a 95\u250a    },\n \u250a 96\u250a 96\u250a\n-\u250a 97\u250a   \u250a    async picture(chat, args, { currentUser, db, unsplashApi }) {\n+\u250a   \u250a 97\u250a    async picture(chat, args, { currentUser, db, injector }) {\n \u250a 98\u250a 98\u250a      if (!currentUser) return null;\n \u250a 99\u250a 99\u250a\n \u250a100\u250a100\u250a      const { rows } = await db.query(sql`\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -107,7 +107,7 @@\n \u250a107\u250a107\u250a\n \u250a108\u250a108\u250a      return participant && participant.picture\n \u250a109\u250a109\u250a        ? participant.picture\n-\u250a110\u250a   \u250a        : unsplashApi.getRandomPhoto();\n+\u250a   \u250a110\u250a        : injector.get(UnsplashApi).getRandomPhoto();\n \u250a111\u250a111\u250a    },\n \u250a112\u250a112\u250a\n \u250a113\u250a113\u250a    async messages(chat, args, { db }) {\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -333,9 +333,5 @@\n \u250a333\u250a333\u250a  typeDefs,\n \u250a334\u250a334\u250a  resolvers,\n \u250a335\u250a335\u250a  imports: () => [commonModule, usersModule],\n-\u250a336\u250a   \u250a  context() {\n-\u250a337\u250a   \u250a    return {\n-\u250a338\u250a   \u250a      unsplashApi: new UnsplashApi(),\n-\u250a339\u250a   \u250a    };\n-\u250a340\u250a   \u250a  },\n+\u250a   \u250a336\u250a  providers: () => [UnsplashApi],\n \u250a341\u250a337\u250a});\n")),(0,s.kt)("h5",{id:"changed-modulescommonindexts-2"},"Changed modules","/","common","/","index.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -7,7 +7,7 @@\n \u250a 7\u250a 7\u250aconst { PostgresPubSub } = require('graphql-postgres-subscriptions');\n \u250a 8\u250a 8\u250a\n \u250a 9\u250a 9\u250aconst typeDefs = gql`\n-\u250a10\u250a  \u250a  scalar Date\n+\u250a  \u250a10\u250a  scalar DateTime\n \u250a11\u250a11\u250a  scalar URL\n \u250a12\u250a12\u250a\n \u250a13\u250a13\u250a  type Query {\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -24,7 +24,7 @@\n \u250a24\u250a24\u250a`;\n \u250a25\u250a25\u250a\n \u250a26\u250a26\u250aconst resolvers: Resolvers = {\n-\u250a27\u250a  \u250a  Date: DateTimeResolver,\n+\u250a  \u250a27\u250a  DateTime: DateTimeResolver,\n \u250a28\u250a28\u250a  URL: URLResolver,\n \u250a29\u250a29\u250a};\n \u250a30\u250a30\u250a\n")),(0,s.kt)("p",null,"In short, Iependency Injection will instantiate classes, manage dependencies between them and so on and in addition to that, the GraphQL Modules allows to define when each provider / class should be created. We call it scopes."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Application scope - provider is created when application starts (default)"),(0,s.kt)("li",{parentName:"ul"},"Session - providers are constructed in the beginning of the network request, then kept until the network request is closed"),(0,s.kt)("li",{parentName:"ul"},"Request - creates an instance each time you request it from the injector")),(0,s.kt)("p",null,"Because our ",(0,s.kt)("inlineCode",{parentName:"p"},"UnsplashApi")," doesn't have to be recreated on every request, we can easily use Application scope, which is the default. The ",(0,s.kt)("inlineCode",{parentName:"p"},"Injectable")," decorator is just to attach some metadata to the class."),(0,s.kt)("h4",{id:"server-step-135-use-dependency-injection-2"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/0df0f93ac430bccaf5f5a6094f39ad521d4109d9"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 13.5: Use Dependency Injection")),(0,s.kt)("h5",{id:"changed-moduleschatsunsplashapits"},"Changed modules","/","chats","/","unsplash.api.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,3 +1,4 @@\n+\u250a \u250a1\u250aimport { Injectable, ProviderScope } from '@graphql-modules/di';\n \u250a1\u250a2\u250aimport { resolve } from 'path';\n \u250a2\u250a3\u250aimport axios from 'axios';\n \u250a3\u250a4\u250aimport { trackProvider } from '@safe-api/middleware';\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -8,6 +9,9 @@\n \u250a 8\u250a 9\u250a  orientation: 'landscape' | 'portrait' | 'squarish';\n \u250a 9\u250a10\u250a}\n \u250a10\u250a11\u250a\n+\u250a  \u250a12\u250a@Injectable({\n+\u250a  \u250a13\u250a  scope: ProviderScope.Application,\n+\u250a  \u250a14\u250a})\n \u250a11\u250a15\u250aexport class UnsplashApi {\n \u250a12\u250a16\u250a  baseURL = 'https://api.unsplash.com/';\n \u250a13\u250a17\u250a\n")),(0,s.kt)("p",null,"Here's how to register the UnsplashApi provider in Chats module:"),(0,s.kt)("h4",{id:"server-step-135-use-dependency-injection-3"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/0df0f93ac430bccaf5f5a6094f39ad521d4109d9"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 13.5: Use Dependency Injection")),(0,s.kt)("h5",{id:"changed-moduleschatsindexts-5"},"Changed modules","/","chats","/","index.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -11,7 +11,7 @@\n \u250a11\u250a11\u250a  type Message {\n \u250a12\u250a12\u250a    id: ID!\n \u250a13\u250a13\u250a    content: String!\n-\u250a14\u250a  \u250a    createdAt: Date!\n+\u250a  \u250a14\u250a    createdAt: DateTime!\n \u250a15\u250a15\u250a    chat: Chat\n \u250a16\u250a16\u250a    sender: User\n \u250a17\u250a17\u250a    recipient: User\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -94,7 +94,7 @@\n \u250a 94\u250a 94\u250a      return participant ? participant.name : null;\n \u250a 95\u250a 95\u250a    },\n \u250a 96\u250a 96\u250a\n-\u250a 97\u250a   \u250a    async picture(chat, args, { currentUser, db, unsplashApi }) {\n+\u250a   \u250a 97\u250a    async picture(chat, args, { currentUser, db, injector }) {\n \u250a 98\u250a 98\u250a      if (!currentUser) return null;\n \u250a 99\u250a 99\u250a\n \u250a100\u250a100\u250a      const { rows } = await db.query(sql`\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -107,7 +107,7 @@\n \u250a107\u250a107\u250a\n \u250a108\u250a108\u250a      return participant && participant.picture\n \u250a109\u250a109\u250a        ? participant.picture\n-\u250a110\u250a   \u250a        : unsplashApi.getRandomPhoto();\n+\u250a   \u250a110\u250a        : injector.get(UnsplashApi).getRandomPhoto();\n \u250a111\u250a111\u250a    },\n \u250a112\u250a112\u250a\n \u250a113\u250a113\u250a    async messages(chat, args, { db }) {\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -333,9 +333,5 @@\n \u250a333\u250a333\u250a  typeDefs,\n \u250a334\u250a334\u250a  resolvers,\n \u250a335\u250a335\u250a  imports: () => [commonModule, usersModule],\n-\u250a336\u250a   \u250a  context() {\n-\u250a337\u250a   \u250a    return {\n-\u250a338\u250a   \u250a      unsplashApi: new UnsplashApi(),\n-\u250a339\u250a   \u250a    };\n-\u250a340\u250a   \u250a  },\n+\u250a   \u250a336\u250a  providers: () => [UnsplashApi],\n \u250a341\u250a337\u250a});\n")),(0,s.kt)("p",null,"Please also take a look at ",(0,s.kt)("inlineCode",{parentName:"p"},"injector.get(UnsplashApi)")," part. There's ",(0,s.kt)("inlineCode",{parentName:"p"},"injector")," instance in every module's context that allows to consume providers and everything that is defined within DI. You simply pass a class / token to the ",(0,s.kt)("inlineCode",{parentName:"p"},"get")," method and GraphQL Modules takes care of the rest."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"What are the benefits of DI?")),(0,s.kt)("p",null,"You can have a different implementation of Users based on the same interface. Maybe right now you're using PostgreSQL but at some point a project will be migrated to MongoDB. You could do it through GraphQL context, of course but with Dependency Injection, GraphQL Modules is able to tell you exactly what's missing and where. It reduces boiler plate because instantiation is done by the injector, code is loosely coupled."),(0,s.kt)("p",null,"Helps maintainability but also comes with few disadvantages. It's a bit complex concept to learn and what could be done on compile time (TypeScript) is moved to run-time."),(0,s.kt)("p",null,"You might find DI useful while testing. Let's say you want to test a query that involves ",(0,s.kt)("inlineCode",{parentName:"p"},"UnsplashApi")," provider, you simply replace it with a mocked version without touching the context or internals and you get the expected result every single time."),(0,s.kt)("p",null,"We know there's only one provider by far, the ",(0,s.kt)("inlineCode",{parentName:"p"},"UnsplashApi"),", but we're going to implement more and more in following steps."),(0,s.kt)("h4",{id:"continuing-with-di"},"Continuing with DI"),(0,s.kt)("p",null,"We want to have everything easily accesible and DI helps with that so let's move on and continue migrating things."),(0,s.kt)("p",null,"One of the shared objects is database connection and we're going to create a Database provider:"),(0,s.kt)("h4",{id:"server-step-136-define-database-provider"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/925e8f4bb0d56b54a09cda51c055d8e61a780338"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 13.6: Define Database provider")),(0,s.kt)("h5",{id:"added-modulescommondatabaseproviderts"},"Added modules","/","common","/","database.provider.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,26 @@\n+\u250a  \u250a 1\u250aimport { Injectable, ProviderScope } from '@graphql-modules/di';\n+\u250a  \u250a 2\u250aimport { OnResponse } from '@graphql-modules/core';\n+\u250a  \u250a 3\u250aimport { Pool, PoolClient } from 'pg';\n+\u250a  \u250a 4\u250a\n+\u250a  \u250a 5\u250a@Injectable({\n+\u250a  \u250a 6\u250a  scope: ProviderScope.Session,\n+\u250a  \u250a 7\u250a})\n+\u250a  \u250a 8\u250aexport class Database implements OnResponse {\n+\u250a  \u250a 9\u250a  private instance: PoolClient;\n+\u250a  \u250a10\u250a\n+\u250a  \u250a11\u250a  constructor(private pool: Pool) {}\n+\u250a  \u250a12\u250a\n+\u250a  \u250a13\u250a  async onRequest() {\n+\u250a  \u250a14\u250a    this.instance = await this.pool.connect();\n+\u250a  \u250a15\u250a  }\n+\u250a  \u250a16\u250a\n+\u250a  \u250a17\u250a  onResponse() {\n+\u250a  \u250a18\u250a    if (this.instance) {\n+\u250a  \u250a19\u250a      this.instance.release();\n+\u250a  \u250a20\u250a    }\n+\u250a  \u250a21\u250a  }\n+\u250a  \u250a22\u250a\n+\u250a  \u250a23\u250a  async getClient() {\n+\u250a  \u250a24\u250a    return this.instance;\n+\u250a  \u250a25\u250a  }\n+\u250a  \u250a26\u250a}\n")),(0,s.kt)("p",null,"Things we did there:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Session scope was used, which makes sure our provider is created and destroyed on every GraphQL Operation"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"onRequest")," hook is called when a GraphQL Operation starts and we create a database connection in it."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"onResponse")," hook is triggered when GraphQL Response is about to be sent to the consumer, so we destroy the connection there."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"getClient")," method exposes the connection"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"Pool")," in constructor means we expect ",(0,s.kt)("inlineCode",{parentName:"li"},"Pool")," to be injected into ",(0,s.kt)("inlineCode",{parentName:"li"},"Database")," provider.")),(0,s.kt)("p",null,"Now we can define ",(0,s.kt)("inlineCode",{parentName:"p"},"Pool")," token and register ",(0,s.kt)("inlineCode",{parentName:"p"},"Database"),":"),(0,s.kt)("h4",{id:"server-step-136-define-database-provider-1"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/925e8f4bb0d56b54a09cda51c055d8e61a780338"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 13.6: Define Database provider")),(0,s.kt)("h5",{id:"changed-modulescommonindexts-3"},"Changed modules","/","common","/","index.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,8 +1,10 @@\n \u250a 1\u250a 1\u250aimport { GraphQLModule } from '@graphql-modules/core';\n \u250a 2\u250a 2\u250aimport { gql } from 'apollo-server-express';\n \u250a 3\u250a 3\u250aimport { DateTimeResolver, URLResolver } from 'graphql-scalars';\n+\u250a  \u250a 4\u250aimport { Pool } from 'pg';\n \u250a 4\u250a 5\u250aimport { pool } from '../../db';\n \u250a 5\u250a 6\u250aimport { Resolvers } from '../../types/graphql';\n+\u250a  \u250a 7\u250aimport { Database } from './database.provider';\n \u250a 6\u250a 8\u250a\n \u250a 7\u250a 9\u250aconst { PostgresPubSub } = require('graphql-postgres-subscriptions');\n \u250a 8\u250a10\u250a\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -40,6 +42,13 @@\n \u250a40\u250a42\u250a  name: 'common',\n \u250a41\u250a43\u250a  typeDefs,\n \u250a42\u250a44\u250a  resolvers,\n+\u250a  \u250a45\u250a  providers: () => [\n+\u250a  \u250a46\u250a    {\n+\u250a  \u250a47\u250a      provide: Pool,\n+\u250a  \u250a48\u250a      useValue: pool,\n+\u250a  \u250a49\u250a    },\n+\u250a  \u250a50\u250a    Database,\n+\u250a  \u250a51\u250a  ],\n \u250a43\u250a52\u250a  async context({ res, connection }) {\n \u250a44\u250a53\u250a    let db;\n")),(0,s.kt)("h4",{id:"server-step-136-define-database-provider-2"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/925e8f4bb0d56b54a09cda51c055d8e61a780338"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 13.6: Define Database provider")),(0,s.kt)("h4",{id:"creating-users-and-chats-services"},"Creating Users and Chats services"),(0,s.kt)("p",null,"It's not really recommended to put logic in resolvers so we're going to create a layer with business logic. A good example of that are Users and Chats modules so let's start with the former."),(0,s.kt)("p",null,"We're going to create ",(0,s.kt)("inlineCode",{parentName:"p"},"Users")," service and move ",(0,s.kt)("inlineCode",{parentName:"p"},"Query.users")," logic into ",(0,s.kt)("inlineCode",{parentName:"p"},"findAllExcept")," method:"),(0,s.kt)("h4",{id:"server-step-137-basic-user-provider"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/575cb3780fe342ea5310d7f5d4672f53933dfd2c"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 13.7: Basic User provider")),(0,s.kt)("h5",{id:"changed-modulesusersindexts-2"},"Changed modules","/","users","/","index.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -9,6 +9,7 @@\n \u250a 9\u250a 9\u250aimport { pool } from '../../db';\n \u250a10\u250a10\u250aimport { validateLength, validatePassword } from '../../validators';\n \u250a11\u250a11\u250aimport { Resolvers } from '../../types/graphql';\n+\u250a  \u250a12\u250aimport { Users } from './users.provider';\n \u250a12\u250a13\u250a\n \u250a13\u250a14\u250aconst typeDefs = gql`\n \u250a14\u250a15\u250a  type User {\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -38,14 +39,10 @@\n \u250a38\u250a39\u250a    me(root, args, { currentUser }) {\n \u250a39\u250a40\u250a      return currentUser || null;\n \u250a40\u250a41\u250a    },\n-\u250a41\u250a  \u250a    async users(root, args, { currentUser, db }) {\n+\u250a  \u250a42\u250a    async users(root, args, { currentUser, injector }) {\n \u250a42\u250a43\u250a      if (!currentUser) return [];\n \u250a43\u250a44\u250a\n-\u250a44\u250a  \u250a      const { rows } = await db.query(sql`\n-\u250a45\u250a  \u250a        SELECT * FROM users WHERE users.id != ${currentUser.id}\n-\u250a46\u250a  \u250a      `);\n-\u250a47\u250a  \u250a\n-\u250a48\u250a  \u250a      return rows;\n+\u250a  \u250a45\u250a      return injector.get(Users).findAllExcept(currentUser.id);\n \u250a49\u250a46\u250a    },\n \u250a50\u250a47\u250a  },\n \u250a51\u250a48\u250a  Mutation: {\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -108,6 +105,7 @@\n \u250a108\u250a105\u250a  typeDefs,\n \u250a109\u250a106\u250a  resolvers,\n \u250a110\u250a107\u250a  imports: () => [commonModule],\n+\u250a   \u250a108\u250a  providers: () => [Users],\n \u250a111\u250a109\u250a  async context(session) {\n \u250a112\u250a110\u250a    let currentUser;\n \u250a113\u250a111\u250a\n")),(0,s.kt)("h5",{id:"added-modulesusersusersproviderts"},"Added modules","/","users","/","users.provider.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,19 @@\n+\u250a  \u250a 1\u250aimport { Injectable, Inject, ProviderScope } from '@graphql-modules/di';\n+\u250a  \u250a 2\u250aimport sql from 'sql-template-strings';\n+\u250a  \u250a 3\u250aimport { Database } from '../common/database.provider';\n+\u250a  \u250a 4\u250a\n+\u250a  \u250a 5\u250a@Injectable({\n+\u250a  \u250a 6\u250a  scope: ProviderScope.Session,\n+\u250a  \u250a 7\u250a})\n+\u250a  \u250a 8\u250aexport class Users {\n+\u250a  \u250a 9\u250a  @Inject() private db: Database;\n+\u250a  \u250a10\u250a\n+\u250a  \u250a11\u250a  async findAllExcept(userId: string) {\n+\u250a  \u250a12\u250a    const db = await this.db.getClient();\n+\u250a  \u250a13\u250a    const { rows } = await db.query(\n+\u250a  \u250a14\u250a      sql`SELECT * FROM users WHERE id != ${userId}`\n+\u250a  \u250a15\u250a    );\n+\u250a  \u250a16\u250a\n+\u250a  \u250a17\u250a    return rows;\n+\u250a  \u250a18\u250a  }\n+\u250a  \u250a19\u250a}\n")),(0,s.kt)("p",null,"A very interesting thing to notice is ",(0,s.kt)("inlineCode",{parentName:"p"},"@Inject()")," decorator."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"@Inject() private db: Database;\n")),(0,s.kt)("p",null,"The @Inject, well... injects ",(0,s.kt)("inlineCode",{parentName:"p"},"Database")," provider as ",(0,s.kt)("inlineCode",{parentName:"p"},"db")," property so you don't have to use the ",(0,s.kt)("inlineCode",{parentName:"p"},"constructor"),"."),(0,s.kt)("p",null,"Back to the Users service. It's very similar to what we did with the ",(0,s.kt)("inlineCode",{parentName:"p"},"UnsplashApi")," so let's move on and implement more methods."),(0,s.kt)("h4",{id:"server-step-138-implement-newuser-and-findbyusername"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/fa01a1a1590296ce0cc20925f3bd58362b38966c"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 13.8: Implement newUser and findByUsername")),(0,s.kt)("h5",{id:"changed-modulesusersindexts-3"},"Changed modules","/","users","/","index.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -46,11 +46,8 @@\n \u250a46\u250a46\u250a    },\n \u250a47\u250a47\u250a  },\n \u250a48\u250a48\u250a  Mutation: {\n-\u250a49\u250a  \u250a    async signIn(root, { username, password }, { db, res }) {\n-\u250a50\u250a  \u250a      const { rows } = await db.query(\n-\u250a51\u250a  \u250a        sql`SELECT * FROM users WHERE username = ${username}`\n-\u250a52\u250a  \u250a      );\n-\u250a53\u250a  \u250a      const user = rows[0];\n+\u250a  \u250a49\u250a    async signIn(root, { username, password }, { injector, res }) {\n+\u250a  \u250a50\u250a      const user = await injector.get(Users).findByUsername(username);\n \u250a54\u250a51\u250a\n \u250a55\u250a52\u250a      if (!user) {\n \u250a56\u250a53\u250a        throw new Error('user not found');\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -69,7 +66,11 @@\n \u250a69\u250a66\u250a      return user;\n \u250a70\u250a67\u250a    },\n \u250a71\u250a68\u250a\n-\u250a72\u250a  \u250a    async signUp(root, { name, username, password, passwordConfirm }, { db }) {\n+\u250a  \u250a69\u250a    async signUp(\n+\u250a  \u250a70\u250a      root,\n+\u250a  \u250a71\u250a      { name, username, password, passwordConfirm },\n+\u250a  \u250a72\u250a      { injector }\n+\u250a  \u250a73\u250a    ) {\n \u250a73\u250a74\u250a      validateLength('req.name', name, 3, 50);\n \u250a74\u250a75\u250a      validateLength('req.username', username, 3, 18);\n \u250a75\u250a76\u250a      validatePassword('req.password', password);\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -78,24 +79,18 @@\n \u250a 78\u250a 79\u250a        throw Error(\"req.password and req.passwordConfirm don't match\");\n \u250a 79\u250a 80\u250a      }\n \u250a 80\u250a 81\u250a\n-\u250a 81\u250a   \u250a      const existingUserQuery = await db.query(\n-\u250a 82\u250a   \u250a        sql`SELECT * FROM users WHERE username = ${username}`\n-\u250a 83\u250a   \u250a      );\n-\u250a 84\u250a   \u250a      if (existingUserQuery.rows[0]) {\n+\u250a   \u250a 82\u250a      const existingUser = await injector.get(Users).findByUsername(username);\n+\u250a   \u250a 83\u250a      if (existingUser) {\n \u250a 85\u250a 84\u250a        throw Error('username already exists');\n \u250a 86\u250a 85\u250a      }\n \u250a 87\u250a 86\u250a\n-\u250a 88\u250a   \u250a      const passwordHash = bcrypt.hashSync(password, bcrypt.genSaltSync(8));\n+\u250a   \u250a 87\u250a      const createdUser = await injector.get(Users).newUser({\n+\u250a   \u250a 88\u250a        username,\n+\u250a   \u250a 89\u250a        password,\n+\u250a   \u250a 90\u250a        name,\n+\u250a   \u250a 91\u250a      });\n \u250a 89\u250a 92\u250a\n-\u250a 90\u250a   \u250a      const createdUserQuery = await db.query(sql`\n-\u250a 91\u250a   \u250a        INSERT INTO users(password, picture, username, name)\n-\u250a 92\u250a   \u250a        VALUES(${passwordHash}, '', ${username}, ${name})\n-\u250a 93\u250a   \u250a        RETURNING *\n-\u250a 94\u250a   \u250a      `);\n-\u250a 95\u250a   \u250a\n-\u250a 96\u250a   \u250a      const user = createdUserQuery.rows[0];\n-\u250a 97\u250a   \u250a\n-\u250a 98\u250a   \u250a      return user;\n+\u250a   \u250a 93\u250a      return createdUser;\n \u250a 99\u250a 94\u250a    },\n \u250a100\u250a 95\u250a  },\n \u250a101\u250a 96\u250a};\n")),(0,s.kt)("h5",{id:"changed-modulesusersusersproviderts"},"Changed modules","/","users","/","users.provider.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,7 +1,10 @@\n \u250a 1\u250a 1\u250aimport { Injectable, Inject, ProviderScope } from '@graphql-modules/di';\n \u250a 2\u250a 2\u250aimport sql from 'sql-template-strings';\n+\u250a  \u250a 3\u250aimport bcrypt from 'bcrypt';\n \u250a 3\u250a 4\u250aimport { Database } from '../common/database.provider';\n \u250a 4\u250a 5\u250a\n+\u250a  \u250a 6\u250aconst DEFAULT_PROFILE_PIC = 'https://raw.githubusercontent.com/Urigo/WhatsApp-Clone-Client-React/legacy/public/assets/default-profile-pic.jpg'\n+\u250a  \u250a 7\u250a\n \u250a 5\u250a 8\u250a@Injectable({\n \u250a 6\u250a 9\u250a  scope: ProviderScope.Session,\n \u250a 7\u250a10\u250a})\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -16,4 +19,34 @@\n \u250a16\u250a19\u250a\n \u250a17\u250a20\u250a    return rows;\n \u250a18\u250a21\u250a  }\n+\u250a  \u250a22\u250a\n+\u250a  \u250a23\u250a  async findByUsername(username: string) {\n+\u250a  \u250a24\u250a    const db = await this.db.getClient();\n+\u250a  \u250a25\u250a    const { rows } = await db.query(\n+\u250a  \u250a26\u250a      sql`SELECT * FROM users WHERE username = ${username}`\n+\u250a  \u250a27\u250a    );\n+\u250a  \u250a28\u250a\n+\u250a  \u250a29\u250a    return rows[0] || null;\n+\u250a  \u250a30\u250a  }\n+\u250a  \u250a31\u250a\n+\u250a  \u250a32\u250a  async newUser({\n+\u250a  \u250a33\u250a    username,\n+\u250a  \u250a34\u250a    name,\n+\u250a  \u250a35\u250a    password,\n+\u250a  \u250a36\u250a  }: {\n+\u250a  \u250a37\u250a    username: string;\n+\u250a  \u250a38\u250a    name: string;\n+\u250a  \u250a39\u250a    password: string;\n+\u250a  \u250a40\u250a  }) {\n+\u250a  \u250a41\u250a    const db = await this.db.getClient();\n+\u250a  \u250a42\u250a    const passwordHash = bcrypt.hashSync(password, bcrypt.genSaltSync(8));\n+\u250a  \u250a43\u250a    const createdUserQuery = await db.query(sql`\n+\u250a  \u250a44\u250a        INSERT INTO users(password, picture, username, name)\n+\u250a  \u250a45\u250a        VALUES(${passwordHash}, ${DEFAULT_PROFILE_PIC}, ${username}, ${name})\n+\u250a  \u250a46\u250a        RETURNING *\n+\u250a  \u250a47\u250a      `);\n+\u250a  \u250a48\u250a    const user = createdUserQuery.rows[0];\n+\u250a  \u250a49\u250a\n+\u250a  \u250a50\u250a    return user;\n+\u250a  \u250a51\u250a  }\n \u250a19\u250a52\u250a}\n")),(0,s.kt)("h4",{id:"server-step-139-implement-findbyid-and-use-in-chats-module"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/d792c2659ceb5a69f1cfc23873996990153637db"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 13.9: Implement findById and use in Chats module")),(0,s.kt)("h5",{id:"changed-moduleschatsindexts-6"},"Changed modules","/","chats","/","index.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -6,6 +6,7 @@\n \u250a 6\u250a 6\u250aimport { Message, Chat, pool } from '../../db';\n \u250a 7\u250a 7\u250aimport { Resolvers } from '../../types/graphql';\n \u250a 8\u250a 8\u250aimport { UnsplashApi } from './unsplash.api';\n+\u250a  \u250a 9\u250aimport { Users } from './../users/users.provider';\n \u250a 9\u250a10\u250a\n \u250a10\u250a11\u250aconst typeDefs = gql`\n \u250a11\u250a12\u250a  type Message {\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -58,11 +59,8 @@\n \u250a58\u250a59\u250a      return rows[0] || null;\n \u250a59\u250a60\u250a    },\n \u250a60\u250a61\u250a\n-\u250a61\u250a  \u250a    async sender(message, args, { db }) {\n-\u250a62\u250a  \u250a      const { rows } = await db.query(sql`\n-\u250a63\u250a  \u250a        SELECT * FROM users WHERE id = ${message.sender_user_id}\n-\u250a64\u250a  \u250a      `);\n-\u250a65\u250a  \u250a      return rows[0] || null;\n+\u250a  \u250a62\u250a    async sender(message, args, { injector }) {\n+\u250a  \u250a63\u250a      return injector.get(Users).findById(message.sender_user_id);\n \u250a66\u250a64\u250a    },\n \u250a67\u250a65\u250a\n \u250a68\u250a66\u250a    async recipient(message, args, { db }) {\n")),(0,s.kt)("h5",{id:"changed-modulesusersusersproviderts-1"},"Changed modules","/","users","/","users.provider.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -11,6 +11,15 @@\n \u250a11\u250a11\u250aexport class Users {\n \u250a12\u250a12\u250a  @Inject() private db: Database;\n \u250a13\u250a13\u250a\n+\u250a  \u250a14\u250a  async findById(userId: string) {\n+\u250a  \u250a15\u250a    const db = await this.db.getClient();\n+\u250a  \u250a16\u250a    const { rows } = await db.query(\n+\u250a  \u250a17\u250a      sql`SELECT * FROM users WHERE id = ${userId}`\n+\u250a  \u250a18\u250a    );\n+\u250a  \u250a19\u250a\n+\u250a  \u250a20\u250a    return rows[0] || null;\n+\u250a  \u250a21\u250a  }\n+\u250a  \u250a22\u250a\n \u250a14\u250a23\u250a  async findAllExcept(userId: string) {\n \u250a15\u250a24\u250a    const db = await this.db.getClient();\n \u250a16\u250a25\u250a    const { rows } = await db.query(\n")),(0,s.kt)("p",null,"Let's now implement ",(0,s.kt)("inlineCode",{parentName:"p"},"Chats")," service with two basic methods:"),(0,s.kt)("h4",{id:"server-step-1310-basic-chats-provider"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/a83174d9efb811f3fa0c64060d5b37d0dde4f7cf"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 13.10: Basic Chats provider")),(0,s.kt)("h5",{id:"added-moduleschatschatsproviderts"},"Added modules","/","chats","/","chats.provider.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,34 @@\n+\u250a  \u250a 1\u250aimport { Injectable, Inject, ProviderScope } from '@graphql-modules/di';\n+\u250a  \u250a 2\u250aimport sql from 'sql-template-strings';\n+\u250a  \u250a 3\u250aimport { Database } from '../common/database.provider';\n+\u250a  \u250a 4\u250a\n+\u250a  \u250a 5\u250a@Injectable({\n+\u250a  \u250a 6\u250a  scope: ProviderScope.Session,\n+\u250a  \u250a 7\u250a})\n+\u250a  \u250a 8\u250aexport class Chats {\n+\u250a  \u250a 9\u250a  @Inject() private db: Database;\n+\u250a  \u250a10\u250a\n+\u250a  \u250a11\u250a  async findChatsByUser(userId: string) {\n+\u250a  \u250a12\u250a    const db = await this.db.getClient();\n+\u250a  \u250a13\u250a\n+\u250a  \u250a14\u250a    const { rows } = await db.query(sql`\n+\u250a  \u250a15\u250a      SELECT chats.* FROM chats, chats_users\n+\u250a  \u250a16\u250a      WHERE chats.id = chats_users.chat_id\n+\u250a  \u250a17\u250a      AND chats_users.user_id = ${userId}\n+\u250a  \u250a18\u250a    `);\n+\u250a  \u250a19\u250a\n+\u250a  \u250a20\u250a    return rows;\n+\u250a  \u250a21\u250a  }\n+\u250a  \u250a22\u250a\n+\u250a  \u250a23\u250a  async findChatByUser({ chatId, userId }: { chatId: string; userId: string }) {\n+\u250a  \u250a24\u250a    const db = await this.db.getClient();\n+\u250a  \u250a25\u250a    const { rows } = await db.query(sql`\n+\u250a  \u250a26\u250a      SELECT chats.* FROM chats, chats_users\n+\u250a  \u250a27\u250a      WHERE chats_users.chat_id = ${chatId}\n+\u250a  \u250a28\u250a      AND chats.id = chats_users.chat_id\n+\u250a  \u250a29\u250a      AND chats_users.user_id = ${userId}\n+\u250a  \u250a30\u250a    `);\n+\u250a  \u250a31\u250a\n+\u250a  \u250a32\u250a    return rows[0] || null;\n+\u250a  \u250a33\u250a  }\n+\u250a  \u250a34\u250a}\n")),(0,s.kt)("h5",{id:"changed-moduleschatsindexts-7"},"Changed modules","/","chats","/","index.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -7,6 +7,7 @@\n \u250a 7\u250a 7\u250aimport { Resolvers } from '../../types/graphql';\n \u250a 8\u250a 8\u250aimport { UnsplashApi } from './unsplash.api';\n \u250a 9\u250a 9\u250aimport { Users } from './../users/users.provider';\n+\u250a  \u250a10\u250aimport { Chats } from './chats.provider';\n \u250a10\u250a11\u250a\n \u250a11\u250a12\u250aconst typeDefs = gql`\n \u250a12\u250a13\u250a  type Message {\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -138,29 +139,18 @@\n \u250a138\u250a139\u250a  },\n \u250a139\u250a140\u250a\n \u250a140\u250a141\u250a  Query: {\n-\u250a141\u250a   \u250a    async chats(root, args, { currentUser, db }) {\n+\u250a   \u250a142\u250a    async chats(root, args, { currentUser, injector }) {\n \u250a142\u250a143\u250a      if (!currentUser) return [];\n \u250a143\u250a144\u250a\n-\u250a144\u250a   \u250a      const { rows } = await db.query(sql`\n-\u250a145\u250a   \u250a        SELECT chats.* FROM chats, chats_users\n-\u250a146\u250a   \u250a        WHERE chats.id = chats_users.chat_id\n-\u250a147\u250a   \u250a        AND chats_users.user_id = ${currentUser.id}\n-\u250a148\u250a   \u250a      `);\n-\u250a149\u250a   \u250a\n-\u250a150\u250a   \u250a      return rows;\n+\u250a   \u250a145\u250a      return injector.get(Chats).findChatsByUser(currentUser.id);\n \u250a151\u250a146\u250a    },\n \u250a152\u250a147\u250a\n-\u250a153\u250a   \u250a    async chat(root, { chatId }, { currentUser, db }) {\n+\u250a   \u250a148\u250a    async chat(root, { chatId }, { currentUser, injector }) {\n \u250a154\u250a149\u250a      if (!currentUser) return null;\n \u250a155\u250a150\u250a\n-\u250a156\u250a   \u250a      const { rows } = await db.query(sql`\n-\u250a157\u250a   \u250a        SELECT chats.* FROM chats, chats_users\n-\u250a158\u250a   \u250a        WHERE chats_users.chat_id = ${chatId}\n-\u250a159\u250a   \u250a        AND chats.id = chats_users.chat_id\n-\u250a160\u250a   \u250a        AND chats_users.user_id = ${currentUser.id}\n-\u250a161\u250a   \u250a      `);\n-\u250a162\u250a   \u250a\n-\u250a163\u250a   \u250a      return rows[0] ? rows[0] : null;\n+\u250a   \u250a151\u250a      return injector\n+\u250a   \u250a152\u250a        .get(Chats)\n+\u250a   \u250a153\u250a        .findChatByUser({ chatId, userId: currentUser.id });\n \u250a164\u250a154\u250a    },\n \u250a165\u250a155\u250a  },\n \u250a166\u250a156\u250a\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -331,5 +321,5 @@\n \u250a331\u250a321\u250a  typeDefs,\n \u250a332\u250a322\u250a  resolvers,\n \u250a333\u250a323\u250a  imports: () => [commonModule, usersModule],\n-\u250a334\u250a   \u250a  providers: () => [UnsplashApi],\n+\u250a   \u250a324\u250a  providers: () => [UnsplashApi, Chats],\n \u250a335\u250a325\u250a});\n")),(0,s.kt)("p",null,"It looks exatly like ",(0,s.kt)("inlineCode",{parentName:"p"},"Users")," and also has only ",(0,s.kt)("inlineCode",{parentName:"p"},"database")," provider in it."),(0,s.kt)("p",null,"We're going to move on and more things:"),(0,s.kt)("h4",{id:"server-step-1311-implement-findchatbyid"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/966f55067ce4fc90ab5376298a59537c514d534f"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 13.11: Implement findChatById")),(0,s.kt)("h5",{id:"changed-moduleschatschatsproviderts"},"Changed modules","/","chats","/","chats.provider.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -31,4 +31,12 @@\n \u250a31\u250a31\u250a\n \u250a32\u250a32\u250a    return rows[0] || null;\n \u250a33\u250a33\u250a  }\n+\u250a  \u250a34\u250a\n+\u250a  \u250a35\u250a  async findChatById(chatId: string) {\n+\u250a  \u250a36\u250a    const db = await this.db.getClient();\n+\u250a  \u250a37\u250a    const { rows } = await db.query(sql`\n+\u250a  \u250a38\u250a      SELECT * FROM chats WHERE id = ${chatId}\n+\u250a  \u250a39\u250a    `);\n+\u250a  \u250a40\u250a    return rows[0] || null;\n+\u250a  \u250a41\u250a  }\n \u250a34\u250a42\u250a}\n")),(0,s.kt)("h5",{id:"changed-moduleschatsindexts-8"},"Changed modules","/","chats","/","index.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -53,11 +53,8 @@\n \u250a53\u250a53\u250a      return new Date(message.created_at);\n \u250a54\u250a54\u250a    },\n \u250a55\u250a55\u250a\n-\u250a56\u250a  \u250a    async chat(message, args, { db }) {\n-\u250a57\u250a  \u250a      const { rows } = await db.query(sql`\n-\u250a58\u250a  \u250a        SELECT * FROM chats WHERE id = ${message.chat_id}\n-\u250a59\u250a  \u250a      `);\n-\u250a60\u250a  \u250a      return rows[0] || null;\n+\u250a  \u250a56\u250a    async chat(message, args, { injector }) {\n+\u250a  \u250a57\u250a      return injector.get(Chats).findChatById(message.chat_id);\n \u250a61\u250a58\u250a    },\n \u250a62\u250a59\u250a\n \u250a63\u250a60\u250a    async sender(message, args, { injector }) {\n")),(0,s.kt)("h4",{id:"server-step-1312-find-chats-messages"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/8505ae70a997e533efbed7fd40f134054622cadd"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 13.12: Find chat","'","s messages")),(0,s.kt)("h5",{id:"changed-moduleschatschatsproviderts-1"},"Changed modules","/","chats","/","chats.provider.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -39,4 +39,25 @@\n \u250a39\u250a39\u250a    `);\n \u250a40\u250a40\u250a    return rows[0] || null;\n \u250a41\u250a41\u250a  }\n+\u250a  \u250a42\u250a\n+\u250a  \u250a43\u250a  async findMessagesByChat(chatId: string) {\n+\u250a  \u250a44\u250a    const db = await this.db.getClient();\n+\u250a  \u250a45\u250a    const { rows } = await db.query(\n+\u250a  \u250a46\u250a      sql`SELECT * FROM messages WHERE chat_id = ${chatId}`\n+\u250a  \u250a47\u250a    );\n+\u250a  \u250a48\u250a\n+\u250a  \u250a49\u250a    return rows;\n+\u250a  \u250a50\u250a  }\n+\u250a  \u250a51\u250a\n+\u250a  \u250a52\u250a  async lastMessage(chatId: string) {\n+\u250a  \u250a53\u250a    const db = await this.db.getClient();\n+\u250a  \u250a54\u250a    const { rows } = await db.query(sql`\n+\u250a  \u250a55\u250a      SELECT * FROM messages\n+\u250a  \u250a56\u250a      WHERE chat_id = ${chatId}\n+\u250a  \u250a57\u250a      ORDER BY created_at DESC\n+\u250a  \u250a58\u250a      LIMIT 1\n+\u250a  \u250a59\u250a    `);\n+\u250a  \u250a60\u250a\n+\u250a  \u250a61\u250a    return rows[0];\n+\u250a  \u250a62\u250a  }\n \u250a42\u250a63\u250a}\n")),(0,s.kt)("h5",{id:"changed-moduleschatsindexts-9"},"Changed modules","/","chats","/","index.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -106,22 +106,12 @@\n \u250a106\u250a106\u250a        : injector.get(UnsplashApi).getRandomPhoto();\n \u250a107\u250a107\u250a    },\n \u250a108\u250a108\u250a\n-\u250a109\u250a   \u250a    async messages(chat, args, { db }) {\n-\u250a110\u250a   \u250a      const { rows } = await db.query(\n-\u250a111\u250a   \u250a        sql`SELECT * FROM messages WHERE chat_id = ${chat.id}`\n-\u250a112\u250a   \u250a      );\n-\u250a113\u250a   \u250a\n-\u250a114\u250a   \u250a      return rows;\n+\u250a   \u250a109\u250a    async messages(chat, args, { injector }) {\n+\u250a   \u250a110\u250a      return injector.get(Chats).findMessagesByChat(chat.id);\n \u250a115\u250a111\u250a    },\n \u250a116\u250a112\u250a\n-\u250a117\u250a   \u250a    async lastMessage(chat, args, { db }) {\n-\u250a118\u250a   \u250a      const { rows } = await db.query(sql`\n-\u250a119\u250a   \u250a        SELECT * FROM messages\n-\u250a120\u250a   \u250a        WHERE chat_id = ${chat.id}\n-\u250a121\u250a   \u250a        ORDER BY created_at DESC\n-\u250a122\u250a   \u250a        LIMIT 1`);\n-\u250a123\u250a   \u250a\n-\u250a124\u250a   \u250a      return rows[0];\n+\u250a   \u250a113\u250a    async lastMessage(chat, args, { injector }) {\n+\u250a   \u250a114\u250a      return injector.get(Chats).lastMessage(chat.id);\n \u250a125\u250a115\u250a    },\n \u250a126\u250a116\u250a\n \u250a127\u250a117\u250a    async participants(chat, args, { db }) {\n")),(0,s.kt)("h4",{id:"server-step-1313-find-first-participant"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/ca03b13ed01f2e0ba61bfb72fec54e0d3693c882"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 13.13: Find first participant")),(0,s.kt)("h5",{id:"changed-moduleschatschatsproviderts-2"},"Changed modules","/","chats","/","chats.provider.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -60,4 +60,16 @@\n \u250a60\u250a60\u250a\n \u250a61\u250a61\u250a    return rows[0];\n \u250a62\u250a62\u250a  }\n+\u250a  \u250a63\u250a\n+\u250a  \u250a64\u250a  async firstRecipient({ chatId, userId }: { chatId: string; userId: string }) {\n+\u250a  \u250a65\u250a    const db = await this.db.getClient();\n+\u250a  \u250a66\u250a    const { rows } = await db.query(sql`\n+\u250a  \u250a67\u250a      SELECT users.* FROM users, chats_users\n+\u250a  \u250a68\u250a      WHERE users.id != ${userId}\n+\u250a  \u250a69\u250a      AND users.id = chats_users.user_id\n+\u250a  \u250a70\u250a      AND chats_users.chat_id = ${chatId}\n+\u250a  \u250a71\u250a    `);\n+\u250a  \u250a72\u250a\n+\u250a  \u250a73\u250a    return rows[0] || null;\n+\u250a  \u250a74\u250a  }\n \u250a63\u250a75\u250a}\n")),(0,s.kt)("h5",{id:"changed-moduleschatsindexts-10"},"Changed modules","/","chats","/","index.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -61,13 +61,11 @@\n \u250a61\u250a61\u250a      return injector.get(Users).findById(message.sender_user_id);\n \u250a62\u250a62\u250a    },\n \u250a63\u250a63\u250a\n-\u250a64\u250a  \u250a    async recipient(message, args, { db }) {\n-\u250a65\u250a  \u250a      const { rows } = await db.query(sql`\n-\u250a66\u250a  \u250a        SELECT users.* FROM users, chats_users\n-\u250a67\u250a  \u250a        WHERE chats_users.user_id != ${message.sender_user_id}\n-\u250a68\u250a  \u250a        AND chats_users.chat_id = ${message.chat_id}\n-\u250a69\u250a  \u250a      `);\n-\u250a70\u250a  \u250a      return rows[0] || null;\n+\u250a  \u250a64\u250a    async recipient(message, args, { injector }) {\n+\u250a  \u250a65\u250a      return injector.get(Chats).firstRecipient({\n+\u250a  \u250a66\u250a        chatId: message.chat_id,\n+\u250a  \u250a67\u250a        userId: message.sender_user_id,\n+\u250a  \u250a68\u250a      });\n \u250a71\u250a69\u250a    },\n \u250a72\u250a70\u250a\n \u250a73\u250a71\u250a    isMine(message, args, { currentUser }) {\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -76,16 +74,13 @@\n \u250a76\u250a74\u250a  },\n \u250a77\u250a75\u250a\n \u250a78\u250a76\u250a  Chat: {\n-\u250a79\u250a  \u250a    async name(chat, args, { currentUser, db }) {\n+\u250a  \u250a77\u250a    async name(chat, args, { currentUser, injector }) {\n \u250a80\u250a78\u250a      if (!currentUser) return null;\n \u250a81\u250a79\u250a\n-\u250a82\u250a  \u250a      const { rows } = await db.query(sql`\n-\u250a83\u250a  \u250a        SELECT users.* FROM users, chats_users\n-\u250a84\u250a  \u250a        WHERE users.id != ${currentUser.id}\n-\u250a85\u250a  \u250a        AND users.id = chats_users.user_id\n-\u250a86\u250a  \u250a        AND chats_users.chat_id = ${chat.id}`);\n-\u250a87\u250a  \u250a\n-\u250a88\u250a  \u250a      const participant = rows[0];\n+\u250a  \u250a80\u250a      const participant = await injector.get(Chats).firstRecipient({\n+\u250a  \u250a81\u250a        chatId: chat.id,\n+\u250a  \u250a82\u250a        userId: currentUser.id,\n+\u250a  \u250a83\u250a      });\n \u250a89\u250a84\u250a\n \u250a90\u250a85\u250a      return participant ? participant.name : null;\n \u250a91\u250a86\u250a    },\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -93,13 +88,10 @@\n \u250a 93\u250a 88\u250a    async picture(chat, args, { currentUser, db, injector }) {\n \u250a 94\u250a 89\u250a      if (!currentUser) return null;\n \u250a 95\u250a 90\u250a\n-\u250a 96\u250a   \u250a      const { rows } = await db.query(sql`\n-\u250a 97\u250a   \u250a        SELECT users.* FROM users, chats_users\n-\u250a 98\u250a   \u250a        WHERE users.id != ${currentUser.id}\n-\u250a 99\u250a   \u250a        AND users.id = chats_users.user_id\n-\u250a100\u250a   \u250a        AND chats_users.chat_id = ${chat.id}`);\n-\u250a101\u250a   \u250a\n-\u250a102\u250a   \u250a      const participant = rows[0];\n+\u250a   \u250a 91\u250a      const participant = await injector.get(Chats).firstRecipient({\n+\u250a   \u250a 92\u250a        chatId: chat.id,\n+\u250a   \u250a 93\u250a        userId: currentUser.id,\n+\u250a   \u250a 94\u250a      });\n \u250a103\u250a 95\u250a\n \u250a104\u250a 96\u250a      return participant && participant.picture\n \u250a105\u250a 97\u250a        ? participant.picture\n")),(0,s.kt)("h4",{id:"server-step-1314-find-all-participants"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/bb8a4e439441e0623c856c18674a1a52a0a87f67"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 13.14: Find all participants")),(0,s.kt)("h5",{id:"changed-moduleschatschatsproviderts-3"},"Changed modules","/","chats","/","chats.provider.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -72,4 +72,15 @@\n \u250a72\u250a72\u250a\n \u250a73\u250a73\u250a    return rows[0] || null;\n \u250a74\u250a74\u250a  }\n+\u250a  \u250a75\u250a\n+\u250a  \u250a76\u250a  async participants(chatId: string) {\n+\u250a  \u250a77\u250a    const db = await this.db.getClient();\n+\u250a  \u250a78\u250a    const { rows } = await db.query(sql`\n+\u250a  \u250a79\u250a      SELECT users.* FROM users, chats_users\n+\u250a  \u250a80\u250a      WHERE chats_users.chat_id = ${chatId}\n+\u250a  \u250a81\u250a      AND chats_users.user_id = users.id\n+\u250a  \u250a82\u250a    `);\n+\u250a  \u250a83\u250a\n+\u250a  \u250a84\u250a    return rows;\n+\u250a  \u250a85\u250a  }\n \u250a75\u250a86\u250a}\n")),(0,s.kt)("h5",{id:"changed-moduleschatsindexts-11"},"Changed modules","/","chats","/","index.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -106,14 +106,8 @@\n \u250a106\u250a106\u250a      return injector.get(Chats).lastMessage(chat.id);\n \u250a107\u250a107\u250a    },\n \u250a108\u250a108\u250a\n-\u250a109\u250a   \u250a    async participants(chat, args, { db }) {\n-\u250a110\u250a   \u250a      const { rows } = await db.query(sql`\n-\u250a111\u250a   \u250a        SELECT users.* FROM users, chats_users\n-\u250a112\u250a   \u250a        WHERE chats_users.chat_id = ${chat.id}\n-\u250a113\u250a   \u250a        AND chats_users.user_id = users.id\n-\u250a114\u250a   \u250a      `);\n-\u250a115\u250a   \u250a\n-\u250a116\u250a   \u250a      return rows;\n+\u250a   \u250a109\u250a    async participants(chat, args, { injector }) {\n+\u250a   \u250a110\u250a      return injector.get(Chats).participants(chat.id);\n \u250a117\u250a111\u250a    },\n \u250a118\u250a112\u250a  },\n")),(0,s.kt)("h4",{id:"server-step-1315-check-if-a-user-belongs-to-a-chat"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/6694aff059304bcc836bcf46ca2c113362ce1f14"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 13.15: Check if a user belongs to a chat")),(0,s.kt)("h5",{id:"changed-moduleschatschatsproviderts-4"},"Changed modules","/","chats","/","chats.provider.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -83,4 +83,15 @@\n \u250a83\u250a83\u250a\n \u250a84\u250a84\u250a    return rows;\n \u250a85\u250a85\u250a  }\n+\u250a  \u250a86\u250a\n+\u250a  \u250a87\u250a  async isParticipant({ chatId, userId }: { chatId: string; userId: string }) {\n+\u250a  \u250a88\u250a    const db = await this.db.getClient();\n+\u250a  \u250a89\u250a    const { rows } = await db.query(sql`\n+\u250a  \u250a90\u250a      SELECT * FROM chats_users\n+\u250a  \u250a91\u250a      WHERE chat_id = ${chatId}\n+\u250a  \u250a92\u250a      AND user_id = ${userId}\n+\u250a  \u250a93\u250a    `);\n+\u250a  \u250a94\u250a\n+\u250a  \u250a95\u250a    return !!rows.length;\n+\u250a  \u250a96\u250a  }\n \u250a86\u250a97\u250a}\n")),(0,s.kt)("h5",{id:"changed-moduleschatsindexts-12"},"Changed modules","/","chats","/","index.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -241,16 +241,14 @@\n \u250a241\u250a241\u250a        async (\n \u250a242\u250a242\u250a          { messageAdded }: { messageAdded: Message },\n \u250a243\u250a243\u250a          args,\n-\u250a244\u250a   \u250a          { currentUser }\n+\u250a   \u250a244\u250a          { currentUser, injector }\n \u250a245\u250a245\u250a        ) => {\n \u250a246\u250a246\u250a          if (!currentUser) return false;\n \u250a247\u250a247\u250a\n-\u250a248\u250a   \u250a          const { rows } = await pool.query(sql`\n-\u250a249\u250a   \u250a            SELECT * FROM chats_users\n-\u250a250\u250a   \u250a            WHERE chat_id = ${messageAdded.chat_id}\n-\u250a251\u250a   \u250a            AND user_id = ${currentUser.id}`);\n-\u250a252\u250a   \u250a\n-\u250a253\u250a   \u250a          return !!rows.length;\n+\u250a   \u250a248\u250a          return injector.get(Chats).isParticipant({\n+\u250a   \u250a249\u250a            chatId: messageAdded.chat_id,\n+\u250a   \u250a250\u250a            userId: currentUser.id,\n+\u250a   \u250a251\u250a          });\n \u250a254\u250a252\u250a        }\n \u250a255\u250a253\u250a      ),\n \u250a256\u250a254\u250a    },\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -258,15 +256,17 @@\n \u250a258\u250a256\u250a    chatAdded: {\n \u250a259\u250a257\u250a      subscribe: withFilter(\n \u250a260\u250a258\u250a        (root, args, { pubsub }) => pubsub.asyncIterator('chatAdded'),\n-\u250a261\u250a   \u250a        async ({ chatAdded }: { chatAdded: Chat }, args, { currentUser }) => {\n+\u250a   \u250a259\u250a        async (\n+\u250a   \u250a260\u250a          { chatAdded }: { chatAdded: Chat },\n+\u250a   \u250a261\u250a          args,\n+\u250a   \u250a262\u250a          { currentUser, injector }\n+\u250a   \u250a263\u250a        ) => {\n \u250a262\u250a264\u250a          if (!currentUser) return false;\n \u250a263\u250a265\u250a\n-\u250a264\u250a   \u250a          const { rows } = await pool.query(sql`\n-\u250a265\u250a   \u250a            SELECT * FROM chats_users\n-\u250a266\u250a   \u250a            WHERE chat_id = ${chatAdded.id}\n-\u250a267\u250a   \u250a            AND user_id = ${currentUser.id}`);\n-\u250a268\u250a   \u250a\n-\u250a269\u250a   \u250a          return !!rows.length;\n+\u250a   \u250a266\u250a          return injector.get(Chats).isParticipant({\n+\u250a   \u250a267\u250a            chatId: chatAdded.id,\n+\u250a   \u250a268\u250a            userId: currentUser.id,\n+\u250a   \u250a269\u250a          });\n \u250a270\u250a270\u250a        }\n \u250a271\u250a271\u250a      ),\n \u250a272\u250a272\u250a    },\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -274,15 +274,17 @@\n \u250a274\u250a274\u250a    chatRemoved: {\n \u250a275\u250a275\u250a      subscribe: withFilter(\n \u250a276\u250a276\u250a        (root, args, { pubsub }) => pubsub.asyncIterator('chatRemoved'),\n-\u250a277\u250a   \u250a        async ({ targetChat }: { targetChat: Chat }, args, { currentUser }) => {\n+\u250a   \u250a277\u250a        async (\n+\u250a   \u250a278\u250a          { targetChat }: { targetChat: Chat },\n+\u250a   \u250a279\u250a          args,\n+\u250a   \u250a280\u250a          { currentUser, injector }\n+\u250a   \u250a281\u250a        ) => {\n \u250a278\u250a282\u250a          if (!currentUser) return false;\n \u250a279\u250a283\u250a\n-\u250a280\u250a   \u250a          const { rows } = await pool.query(sql`\n-\u250a281\u250a   \u250a            SELECT * FROM chats_users\n-\u250a282\u250a   \u250a            WHERE chat_id = ${targetChat.id}\n-\u250a283\u250a   \u250a            AND user_id = ${currentUser.id}`);\n-\u250a284\u250a   \u250a\n-\u250a285\u250a   \u250a          return !!rows.length;\n+\u250a   \u250a284\u250a          return injector.get(Chats).isParticipant({\n+\u250a   \u250a285\u250a            chatId: targetChat.id,\n+\u250a   \u250a286\u250a            userId: currentUser.id,\n+\u250a   \u250a287\u250a          });\n \u250a286\u250a288\u250a        }\n \u250a287\u250a289\u250a      ),\n \u250a288\u250a290\u250a    },\n")),(0,s.kt)("h4",{id:"sharing-pubsub"},"Sharing PubSub"),(0,s.kt)("p",null,"One of things that are still in the context is ",(0,s.kt)("inlineCode",{parentName:"p"},"PubSub"),". Because we're moving an entire business logic into a separate layer and as part of GraphQL Module's providers we need to make sure that PubSub is accessible throug DI."),(0,s.kt)("p",null,"Let's register the PubSub and migrate resolvers:"),(0,s.kt)("h4",{id:"server-step-1316-move-pubsub-to-dependency-injection"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/ecb3c0a89d74b4dc2a026e3c0524aa293101a464"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 13.16: Move PubSub to Dependency Injection")),(0,s.kt)("h5",{id:"changed-contextts-2"},"Changed context.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,11 +1,9 @@\n-\u250a 1\u250a  \u250aimport { PubSub } from 'apollo-server-express';\n \u250a 2\u250a 1\u250aimport { ModuleContext } from '@graphql-modules/core';\n \u250a 3\u250a 2\u250aimport { User } from './db';\n \u250a 4\u250a 3\u250aimport { Response } from 'express';\n \u250a 5\u250a 4\u250aimport { PoolClient } from 'pg';\n \u250a 6\u250a 5\u250a\n \u250a 7\u250a 6\u250aexport type MyContext = {\n-\u250a 8\u250a  \u250a  pubsub: PubSub;\n \u250a 9\u250a 7\u250a  currentUser: User;\n \u250a10\u250a 8\u250a  res: Response;\n \u250a11\u250a 9\u250a  db: PoolClient;\n")),(0,s.kt)("h5",{id:"changed-moduleschatsindexts-13"},"Changed modules","/","chats","/","index.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -8,6 +8,7 @@\n \u250a 8\u250a 8\u250aimport { UnsplashApi } from './unsplash.api';\n \u250a 9\u250a 9\u250aimport { Users } from './../users/users.provider';\n \u250a10\u250a10\u250aimport { Chats } from './chats.provider';\n+\u250a  \u250a11\u250aimport { PubSub } from '../common/pubsub.provider';\n \u250a11\u250a12\u250a\n \u250a12\u250a13\u250aconst typeDefs = gql`\n \u250a13\u250a14\u250a  type Message {\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -128,7 +129,7 @@\n \u250a128\u250a129\u250a  },\n \u250a129\u250a130\u250a\n \u250a130\u250a131\u250a  Mutation: {\n-\u250a131\u250a   \u250a    async addMessage(root, { chatId, content }, { currentUser, pubsub, db }) {\n+\u250a   \u250a132\u250a    async addMessage(root, { chatId, content }, { currentUser, injector, db }) {\n \u250a132\u250a133\u250a      if (!currentUser) return null;\n \u250a133\u250a134\u250a\n \u250a134\u250a135\u250a      const { rows } = await db.query(sql`\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -139,14 +140,14 @@\n \u250a139\u250a140\u250a\n \u250a140\u250a141\u250a      const messageAdded = rows[0];\n \u250a141\u250a142\u250a\n-\u250a142\u250a   \u250a      pubsub.publish('messageAdded', {\n+\u250a   \u250a143\u250a      injector.get(PubSub).publish('messageAdded', {\n \u250a143\u250a144\u250a        messageAdded,\n \u250a144\u250a145\u250a      });\n \u250a145\u250a146\u250a\n \u250a146\u250a147\u250a      return messageAdded;\n \u250a147\u250a148\u250a    },\n \u250a148\u250a149\u250a\n-\u250a149\u250a   \u250a    async addChat(root, { recipientId }, { currentUser, pubsub, db }) {\n+\u250a   \u250a150\u250a    async addChat(root, { recipientId }, { currentUser, injector, db }) {\n \u250a150\u250a151\u250a      if (!currentUser) return null;\n \u250a151\u250a152\u250a\n \u250a152\u250a153\u250a      const { rows } = await db.query(sql`\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -184,7 +185,7 @@\n \u250a184\u250a185\u250a\n \u250a185\u250a186\u250a        await db.query('COMMIT');\n \u250a186\u250a187\u250a\n-\u250a187\u250a   \u250a        pubsub.publish('chatAdded', {\n+\u250a   \u250a188\u250a        injector.get(PubSub).publish('chatAdded', {\n \u250a188\u250a189\u250a          chatAdded,\n \u250a189\u250a190\u250a        });\n \u250a190\u250a191\u250a\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -195,7 +196,7 @@\n \u250a195\u250a196\u250a      }\n \u250a196\u250a197\u250a    },\n \u250a197\u250a198\u250a\n-\u250a198\u250a   \u250a    async removeChat(root, { chatId }, { currentUser, pubsub, db }) {\n+\u250a   \u250a199\u250a    async removeChat(root, { chatId }, { currentUser, injector, db }) {\n \u250a199\u250a200\u250a      if (!currentUser) return null;\n \u250a200\u250a201\u250a\n \u250a201\u250a202\u250a      try {\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -219,7 +220,7 @@\n \u250a219\u250a220\u250a          DELETE FROM chats WHERE chats.id = ${chatId}\n \u250a220\u250a221\u250a        `);\n \u250a221\u250a222\u250a\n-\u250a222\u250a   \u250a        pubsub.publish('chatRemoved', {\n+\u250a   \u250a223\u250a        injector.get(PubSub).publish('chatRemoved', {\n \u250a223\u250a224\u250a          chatRemoved: chat.id,\n \u250a224\u250a225\u250a          targetChat: chat,\n \u250a225\u250a226\u250a        });\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -237,7 +238,8 @@\n \u250a237\u250a238\u250a  Subscription: {\n \u250a238\u250a239\u250a    messageAdded: {\n \u250a239\u250a240\u250a      subscribe: withFilter(\n-\u250a240\u250a   \u250a        (root, args, { pubsub }) => pubsub.asyncIterator('messageAdded'),\n+\u250a   \u250a241\u250a        (root, args, { injector }) =>\n+\u250a   \u250a242\u250a          injector.get(PubSub).asyncIterator('messageAdded'),\n \u250a241\u250a243\u250a        async (\n \u250a242\u250a244\u250a          { messageAdded }: { messageAdded: Message },\n \u250a243\u250a245\u250a          args,\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -255,7 +257,8 @@\n \u250a255\u250a257\u250a\n \u250a256\u250a258\u250a    chatAdded: {\n \u250a257\u250a259\u250a      subscribe: withFilter(\n-\u250a258\u250a   \u250a        (root, args, { pubsub }) => pubsub.asyncIterator('chatAdded'),\n+\u250a   \u250a260\u250a        (root, args, { injector }) =>\n+\u250a   \u250a261\u250a          injector.get(PubSub).asyncIterator('chatAdded'),\n \u250a259\u250a262\u250a        async (\n \u250a260\u250a263\u250a          { chatAdded }: { chatAdded: Chat },\n \u250a261\u250a264\u250a          args,\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -273,7 +276,8 @@\n \u250a273\u250a276\u250a\n \u250a274\u250a277\u250a    chatRemoved: {\n \u250a275\u250a278\u250a      subscribe: withFilter(\n-\u250a276\u250a   \u250a        (root, args, { pubsub }) => pubsub.asyncIterator('chatRemoved'),\n+\u250a   \u250a279\u250a        (root, args, { injector }) =>\n+\u250a   \u250a280\u250a          injector.get(PubSub).asyncIterator('chatRemoved'),\n \u250a277\u250a281\u250a        async (\n \u250a278\u250a282\u250a          { targetChat }: { targetChat: Chat },\n \u250a279\u250a283\u250a          args,\n")),(0,s.kt)("h5",{id:"changed-modulescommonindexts-4"},"Changed modules","/","common","/","index.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,10 +1,12 @@\n \u250a 1\u250a 1\u250aimport { GraphQLModule } from '@graphql-modules/core';\n+\u250a  \u250a 2\u250aimport { ProviderScope } from '@graphql-modules/di';\n \u250a 2\u250a 3\u250aimport { gql } from 'apollo-server-express';\n \u250a 3\u250a 4\u250aimport { DateTimeResolver, URLResolver } from 'graphql-scalars';\n \u250a 4\u250a 5\u250aimport { Pool } from 'pg';\n \u250a 5\u250a 6\u250aimport { pool } from '../../db';\n \u250a 6\u250a 7\u250aimport { Resolvers } from '../../types/graphql';\n \u250a 7\u250a 8\u250aimport { Database } from './database.provider';\n+\u250a  \u250a 9\u250aimport { PubSub } from './pubsub.provider';\n \u250a 8\u250a10\u250a\n \u250a 9\u250a11\u250aconst { PostgresPubSub } = require('graphql-postgres-subscriptions');\n \u250a10\u250a12\u250a\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -47,6 +49,11 @@\n \u250a47\u250a49\u250a      provide: Pool,\n \u250a48\u250a50\u250a      useValue: pool,\n \u250a49\u250a51\u250a    },\n+\u250a  \u250a52\u250a    {\n+\u250a  \u250a53\u250a      provide: PubSub,\n+\u250a  \u250a54\u250a      scope: ProviderScope.Application,\n+\u250a  \u250a55\u250a      useValue: pubsub,\n+\u250a  \u250a56\u250a    },\n \u250a50\u250a57\u250a    Database,\n \u250a51\u250a58\u250a  ],\n \u250a52\u250a59\u250a  async context({ res, connection }) {\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -57,7 +64,6 @@\n \u250a57\u250a64\u250a    }\n \u250a58\u250a65\u250a\n \u250a59\u250a66\u250a    return {\n-\u250a60\u250a  \u250a      pubsub,\n \u250a61\u250a67\u250a      res,\n \u250a62\u250a68\u250a      db,\n \u250a63\u250a69\u250a    };\n")),(0,s.kt)("h5",{id:"added-modulescommonpubsubproviderts"},"Added modules","/","common","/","pubsub.provider.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1 @@\n+\u250a \u250a1\u250aexport { PubSub } from 'apollo-server-express';\n")),(0,s.kt)("p",null,"Now, we're going to use ",(0,s.kt)("inlineCode",{parentName:"p"},"PubSub")," within ",(0,s.kt)("inlineCode",{parentName:"p"},"Chats")," service:"),(0,s.kt)("h4",{id:"server-step-1317-migrate-addmessage-to-chats-provider"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/493e533400870b80dc4e78304a657d826342c22b"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 13.17: Migrate addMessage to Chats provider")),(0,s.kt)("h5",{id:"changed-moduleschatschatsproviderts-5"},"Changed modules","/","chats","/","chats.provider.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,12 +1,14 @@\n \u250a 1\u250a 1\u250aimport { Injectable, Inject, ProviderScope } from '@graphql-modules/di';\n \u250a 2\u250a 2\u250aimport sql from 'sql-template-strings';\n \u250a 3\u250a 3\u250aimport { Database } from '../common/database.provider';\n+\u250a  \u250a 4\u250aimport { PubSub } from '../common/pubsub.provider';\n \u250a 4\u250a 5\u250a\n \u250a 5\u250a 6\u250a@Injectable({\n \u250a 6\u250a 7\u250a  scope: ProviderScope.Session,\n \u250a 7\u250a 8\u250a})\n \u250a 8\u250a 9\u250aexport class Chats {\n \u250a 9\u250a10\u250a  @Inject() private db: Database;\n+\u250a  \u250a11\u250a  @Inject() private pubsub: PubSub;\n \u250a10\u250a12\u250a\n \u250a11\u250a13\u250a  async findChatsByUser(userId: string) {\n \u250a12\u250a14\u250a    const db = await this.db.getClient();\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -94,4 +96,29 @@\n \u250a 94\u250a 96\u250a\n \u250a 95\u250a 97\u250a    return !!rows.length;\n \u250a 96\u250a 98\u250a  }\n+\u250a   \u250a 99\u250a\n+\u250a   \u250a100\u250a  async addMessage({\n+\u250a   \u250a101\u250a    chatId,\n+\u250a   \u250a102\u250a    userId,\n+\u250a   \u250a103\u250a    content,\n+\u250a   \u250a104\u250a  }: {\n+\u250a   \u250a105\u250a    chatId: string;\n+\u250a   \u250a106\u250a    userId: string;\n+\u250a   \u250a107\u250a    content: string;\n+\u250a   \u250a108\u250a  }) {\n+\u250a   \u250a109\u250a    const db = await this.db.getClient();\n+\u250a   \u250a110\u250a    const { rows } = await db.query(sql`\n+\u250a   \u250a111\u250a      INSERT INTO messages(chat_id, sender_user_id, content)\n+\u250a   \u250a112\u250a      VALUES(${chatId}, ${userId}, ${content})\n+\u250a   \u250a113\u250a      RETURNING *\n+\u250a   \u250a114\u250a    `);\n+\u250a   \u250a115\u250a\n+\u250a   \u250a116\u250a    const messageAdded = rows[0];\n+\u250a   \u250a117\u250a\n+\u250a   \u250a118\u250a    this.pubsub.publish('messageAdded', {\n+\u250a   \u250a119\u250a      messageAdded,\n+\u250a   \u250a120\u250a    });\n+\u250a   \u250a121\u250a\n+\u250a   \u250a122\u250a    return messageAdded;\n+\u250a   \u250a123\u250a  }\n \u250a 97\u250a124\u250a}\n")),(0,s.kt)("h5",{id:"changed-moduleschatsindexts-14"},"Changed modules","/","chats","/","index.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -129,22 +129,12 @@\n \u250a129\u250a129\u250a  },\n \u250a130\u250a130\u250a\n \u250a131\u250a131\u250a  Mutation: {\n-\u250a132\u250a   \u250a    async addMessage(root, { chatId, content }, { currentUser, injector, db }) {\n+\u250a   \u250a132\u250a    async addMessage(root, { chatId, content }, { currentUser, injector }) {\n \u250a133\u250a133\u250a      if (!currentUser) return null;\n \u250a134\u250a134\u250a\n-\u250a135\u250a   \u250a      const { rows } = await db.query(sql`\n-\u250a136\u250a   \u250a        INSERT INTO messages(chat_id, sender_user_id, content)\n-\u250a137\u250a   \u250a        VALUES(${chatId}, ${currentUser.id}, ${content})\n-\u250a138\u250a   \u250a        RETURNING *\n-\u250a139\u250a   \u250a      `);\n-\u250a140\u250a   \u250a\n-\u250a141\u250a   \u250a      const messageAdded = rows[0];\n-\u250a142\u250a   \u250a\n-\u250a143\u250a   \u250a      injector.get(PubSub).publish('messageAdded', {\n-\u250a144\u250a   \u250a        messageAdded,\n-\u250a145\u250a   \u250a      });\n-\u250a146\u250a   \u250a\n-\u250a147\u250a   \u250a      return messageAdded;\n+\u250a   \u250a135\u250a      return injector\n+\u250a   \u250a136\u250a        .get(Chats)\n+\u250a   \u250a137\u250a        .addMessage({ chatId, content, userId: currentUser.id });\n \u250a148\u250a138\u250a    },\n \u250a149\u250a139\u250a\n \u250a150\u250a140\u250a    async addChat(root, { recipientId }, { currentUser, injector, db }) {\n")),(0,s.kt)("h4",{id:"server-step-1318-migrate-addchat-to-chats-provider"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/bbd4b61e2feb66f15cef233bb187841aac6b93cd"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 13.18: Migrate addChat to Chats provider")),(0,s.kt)("h5",{id:"changed-moduleschatschatsproviderts-6"},"Changed modules","/","chats","/","chats.provider.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -121,4 +121,58 @@\n \u250a121\u250a121\u250a\n \u250a122\u250a122\u250a    return messageAdded;\n \u250a123\u250a123\u250a  }\n+\u250a   \u250a124\u250a\n+\u250a   \u250a125\u250a  async addChat({\n+\u250a   \u250a126\u250a    userId,\n+\u250a   \u250a127\u250a    recipientId,\n+\u250a   \u250a128\u250a  }: {\n+\u250a   \u250a129\u250a    userId: string;\n+\u250a   \u250a130\u250a    recipientId: string;\n+\u250a   \u250a131\u250a  }) {\n+\u250a   \u250a132\u250a    const db = await this.db.getClient();\n+\u250a   \u250a133\u250a    const { rows } = await db.query(sql`\n+\u250a   \u250a134\u250a      SELECT chats.* FROM chats, (SELECT * FROM chats_users WHERE user_id = ${userId}) AS chats_of_current_user, chats_users\n+\u250a   \u250a135\u250a      WHERE chats_users.chat_id = chats_of_current_user.chat_id\n+\u250a   \u250a136\u250a      AND chats.id = chats_users.chat_id\n+\u250a   \u250a137\u250a      AND chats_users.user_id = ${recipientId}\n+\u250a   \u250a138\u250a    `);\n+\u250a   \u250a139\u250a\n+\u250a   \u250a140\u250a    // If there is already a chat between these two users, return it\n+\u250a   \u250a141\u250a    if (rows[0]) {\n+\u250a   \u250a142\u250a      return rows[0];\n+\u250a   \u250a143\u250a    }\n+\u250a   \u250a144\u250a\n+\u250a   \u250a145\u250a    try {\n+\u250a   \u250a146\u250a      await db.query('BEGIN');\n+\u250a   \u250a147\u250a\n+\u250a   \u250a148\u250a      const { rows } = await db.query(sql`\n+\u250a   \u250a149\u250a        INSERT INTO chats\n+\u250a   \u250a150\u250a        DEFAULT VALUES\n+\u250a   \u250a151\u250a        RETURNING *\n+\u250a   \u250a152\u250a      `);\n+\u250a   \u250a153\u250a\n+\u250a   \u250a154\u250a      const chatAdded = rows[0];\n+\u250a   \u250a155\u250a\n+\u250a   \u250a156\u250a      await db.query(sql`\n+\u250a   \u250a157\u250a        INSERT INTO chats_users(chat_id, user_id)\n+\u250a   \u250a158\u250a        VALUES(${chatAdded.id}, ${userId})\n+\u250a   \u250a159\u250a      `);\n+\u250a   \u250a160\u250a\n+\u250a   \u250a161\u250a      await db.query(sql`\n+\u250a   \u250a162\u250a        INSERT INTO chats_users(chat_id, user_id)\n+\u250a   \u250a163\u250a        VALUES(${chatAdded.id}, ${recipientId})\n+\u250a   \u250a164\u250a      `);\n+\u250a   \u250a165\u250a\n+\u250a   \u250a166\u250a      await db.query('COMMIT');\n+\u250a   \u250a167\u250a\n+\u250a   \u250a168\u250a      this.pubsub.publish('chatAdded', {\n+\u250a   \u250a169\u250a        chatAdded,\n+\u250a   \u250a170\u250a      });\n+\u250a   \u250a171\u250a\n+\u250a   \u250a172\u250a      return chatAdded;\n+\u250a   \u250a173\u250a    } catch (e) {\n+\u250a   \u250a174\u250a      await db.query('ROLLBACK');\n+\u250a   \u250a175\u250a      throw e;\n+\u250a   \u250a176\u250a    }\n+\u250a   \u250a177\u250a  }\n \u250a124\u250a178\u250a}\n")),(0,s.kt)("h5",{id:"changed-moduleschatsindexts-15"},"Changed modules","/","chats","/","index.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -137,53 +137,12 @@\n \u250a137\u250a137\u250a        .addMessage({ chatId, content, userId: currentUser.id });\n \u250a138\u250a138\u250a    },\n \u250a139\u250a139\u250a\n-\u250a140\u250a   \u250a    async addChat(root, { recipientId }, { currentUser, injector, db }) {\n+\u250a   \u250a140\u250a    async addChat(root, { recipientId }, { currentUser, injector }) {\n \u250a141\u250a141\u250a      if (!currentUser) return null;\n \u250a142\u250a142\u250a\n-\u250a143\u250a   \u250a      const { rows } = await db.query(sql`\n-\u250a144\u250a   \u250a        SELECT chats.* FROM chats, (SELECT * FROM chats_users WHERE user_id = ${currentUser.id}) AS chats_of_current_user, chats_users\n-\u250a145\u250a   \u250a        WHERE chats_users.chat_id = chats_of_current_user.chat_id\n-\u250a146\u250a   \u250a        AND chats.id = chats_users.chat_id\n-\u250a147\u250a   \u250a        AND chats_users.user_id = ${recipientId}\n-\u250a148\u250a   \u250a      `);\n-\u250a149\u250a   \u250a\n-\u250a150\u250a   \u250a      // If there is already a chat between these two users, return it\n-\u250a151\u250a   \u250a      if (rows[0]) {\n-\u250a152\u250a   \u250a        return rows[0];\n-\u250a153\u250a   \u250a      }\n-\u250a154\u250a   \u250a\n-\u250a155\u250a   \u250a      try {\n-\u250a156\u250a   \u250a        await db.query('BEGIN');\n-\u250a157\u250a   \u250a\n-\u250a158\u250a   \u250a        const { rows } = await db.query(sql`\n-\u250a159\u250a   \u250a          INSERT INTO chats\n-\u250a160\u250a   \u250a          DEFAULT VALUES\n-\u250a161\u250a   \u250a          RETURNING *\n-\u250a162\u250a   \u250a        `);\n-\u250a163\u250a   \u250a\n-\u250a164\u250a   \u250a        const chatAdded = rows[0];\n-\u250a165\u250a   \u250a\n-\u250a166\u250a   \u250a        await db.query(sql`\n-\u250a167\u250a   \u250a          INSERT INTO chats_users(chat_id, user_id)\n-\u250a168\u250a   \u250a          VALUES(${chatAdded.id}, ${currentUser.id})\n-\u250a169\u250a   \u250a        `);\n-\u250a170\u250a   \u250a\n-\u250a171\u250a   \u250a        await db.query(sql`\n-\u250a172\u250a   \u250a          INSERT INTO chats_users(chat_id, user_id)\n-\u250a173\u250a   \u250a          VALUES(${chatAdded.id}, ${recipientId})\n-\u250a174\u250a   \u250a        `);\n-\u250a175\u250a   \u250a\n-\u250a176\u250a   \u250a        await db.query('COMMIT');\n-\u250a177\u250a   \u250a\n-\u250a178\u250a   \u250a        injector.get(PubSub).publish('chatAdded', {\n-\u250a179\u250a   \u250a          chatAdded,\n-\u250a180\u250a   \u250a        });\n-\u250a181\u250a   \u250a\n-\u250a182\u250a   \u250a        return chatAdded;\n-\u250a183\u250a   \u250a      } catch (e) {\n-\u250a184\u250a   \u250a        await db.query('ROLLBACK');\n-\u250a185\u250a   \u250a        throw e;\n-\u250a186\u250a   \u250a      }\n+\u250a   \u250a143\u250a      return injector\n+\u250a   \u250a144\u250a        .get(Chats)\n+\u250a   \u250a145\u250a        .addChat({ recipientId, userId: currentUser.id });\n \u250a187\u250a146\u250a    },\n \u250a188\u250a147\u250a\n \u250a189\u250a148\u250a    async removeChat(root, { chatId }, { currentUser, injector, db }) {\n")),(0,s.kt)("h5",{id:"changed-modulesusersusersproviderts-2"},"Changed modules","/","users","/","users.provider.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -3,7 +3,8 @@\n \u250a 3\u250a 3\u250aimport bcrypt from 'bcrypt';\n \u250a 4\u250a 4\u250aimport { Database } from '../common/database.provider';\n \u250a 5\u250a 5\u250a\n-\u250a 6\u250a  \u250aconst DEFAULT_PROFILE_PIC = 'https://raw.githubusercontent.com/Urigo/WhatsApp-Clone-Client-React/legacy/public/assets/default-profile-pic.jpg'\n+\u250a  \u250a 6\u250aconst DEFAULT_PROFILE_PIC =\n+\u250a  \u250a 7\u250a  'https://raw.githubusercontent.com/Urigo/WhatsApp-Clone-Client-React/legacy/public/assets/default-profile-pic.jpg';\n \u250a 7\u250a 8\u250a\n \u250a 8\u250a 9\u250a@Injectable({\n \u250a 9\u250a10\u250a  scope: ProviderScope.Session,\n")),(0,s.kt)("h4",{id:"server-step-1319-migrate-removechat-to-chats-provider"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/4bca8eb22a0d5384ac617c16cd33ea2e84c52070"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 13.19: Migrate removeChat to Chats provider")),(0,s.kt)("h5",{id:"changed-moduleschatschatsproviderts-7"},"Changed modules","/","chats","/","chats.provider.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -175,4 +175,42 @@\n \u250a175\u250a175\u250a      throw e;\n \u250a176\u250a176\u250a    }\n \u250a177\u250a177\u250a  }\n+\u250a   \u250a178\u250a\n+\u250a   \u250a179\u250a  async removeChat({ chatId, userId }: { chatId: string; userId: string }) {\n+\u250a   \u250a180\u250a    const db = await this.db.getClient();\n+\u250a   \u250a181\u250a\n+\u250a   \u250a182\u250a    try {\n+\u250a   \u250a183\u250a      await db.query('BEGIN');\n+\u250a   \u250a184\u250a\n+\u250a   \u250a185\u250a      const { rows } = await db.query(sql`\n+\u250a   \u250a186\u250a        SELECT chats.* FROM chats, chats_users\n+\u250a   \u250a187\u250a        WHERE id = ${chatId}\n+\u250a   \u250a188\u250a        AND chats.id = chats_users.chat_id\n+\u250a   \u250a189\u250a        AND chats_users.user_id = ${userId}\n+\u250a   \u250a190\u250a      `);\n+\u250a   \u250a191\u250a\n+\u250a   \u250a192\u250a      const chat = rows[0];\n+\u250a   \u250a193\u250a\n+\u250a   \u250a194\u250a      if (!chat) {\n+\u250a   \u250a195\u250a        await db.query('ROLLBACK');\n+\u250a   \u250a196\u250a        return null;\n+\u250a   \u250a197\u250a      }\n+\u250a   \u250a198\u250a\n+\u250a   \u250a199\u250a      await db.query(sql`\n+\u250a   \u250a200\u250a        DELETE FROM chats WHERE chats.id = ${chatId}\n+\u250a   \u250a201\u250a      `);\n+\u250a   \u250a202\u250a\n+\u250a   \u250a203\u250a      this.pubsub.publish('chatRemoved', {\n+\u250a   \u250a204\u250a        chatRemoved: chat.id,\n+\u250a   \u250a205\u250a        targetChat: chat,\n+\u250a   \u250a206\u250a      });\n+\u250a   \u250a207\u250a\n+\u250a   \u250a208\u250a      await db.query('COMMIT');\n+\u250a   \u250a209\u250a\n+\u250a   \u250a210\u250a      return chatId;\n+\u250a   \u250a211\u250a    } catch (e) {\n+\u250a   \u250a212\u250a      await db.query('ROLLBACK');\n+\u250a   \u250a213\u250a      throw e;\n+\u250a   \u250a214\u250a    }\n+\u250a   \u250a215\u250a  }\n \u250a178\u250a216\u250a}\n")),(0,s.kt)("h5",{id:"changed-moduleschatsindexts-16"},"Changed modules","/","chats","/","index.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -145,42 +145,10 @@\n \u250a145\u250a145\u250a        .addChat({ recipientId, userId: currentUser.id });\n \u250a146\u250a146\u250a    },\n \u250a147\u250a147\u250a\n-\u250a148\u250a   \u250a    async removeChat(root, { chatId }, { currentUser, injector, db }) {\n+\u250a   \u250a148\u250a    async removeChat(root, { chatId }, { currentUser, injector }) {\n \u250a149\u250a149\u250a      if (!currentUser) return null;\n \u250a150\u250a150\u250a\n-\u250a151\u250a   \u250a      try {\n-\u250a152\u250a   \u250a        await db.query('BEGIN');\n-\u250a153\u250a   \u250a\n-\u250a154\u250a   \u250a        const { rows } = await db.query(sql`\n-\u250a155\u250a   \u250a          SELECT chats.* FROM chats, chats_users\n-\u250a156\u250a   \u250a          WHERE id = ${chatId}\n-\u250a157\u250a   \u250a          AND chats.id = chats_users.chat_id\n-\u250a158\u250a   \u250a          AND chats_users.user_id = ${currentUser.id}\n-\u250a159\u250a   \u250a        `);\n-\u250a160\u250a   \u250a\n-\u250a161\u250a   \u250a        const chat = rows[0];\n-\u250a162\u250a   \u250a\n-\u250a163\u250a   \u250a        if (!chat) {\n-\u250a164\u250a   \u250a          await db.query('ROLLBACK');\n-\u250a165\u250a   \u250a          return null;\n-\u250a166\u250a   \u250a        }\n-\u250a167\u250a   \u250a\n-\u250a168\u250a   \u250a        await db.query(sql`\n-\u250a169\u250a   \u250a          DELETE FROM chats WHERE chats.id = ${chatId}\n-\u250a170\u250a   \u250a        `);\n-\u250a171\u250a   \u250a\n-\u250a172\u250a   \u250a        injector.get(PubSub).publish('chatRemoved', {\n-\u250a173\u250a   \u250a          chatRemoved: chat.id,\n-\u250a174\u250a   \u250a          targetChat: chat,\n-\u250a175\u250a   \u250a        });\n-\u250a176\u250a   \u250a\n-\u250a177\u250a   \u250a        await db.query('COMMIT');\n-\u250a178\u250a   \u250a\n-\u250a179\u250a   \u250a        return chatId;\n-\u250a180\u250a   \u250a      } catch (e) {\n-\u250a181\u250a   \u250a        await db.query('ROLLBACK');\n-\u250a182\u250a   \u250a        throw e;\n-\u250a183\u250a   \u250a      }\n+\u250a   \u250a151\u250a      return injector.get(Chats).removeChat({ chatId, userId: currentUser.id });\n \u250a184\u250a152\u250a    },\n \u250a185\u250a153\u250a  },\n")),(0,s.kt)("h4",{id:"implementing-auth-service"},"Implementing Auth service"),(0,s.kt)("p",null,'The last missing piece of our "context migration" journey is ',(0,s.kt)("inlineCode",{parentName:"p"},"currentUser")," object. We're going to define the ",(0,s.kt)("inlineCode",{parentName:"p"},"Auth")," service."),(0,s.kt)("h4",{id:"server-step-1320-implement-auth-provider-with-currentuser-method"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/35007a0f2deddb66174c6c64c6e26b6729cebb5f"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 13.20: Implement Auth provider with currentUser method")),(0,s.kt)("h5",{id:"added-modulesusersauthproviderts"},"Added modules","/","users","/","auth.provider.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,30 @@\n+\u250a  \u250a 1\u250aimport { Injectable, Inject, ProviderScope } from '@graphql-modules/di';\n+\u250a  \u250a 2\u250aimport { ModuleSessionInfo } from '@graphql-modules/core';\n+\u250a  \u250a 3\u250aimport jwt from 'jsonwebtoken';\n+\u250a  \u250a 4\u250aimport { secret } from '../../env';\n+\u250a  \u250a 5\u250aimport { Users } from './users.provider';\n+\u250a  \u250a 6\u250aimport { User } from '../../db';\n+\u250a  \u250a 7\u250a\n+\u250a  \u250a 8\u250a@Injectable({\n+\u250a  \u250a 9\u250a  scope: ProviderScope.Session,\n+\u250a  \u250a10\u250a})\n+\u250a  \u250a11\u250aexport class Auth {\n+\u250a  \u250a12\u250a  @Inject() private users: Users;\n+\u250a  \u250a13\u250a  @Inject() private module: ModuleSessionInfo;\n+\u250a  \u250a14\u250a\n+\u250a  \u250a15\u250a  private get req() {\n+\u250a  \u250a16\u250a    return this.module.session.req || this.module.session.request;\n+\u250a  \u250a17\u250a  }\n+\u250a  \u250a18\u250a\n+\u250a  \u250a19\u250a  async currentUser(): Promise<User | null> {\n+\u250a  \u250a20\u250a    if (this.req.cookies.authToken) {\n+\u250a  \u250a21\u250a      const username = jwt.verify(this.req.cookies.authToken, secret) as string;\n+\u250a  \u250a22\u250a\n+\u250a  \u250a23\u250a      if (username) {\n+\u250a  \u250a24\u250a        return this.users.findByUsername(username);\n+\u250a  \u250a25\u250a      }\n+\u250a  \u250a26\u250a    }\n+\u250a  \u250a27\u250a\n+\u250a  \u250a28\u250a    return null;\n+\u250a  \u250a29\u250a  }\n+\u250a  \u250a30\u250a}\n")),(0,s.kt)("p",null,"It still needs to be registered and few resolvers in Users module have to be migrated:"),(0,s.kt)("h4",{id:"server-step-1320-implement-auth-provider-with-currentuser-method-1"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/35007a0f2deddb66174c6c64c6e26b6729cebb5f"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 13.20: Implement Auth provider with currentUser method")),(0,s.kt)("h5",{id:"changed-contextts-3"},"Changed context.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,10 +1,8 @@\n \u250a 1\u250a 1\u250aimport { ModuleContext } from '@graphql-modules/core';\n-\u250a 2\u250a  \u250aimport { User } from './db';\n \u250a 3\u250a 2\u250aimport { Response } from 'express';\n \u250a 4\u250a 3\u250aimport { PoolClient } from 'pg';\n \u250a 5\u250a 4\u250a\n \u250a 6\u250a 5\u250aexport type MyContext = {\n-\u250a 7\u250a  \u250a  currentUser: User;\n \u250a 8\u250a 6\u250a  res: Response;\n \u250a 9\u250a 7\u250a  db: PoolClient;\n \u250a10\u250a 8\u250a} & ModuleContext;\n")),(0,s.kt)("h5",{id:"changed-modulesusersindexts-4"},"Changed modules","/","users","/","index.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,6 +1,5 @@\n \u250a1\u250a1\u250aimport { GraphQLModule } from '@graphql-modules/core';\n \u250a2\u250a2\u250aimport { gql } from 'apollo-server-express';\n-\u250a3\u250a \u250aimport cookie from 'cookie';\n \u250a4\u250a3\u250aimport sql from 'sql-template-strings';\n \u250a5\u250a4\u250aimport bcrypt from 'bcrypt';\n \u250a6\u250a5\u250aimport jwt from 'jsonwebtoken';\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -10,6 +9,7 @@\n \u250a10\u250a 9\u250aimport { validateLength, validatePassword } from '../../validators';\n \u250a11\u250a10\u250aimport { Resolvers } from '../../types/graphql';\n \u250a12\u250a11\u250aimport { Users } from './users.provider';\n+\u250a  \u250a12\u250aimport { Auth } from './auth.provider';\n \u250a13\u250a13\u250a\n \u250a14\u250a14\u250aconst typeDefs = gql`\n \u250a15\u250a15\u250a  type User {\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -36,10 +36,12 @@\n \u250a36\u250a36\u250a\n \u250a37\u250a37\u250aconst resolvers: Resolvers = {\n \u250a38\u250a38\u250a  Query: {\n-\u250a39\u250a  \u250a    me(root, args, { currentUser }) {\n-\u250a40\u250a  \u250a      return currentUser || null;\n+\u250a  \u250a39\u250a    me(root, args, { injector }) {\n+\u250a  \u250a40\u250a      return injector.get(Auth).currentUser();\n \u250a41\u250a41\u250a    },\n-\u250a42\u250a  \u250a    async users(root, args, { currentUser, injector }) {\n+\u250a  \u250a42\u250a    async users(root, args, { injector }) {\n+\u250a  \u250a43\u250a      const currentUser = await injector.get(Auth).currentUser();\n+\u250a  \u250a44\u250a\n \u250a43\u250a45\u250a      if (!currentUser) return [];\n \u250a44\u250a46\u250a\n \u250a45\u250a47\u250a      return injector.get(Users).findAllExcept(currentUser.id);\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -100,33 +102,5 @@\n \u250a100\u250a102\u250a  typeDefs,\n \u250a101\u250a103\u250a  resolvers,\n \u250a102\u250a104\u250a  imports: () => [commonModule],\n-\u250a103\u250a   \u250a  providers: () => [Users],\n-\u250a104\u250a   \u250a  async context(session) {\n-\u250a105\u250a   \u250a    let currentUser;\n-\u250a106\u250a   \u250a\n-\u250a107\u250a   \u250a    // Access the request object\n-\u250a108\u250a   \u250a    let req = session.connection\n-\u250a109\u250a   \u250a      ? session.connection.context.request\n-\u250a110\u250a   \u250a      : session.req;\n-\u250a111\u250a   \u250a\n-\u250a112\u250a   \u250a    // It's subscription\n-\u250a113\u250a   \u250a    if (session.connection) {\n-\u250a114\u250a   \u250a      req.cookies = cookie.parse(req.headers.cookie || '');\n-\u250a115\u250a   \u250a    }\n-\u250a116\u250a   \u250a\n-\u250a117\u250a   \u250a    if (req.cookies.authToken) {\n-\u250a118\u250a   \u250a      const username = jwt.verify(req.cookies.authToken, secret) as string;\n-\u250a119\u250a   \u250a\n-\u250a120\u250a   \u250a      if (username) {\n-\u250a121\u250a   \u250a        const { rows } = await pool.query(\n-\u250a122\u250a   \u250a          sql`SELECT * FROM users WHERE username = ${username}`\n-\u250a123\u250a   \u250a        );\n-\u250a124\u250a   \u250a        currentUser = rows[0];\n-\u250a125\u250a   \u250a      }\n-\u250a126\u250a   \u250a    }\n-\u250a127\u250a   \u250a\n-\u250a128\u250a   \u250a    return {\n-\u250a129\u250a   \u250a      currentUser,\n-\u250a130\u250a   \u250a    };\n-\u250a131\u250a   \u250a  },\n+\u250a   \u250a105\u250a  providers: () => [Users, Auth],\n \u250a132\u250a106\u250a});\n")),(0,s.kt)("p",null,"Now let's use the Auth service in Chats:"),(0,s.kt)("h4",{id:"server-step-1320-implement-auth-provider-with-currentuser-method-2"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/35007a0f2deddb66174c6c64c6e26b6729cebb5f"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 13.20: Implement Auth provider with currentUser method")),(0,s.kt)("h5",{id:"changed-moduleschatsindexts-17"},"Changed modules","/","chats","/","index.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -7,6 +7,7 @@\n \u250a 7\u250a 7\u250aimport { Resolvers } from '../../types/graphql';\n \u250a 8\u250a 8\u250aimport { UnsplashApi } from './unsplash.api';\n \u250a 9\u250a 9\u250aimport { Users } from './../users/users.provider';\n+\u250a  \u250a10\u250aimport { Auth } from './../users/auth.provider';\n \u250a10\u250a11\u250aimport { Chats } from './chats.provider';\n \u250a11\u250a12\u250aimport { PubSub } from '../common/pubsub.provider';\n \u250a12\u250a13\u250a\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -69,13 +70,16 @@\n \u250a69\u250a70\u250a      });\n \u250a70\u250a71\u250a    },\n \u250a71\u250a72\u250a\n-\u250a72\u250a  \u250a    isMine(message, args, { currentUser }) {\n-\u250a73\u250a  \u250a      return message.sender_user_id === currentUser.id;\n+\u250a  \u250a73\u250a    async isMine(message, args, { injector }) {\n+\u250a  \u250a74\u250a      const currentUser = await injector.get(Auth).currentUser();\n+\u250a  \u250a75\u250a      return message.sender_user_id === currentUser!.id;\n \u250a74\u250a76\u250a    },\n \u250a75\u250a77\u250a  },\n \u250a76\u250a78\u250a\n \u250a77\u250a79\u250a  Chat: {\n-\u250a78\u250a  \u250a    async name(chat, args, { currentUser, injector }) {\n+\u250a  \u250a80\u250a    async name(chat, args, { injector }) {\n+\u250a  \u250a81\u250a      const currentUser = await injector.get(Auth).currentUser();\n+\u250a  \u250a82\u250a\n \u250a79\u250a83\u250a      if (!currentUser) return null;\n \u250a80\u250a84\u250a\n \u250a81\u250a85\u250a      const participant = await injector.get(Chats).firstRecipient({\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -86,7 +90,9 @@\n \u250a86\u250a90\u250a      return participant ? participant.name : null;\n \u250a87\u250a91\u250a    },\n \u250a88\u250a92\u250a\n-\u250a89\u250a  \u250a    async picture(chat, args, { currentUser, db, injector }) {\n+\u250a  \u250a93\u250a    async picture(chat, args, { injector }) {\n+\u250a  \u250a94\u250a      const currentUser = await injector.get(Auth).currentUser();\n+\u250a  \u250a95\u250a\n \u250a90\u250a96\u250a      if (!currentUser) return null;\n \u250a91\u250a97\u250a\n \u250a92\u250a98\u250a      const participant = await injector.get(Chats).firstRecipient({\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -113,13 +119,17 @@\n \u250a113\u250a119\u250a  },\n \u250a114\u250a120\u250a\n \u250a115\u250a121\u250a  Query: {\n-\u250a116\u250a   \u250a    async chats(root, args, { currentUser, injector }) {\n+\u250a   \u250a122\u250a    async chats(root, args, { injector }) {\n+\u250a   \u250a123\u250a      const currentUser = await injector.get(Auth).currentUser();\n+\u250a   \u250a124\u250a\n \u250a117\u250a125\u250a      if (!currentUser) return [];\n \u250a118\u250a126\u250a\n \u250a119\u250a127\u250a      return injector.get(Chats).findChatsByUser(currentUser.id);\n \u250a120\u250a128\u250a    },\n \u250a121\u250a129\u250a\n-\u250a122\u250a   \u250a    async chat(root, { chatId }, { currentUser, injector }) {\n+\u250a   \u250a130\u250a    async chat(root, { chatId }, { injector }) {\n+\u250a   \u250a131\u250a      const currentUser = await injector.get(Auth).currentUser();\n+\u250a   \u250a132\u250a\n \u250a123\u250a133\u250a      if (!currentUser) return null;\n \u250a124\u250a134\u250a\n \u250a125\u250a135\u250a      return injector\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -129,7 +139,9 @@\n \u250a129\u250a139\u250a  },\n \u250a130\u250a140\u250a\n \u250a131\u250a141\u250a  Mutation: {\n-\u250a132\u250a   \u250a    async addMessage(root, { chatId, content }, { currentUser, injector }) {\n+\u250a   \u250a142\u250a    async addMessage(root, { chatId, content }, { injector }) {\n+\u250a   \u250a143\u250a      const currentUser = await injector.get(Auth).currentUser();\n+\u250a   \u250a144\u250a\n \u250a133\u250a145\u250a      if (!currentUser) return null;\n \u250a134\u250a146\u250a\n \u250a135\u250a147\u250a      return injector\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -137,7 +149,9 @@\n \u250a137\u250a149\u250a        .addMessage({ chatId, content, userId: currentUser.id });\n \u250a138\u250a150\u250a    },\n \u250a139\u250a151\u250a\n-\u250a140\u250a   \u250a    async addChat(root, { recipientId }, { currentUser, injector }) {\n+\u250a   \u250a152\u250a    async addChat(root, { recipientId }, { injector }) {\n+\u250a   \u250a153\u250a      const currentUser = await injector.get(Auth).currentUser();\n+\u250a   \u250a154\u250a\n \u250a141\u250a155\u250a      if (!currentUser) return null;\n \u250a142\u250a156\u250a\n \u250a143\u250a157\u250a      return injector\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -145,7 +159,9 @@\n \u250a145\u250a159\u250a        .addChat({ recipientId, userId: currentUser.id });\n \u250a146\u250a160\u250a    },\n \u250a147\u250a161\u250a\n-\u250a148\u250a   \u250a    async removeChat(root, { chatId }, { currentUser, injector }) {\n+\u250a   \u250a162\u250a    async removeChat(root, { chatId }, { injector }) {\n+\u250a   \u250a163\u250a      const currentUser = await injector.get(Auth).currentUser();\n+\u250a   \u250a164\u250a\n \u250a149\u250a165\u250a      if (!currentUser) return null;\n \u250a150\u250a166\u250a\n \u250a151\u250a167\u250a      return injector.get(Chats).removeChat({ chatId, userId: currentUser.id });\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -160,8 +176,10 @@\n \u250a160\u250a176\u250a        async (\n \u250a161\u250a177\u250a          { messageAdded }: { messageAdded: Message },\n \u250a162\u250a178\u250a          args,\n-\u250a163\u250a   \u250a          { currentUser, injector }\n+\u250a   \u250a179\u250a          { injector }\n \u250a164\u250a180\u250a        ) => {\n+\u250a   \u250a181\u250a          const currentUser = await injector.get(Auth).currentUser();\n+\u250a   \u250a182\u250a\n \u250a165\u250a183\u250a          if (!currentUser) return false;\n \u250a166\u250a184\u250a\n \u250a167\u250a185\u250a          return injector.get(Chats).isParticipant({\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -176,11 +194,9 @@\n \u250a176\u250a194\u250a      subscribe: withFilter(\n \u250a177\u250a195\u250a        (root, args, { injector }) =>\n \u250a178\u250a196\u250a          injector.get(PubSub).asyncIterator('chatAdded'),\n-\u250a179\u250a   \u250a        async (\n-\u250a180\u250a   \u250a          { chatAdded }: { chatAdded: Chat },\n-\u250a181\u250a   \u250a          args,\n-\u250a182\u250a   \u250a          { currentUser, injector }\n-\u250a183\u250a   \u250a        ) => {\n+\u250a   \u250a197\u250a        async ({ chatAdded }: { chatAdded: Chat }, args, { injector }) => {\n+\u250a   \u250a198\u250a          const currentUser = await injector.get(Auth).currentUser();\n+\u250a   \u250a199\u250a\n \u250a184\u250a200\u250a          if (!currentUser) return false;\n \u250a185\u250a201\u250a\n \u250a186\u250a202\u250a          return injector.get(Chats).isParticipant({\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -195,11 +211,9 @@\n \u250a195\u250a211\u250a      subscribe: withFilter(\n \u250a196\u250a212\u250a        (root, args, { injector }) =>\n \u250a197\u250a213\u250a          injector.get(PubSub).asyncIterator('chatRemoved'),\n-\u250a198\u250a   \u250a        async (\n-\u250a199\u250a   \u250a          { targetChat }: { targetChat: Chat },\n-\u250a200\u250a   \u250a          args,\n-\u250a201\u250a   \u250a          { currentUser, injector }\n-\u250a202\u250a   \u250a        ) => {\n+\u250a   \u250a214\u250a        async ({ targetChat }: { targetChat: Chat }, args, { injector }) => {\n+\u250a   \u250a215\u250a          const currentUser = await injector.get(Auth).currentUser();\n+\u250a   \u250a216\u250a\n \u250a203\u250a217\u250a          if (!currentUser) return false;\n \u250a204\u250a218\u250a\n \u250a205\u250a219\u250a          return injector.get(Chats).isParticipant({\n")),(0,s.kt)("p",null,"Because we no longer need ",(0,s.kt)("inlineCode",{parentName:"p"},"db")," instance in the context, let's remove it:"),(0,s.kt)("h4",{id:"server-step-1321-remove-db-from-context"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/9f9d61cbffce88ff1261266326803df118814f42"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 13.21: Remove db from context")),(0,s.kt)("h5",{id:"changed-contextts-4"},"Changed context.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,8 +1,6 @@\n \u250a1\u250a1\u250aimport { ModuleContext } from '@graphql-modules/core';\n \u250a2\u250a2\u250aimport { Response } from 'express';\n-\u250a3\u250a \u250aimport { PoolClient } from 'pg';\n \u250a4\u250a3\u250a\n \u250a5\u250a4\u250aexport type MyContext = {\n \u250a6\u250a5\u250a  res: Response;\n-\u250a7\u250a \u250a  db: PoolClient;\n \u250a8\u250a6\u250a} & ModuleContext;\n")),(0,s.kt)("h5",{id:"changed-moduleschatsindexts-18"},"Changed modules","/","chats","/","index.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,9 +1,8 @@\n \u250a1\u250a1\u250aimport { GraphQLModule } from '@graphql-modules/core';\n \u250a2\u250a2\u250aimport { gql, withFilter } from 'apollo-server-express';\n-\u250a3\u250a \u250aimport sql from 'sql-template-strings';\n \u250a4\u250a3\u250aimport commonModule from '../common';\n \u250a5\u250a4\u250aimport usersModule from '../users';\n-\u250a6\u250a \u250aimport { Message, Chat, pool } from '../../db';\n+\u250a \u250a5\u250aimport { Message, Chat } from '../../db';\n \u250a7\u250a6\u250aimport { Resolvers } from '../../types/graphql';\n \u250a8\u250a7\u250aimport { UnsplashApi } from './unsplash.api';\n \u250a9\u250a8\u250aimport { Users } from './../users/users.provider';\n")),(0,s.kt)("h5",{id:"changed-modulescommonindexts-5"},"Changed modules","/","common","/","index.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -56,16 +56,9 @@\n \u250a56\u250a56\u250a    },\n \u250a57\u250a57\u250a    Database,\n \u250a58\u250a58\u250a  ],\n-\u250a59\u250a  \u250a  async context({ res, connection }) {\n-\u250a60\u250a  \u250a    let db;\n-\u250a61\u250a  \u250a\n-\u250a62\u250a  \u250a    if (!connection) {\n-\u250a63\u250a  \u250a      db = await pool.connect();\n-\u250a64\u250a  \u250a    }\n-\u250a65\u250a  \u250a\n+\u250a  \u250a59\u250a  async context({ res }) {\n \u250a66\u250a60\u250a    return {\n \u250a67\u250a61\u250a      res,\n-\u250a68\u250a  \u250a      db,\n \u250a69\u250a62\u250a    };\n \u250a70\u250a63\u250a  },\n \u250a71\u250a64\u250a});\n")),(0,s.kt)("h5",{id:"changed-modulesusersindexts-5"},"Changed modules","/","users","/","index.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,11 +1,9 @@\n \u250a 1\u250a 1\u250aimport { GraphQLModule } from '@graphql-modules/core';\n \u250a 2\u250a 2\u250aimport { gql } from 'apollo-server-express';\n-\u250a 3\u250a  \u250aimport sql from 'sql-template-strings';\n \u250a 4\u250a 3\u250aimport bcrypt from 'bcrypt';\n \u250a 5\u250a 4\u250aimport jwt from 'jsonwebtoken';\n \u250a 6\u250a 5\u250aimport commonModule from '../common';\n \u250a 7\u250a 6\u250aimport { secret, expiration } from '../../env';\n-\u250a 8\u250a  \u250aimport { pool } from '../../db';\n \u250a 9\u250a 7\u250aimport { validateLength, validatePassword } from '../../validators';\n \u250a10\u250a 8\u250aimport { Resolvers } from '../../types/graphql';\n \u250a11\u250a 9\u250aimport { Users } from './users.provider';\n")),(0,s.kt)("p",null,"Besides the ",(0,s.kt)("inlineCode",{parentName:"p"},"currentUser")," method we're going to have two more, one to sign in and the other to sign up:"),(0,s.kt)("h4",{id:"server-step-1322-move-signup-logic-to-auth-provider"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/c763dc895b1e936973d63dd6924bbf7829398d2e"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 13.22: Move signUp logic to Auth provider")),(0,s.kt)("h5",{id:"changed-modulesusersauthproviderts"},"Changed modules","/","users","/","auth.provider.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -2,6 +2,7 @@\n \u250a2\u250a2\u250aimport { ModuleSessionInfo } from '@graphql-modules/core';\n \u250a3\u250a3\u250aimport jwt from 'jsonwebtoken';\n \u250a4\u250a4\u250aimport { secret } from '../../env';\n+\u250a \u250a5\u250aimport { validateLength, validatePassword } from '../../validators';\n \u250a5\u250a6\u250aimport { Users } from './users.provider';\n \u250a6\u250a7\u250aimport { User } from '../../db';\n \u250a7\u250a8\u250a\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -16,6 +17,38 @@\n \u250a16\u250a17\u250a    return this.module.session.req || this.module.session.request;\n \u250a17\u250a18\u250a  }\n \u250a18\u250a19\u250a\n+\u250a  \u250a20\u250a  async signUp({\n+\u250a  \u250a21\u250a    name,\n+\u250a  \u250a22\u250a    password,\n+\u250a  \u250a23\u250a    passwordConfirm,\n+\u250a  \u250a24\u250a    username,\n+\u250a  \u250a25\u250a  }: {\n+\u250a  \u250a26\u250a    name: string;\n+\u250a  \u250a27\u250a    password: string;\n+\u250a  \u250a28\u250a    passwordConfirm: string;\n+\u250a  \u250a29\u250a    username: string;\n+\u250a  \u250a30\u250a  }) {\n+\u250a  \u250a31\u250a    validateLength('req.name', name, 3, 50);\n+\u250a  \u250a32\u250a    validateLength('req.username', username, 3, 18);\n+\u250a  \u250a33\u250a    validatePassword('req.password', password);\n+\u250a  \u250a34\u250a\n+\u250a  \u250a35\u250a    if (password !== passwordConfirm) {\n+\u250a  \u250a36\u250a      throw Error(\"req.password and req.passwordConfirm don't match\");\n+\u250a  \u250a37\u250a    }\n+\u250a  \u250a38\u250a\n+\u250a  \u250a39\u250a    const existingUser = await this.users.findByUsername(username);\n+\u250a  \u250a40\u250a\n+\u250a  \u250a41\u250a    if (existingUser) {\n+\u250a  \u250a42\u250a      throw Error('username already exists');\n+\u250a  \u250a43\u250a    }\n+\u250a  \u250a44\u250a\n+\u250a  \u250a45\u250a    return this.users.newUser({\n+\u250a  \u250a46\u250a      username,\n+\u250a  \u250a47\u250a      name,\n+\u250a  \u250a48\u250a      password,\n+\u250a  \u250a49\u250a    });\n+\u250a  \u250a50\u250a  }\n+\u250a  \u250a51\u250a\n \u250a19\u250a52\u250a  async currentUser(): Promise<User | null> {\n \u250a20\u250a53\u250a    if (this.req.cookies.authToken) {\n \u250a21\u250a54\u250a      const username = jwt.verify(this.req.cookies.authToken, secret) as string;\n")),(0,s.kt)("h5",{id:"changed-modulesusersindexts-6"},"Changed modules","/","users","/","index.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -4,7 +4,6 @@\n \u250a 4\u250a 4\u250aimport jwt from 'jsonwebtoken';\n \u250a 5\u250a 5\u250aimport commonModule from '../common';\n \u250a 6\u250a 6\u250aimport { secret, expiration } from '../../env';\n-\u250a 7\u250a  \u250aimport { validateLength, validatePassword } from '../../validators';\n \u250a 8\u250a 7\u250aimport { Resolvers } from '../../types/graphql';\n \u250a 9\u250a 8\u250aimport { Users } from './users.provider';\n \u250a10\u250a 9\u250aimport { Auth } from './auth.provider';\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -71,26 +70,9 @@\n \u250a71\u250a70\u250a      { name, username, password, passwordConfirm },\n \u250a72\u250a71\u250a      { injector }\n \u250a73\u250a72\u250a    ) {\n-\u250a74\u250a  \u250a      validateLength('req.name', name, 3, 50);\n-\u250a75\u250a  \u250a      validateLength('req.username', username, 3, 18);\n-\u250a76\u250a  \u250a      validatePassword('req.password', password);\n-\u250a77\u250a  \u250a\n-\u250a78\u250a  \u250a      if (password !== passwordConfirm) {\n-\u250a79\u250a  \u250a        throw Error(\"req.password and req.passwordConfirm don't match\");\n-\u250a80\u250a  \u250a      }\n-\u250a81\u250a  \u250a\n-\u250a82\u250a  \u250a      const existingUser = await injector.get(Users).findByUsername(username);\n-\u250a83\u250a  \u250a      if (existingUser) {\n-\u250a84\u250a  \u250a        throw Error('username already exists');\n-\u250a85\u250a  \u250a      }\n-\u250a86\u250a  \u250a\n-\u250a87\u250a  \u250a      const createdUser = await injector.get(Users).newUser({\n-\u250a88\u250a  \u250a        username,\n-\u250a89\u250a  \u250a        password,\n-\u250a90\u250a  \u250a        name,\n-\u250a91\u250a  \u250a      });\n-\u250a92\u250a  \u250a\n-\u250a93\u250a  \u250a      return createdUser;\n+\u250a  \u250a73\u250a      return injector\n+\u250a  \u250a74\u250a        .get(Auth)\n+\u250a  \u250a75\u250a        .signUp({ name, username, password, passwordConfirm });\n \u250a94\u250a76\u250a    },\n \u250a95\u250a77\u250a  },\n \u250a96\u250a78\u250a};\n")),(0,s.kt)("h4",{id:"server-step-1323-move-signin-logic-to-auth-provider"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/356dd2d3a0a722a2304bd2292994e617e28a7c42"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 13.23: Move signIn logic to Auth provider")),(0,s.kt)("h5",{id:"changed-contextts-5"},"Changed context.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,6 +1,3 @@\n \u250a1\u250a1\u250aimport { ModuleContext } from '@graphql-modules/core';\n-\u250a2\u250a \u250aimport { Response } from 'express';\n \u250a3\u250a2\u250a\n-\u250a4\u250a \u250aexport type MyContext = {\n-\u250a5\u250a \u250a  res: Response;\n-\u250a6\u250a \u250a} & ModuleContext;\n+\u250a \u250a3\u250aexport type MyContext = ModuleContext;\n")),(0,s.kt)("h5",{id:"changed-modulescommonindexts-6"},"Changed modules","/","common","/","index.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -56,9 +56,4 @@\n \u250a56\u250a56\u250a    },\n \u250a57\u250a57\u250a    Database,\n \u250a58\u250a58\u250a  ],\n-\u250a59\u250a  \u250a  async context({ res }) {\n-\u250a60\u250a  \u250a    return {\n-\u250a61\u250a  \u250a      res,\n-\u250a62\u250a  \u250a    };\n-\u250a63\u250a  \u250a  },\n \u250a64\u250a59\u250a});\n")),(0,s.kt)("h5",{id:"changed-modulesusersauthproviderts-1"},"Changed modules","/","users","/","auth.provider.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,7 +1,9 @@\n \u250a1\u250a1\u250aimport { Injectable, Inject, ProviderScope } from '@graphql-modules/di';\n \u250a2\u250a2\u250aimport { ModuleSessionInfo } from '@graphql-modules/core';\n+\u250a \u250a3\u250aimport { Response } from 'express';\n+\u250a \u250a4\u250aimport bcrypt from 'bcrypt';\n \u250a3\u250a5\u250aimport jwt from 'jsonwebtoken';\n-\u250a4\u250a \u250aimport { secret } from '../../env';\n+\u250a \u250a6\u250aimport { secret, expiration } from '../../env';\n \u250a5\u250a7\u250aimport { validateLength, validatePassword } from '../../validators';\n \u250a6\u250a8\u250aimport { Users } from './users.provider';\n \u250a7\u250a9\u250aimport { User } from '../../db';\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -17,6 +19,30 @@\n \u250a17\u250a19\u250a    return this.module.session.req || this.module.session.request;\n \u250a18\u250a20\u250a  }\n \u250a19\u250a21\u250a\n+\u250a  \u250a22\u250a  private get res(): Response {\n+\u250a  \u250a23\u250a    return this.module.session.res;\n+\u250a  \u250a24\u250a  }\n+\u250a  \u250a25\u250a\n+\u250a  \u250a26\u250a  async signIn({ username, password }: { username: string; password: string }) {\n+\u250a  \u250a27\u250a    const user = await this.users.findByUsername(username);\n+\u250a  \u250a28\u250a\n+\u250a  \u250a29\u250a    if (!user) {\n+\u250a  \u250a30\u250a      throw new Error('user not found');\n+\u250a  \u250a31\u250a    }\n+\u250a  \u250a32\u250a\n+\u250a  \u250a33\u250a    const passwordsMatch = bcrypt.compareSync(password, user.password);\n+\u250a  \u250a34\u250a\n+\u250a  \u250a35\u250a    if (!passwordsMatch) {\n+\u250a  \u250a36\u250a      throw new Error('password is incorrect');\n+\u250a  \u250a37\u250a    }\n+\u250a  \u250a38\u250a\n+\u250a  \u250a39\u250a    const authToken = jwt.sign(username, secret);\n+\u250a  \u250a40\u250a\n+\u250a  \u250a41\u250a    this.res.cookie('authToken', authToken, { maxAge: expiration });\n+\u250a  \u250a42\u250a\n+\u250a  \u250a43\u250a    return user;\n+\u250a  \u250a44\u250a  }\n+\u250a  \u250a45\u250a\n \u250a20\u250a46\u250a  async signUp({\n \u250a21\u250a47\u250a    name,\n \u250a22\u250a48\u250a    password,\n")),(0,s.kt)("h5",{id:"changed-modulesusersindexts-7"},"Changed modules","/","users","/","index.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,9 +1,6 @@\n \u250a1\u250a1\u250aimport { GraphQLModule } from '@graphql-modules/core';\n \u250a2\u250a2\u250aimport { gql } from 'apollo-server-express';\n-\u250a3\u250a \u250aimport bcrypt from 'bcrypt';\n-\u250a4\u250a \u250aimport jwt from 'jsonwebtoken';\n \u250a5\u250a3\u250aimport commonModule from '../common';\n-\u250a6\u250a \u250aimport { secret, expiration } from '../../env';\n \u250a7\u250a4\u250aimport { Resolvers } from '../../types/graphql';\n \u250a8\u250a5\u250aimport { Users } from './users.provider';\n \u250a9\u250a6\u250aimport { Auth } from './auth.provider';\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -45,24 +42,8 @@\n \u250a45\u250a42\u250a    },\n \u250a46\u250a43\u250a  },\n \u250a47\u250a44\u250a  Mutation: {\n-\u250a48\u250a  \u250a    async signIn(root, { username, password }, { injector, res }) {\n-\u250a49\u250a  \u250a      const user = await injector.get(Users).findByUsername(username);\n-\u250a50\u250a  \u250a\n-\u250a51\u250a  \u250a      if (!user) {\n-\u250a52\u250a  \u250a        throw new Error('user not found');\n-\u250a53\u250a  \u250a      }\n-\u250a54\u250a  \u250a\n-\u250a55\u250a  \u250a      const passwordsMatch = bcrypt.compareSync(password, user.password);\n-\u250a56\u250a  \u250a\n-\u250a57\u250a  \u250a      if (!passwordsMatch) {\n-\u250a58\u250a  \u250a        throw new Error('password is incorrect');\n-\u250a59\u250a  \u250a      }\n-\u250a60\u250a  \u250a\n-\u250a61\u250a  \u250a      const authToken = jwt.sign(username, secret);\n-\u250a62\u250a  \u250a\n-\u250a63\u250a  \u250a      res.cookie('authToken', authToken, { maxAge: expiration });\n-\u250a64\u250a  \u250a\n-\u250a65\u250a  \u250a      return user;\n+\u250a  \u250a45\u250a    async signIn(root, { username, password }, { injector }) {\n+\u250a  \u250a46\u250a      return injector.get(Auth).signIn({ username, password });\n \u250a66\u250a47\u250a    },\n \u250a67\u250a48\u250a\n \u250a68\u250a49\u250a    async signUp(\n")),(0,s.kt)("h4",{id:"exposing-server-instance"},"Exposing server instance"),(0,s.kt)("p",null,"If you would run ",(0,s.kt)("inlineCode",{parentName:"p"},"yarn test")," right now, you will see a lot of errors, every test will fail.\nThat's because we changed our setup but we didn't adjusted tests."),(0,s.kt)("p",null,"We're going to change the setup of tests as well so whenever we do something on server it won't affect them.\nInstead of exposing schema and context as we did before, we're going to base the tests on a ready to use ApolloServer instance."),(0,s.kt)("p",null,"In order to achieve it, we need to separate ApolloServer from other server related logic."),(0,s.kt)("h4",{id:"server-step-1324-move-apolloserver-and-rootmodule-into-a-separate-file"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/ed63afea4f0b35217e71068889630c06e77fc8ec"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 13.24: Move ApolloServer and RootModule into a separate file")),(0,s.kt)("h5",{id:"changed-indexts-4"},"Changed index.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,35 +1,7 @@\n-\u250a 1\u250a  \u250aimport 'reflect-metadata';\n-\u250a 2\u250a  \u250aimport { ApolloServer } from 'apollo-server-express';\n-\u250a 3\u250a  \u250aimport { GraphQLModule } from '@graphql-modules/core';\n-\u250a 4\u250a  \u250aimport cookie from 'cookie';\n \u250a 5\u250a 1\u250aimport http from 'http';\n \u250a 6\u250a 2\u250aimport { app } from './app';\n \u250a 7\u250a 3\u250aimport { origin, port } from './env';\n-\u250a 8\u250a  \u250a\n-\u250a 9\u250a  \u250aimport usersModule from './modules/users';\n-\u250a10\u250a  \u250aimport chatsModule from './modules/chats';\n-\u250a11\u250a  \u250a\n-\u250a12\u250a  \u250aexport const rootModule = new GraphQLModule({\n-\u250a13\u250a  \u250a  name: 'root',\n-\u250a14\u250a  \u250a  imports: [usersModule, chatsModule],\n-\u250a15\u250a  \u250a});\n-\u250a16\u250a  \u250a\n-\u250a17\u250a  \u250aconst server = new ApolloServer({\n-\u250a18\u250a  \u250a  schema: rootModule.schema,\n-\u250a19\u250a  \u250a  context: (session: any) => {\n-\u250a20\u250a  \u250a    if (session.connection) {\n-\u250a21\u250a  \u250a      const req = session.connection.context.session.request;\n-\u250a22\u250a  \u250a      const cookies = req.headers.cookie;\n-\u250a23\u250a  \u250a\n-\u250a24\u250a  \u250a      if (cookies) {\n-\u250a25\u250a  \u250a        req.cookies = cookie.parse(cookies);\n-\u250a26\u250a  \u250a      }\n-\u250a27\u250a  \u250a    }\n-\u250a28\u250a  \u250a\n-\u250a29\u250a  \u250a    return rootModule.context(session);\n-\u250a30\u250a  \u250a  },\n-\u250a31\u250a  \u250a  subscriptions: rootModule.subscriptions,\n-\u250a32\u250a  \u250a});\n+\u250a  \u250a 4\u250aimport { server } from './server';\n \u250a33\u250a 5\u250a\n \u250a34\u250a 6\u250aserver.applyMiddleware({\n \u250a35\u250a 7\u250a  app,\n")),(0,s.kt)("h5",{id:"added-serverts"},"Added server.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,29 @@\n+\u250a  \u250a 1\u250aimport 'reflect-metadata';\n+\u250a  \u250a 2\u250aimport { ApolloServer } from 'apollo-server-express';\n+\u250a  \u250a 3\u250aimport { GraphQLModule } from '@graphql-modules/core';\n+\u250a  \u250a 4\u250aimport cookie from 'cookie';\n+\u250a  \u250a 5\u250a\n+\u250a  \u250a 6\u250aimport usersModule from './modules/users';\n+\u250a  \u250a 7\u250aimport chatsModule from './modules/chats';\n+\u250a  \u250a 8\u250a\n+\u250a  \u250a 9\u250aexport const rootModule = new GraphQLModule({\n+\u250a  \u250a10\u250a  name: 'root',\n+\u250a  \u250a11\u250a  imports: [usersModule, chatsModule],\n+\u250a  \u250a12\u250a});\n+\u250a  \u250a13\u250a\n+\u250a  \u250a14\u250aconst server = new ApolloServer({\n+\u250a  \u250a15\u250a  schema: rootModule.schema,\n+\u250a  \u250a16\u250a  context: (session: any) => {\n+\u250a  \u250a17\u250a    if (session.connection) {\n+\u250a  \u250a18\u250a      const req = session.connection.context.session.request;\n+\u250a  \u250a19\u250a      const cookies = req.headers.cookie;\n+\u250a  \u250a20\u250a\n+\u250a  \u250a21\u250a      if (cookies) {\n+\u250a  \u250a22\u250a        req.cookies = cookie.parse(cookies);\n+\u250a  \u250a23\u250a      }\n+\u250a  \u250a24\u250a    }\n+\u250a  \u250a25\u250a\n+\u250a  \u250a26\u250a    return rootModule.context(session);\n+\u250a  \u250a27\u250a  },\n+\u250a  \u250a28\u250a  subscriptions: rootModule.subscriptions,\n+\u250a  \u250a29\u250a});\n")),(0,s.kt)("p",null,"There's one thing that changed and might break our tests, this line fix it:"),(0,s.kt)("h4",{id:"server-step-1325-export-server-instance"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/06b38bccc03a02eff6112410b6d4ccc8fe8ebb8d"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 13.25: Export server instance")),(0,s.kt)("h5",{id:"changed-serverts"},"Changed server.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -11,7 +11,7 @@\n \u250a11\u250a11\u250a  imports: [usersModule, chatsModule],\n \u250a12\u250a12\u250a});\n \u250a13\u250a13\u250a\n-\u250a14\u250a  \u250aconst server = new ApolloServer({\n+\u250a  \u250a14\u250aexport const server = new ApolloServer({\n \u250a15\u250a15\u250a  schema: rootModule.schema,\n \u250a16\u250a16\u250a  context: (session: any) => {\n \u250a17\u250a17\u250a    if (session.connection) {\n")),(0,s.kt)("p",null,"Remember when I said about benefits of Dependency Injection? Here's one of them.\nWe create a function that overwrites the ",(0,s.kt)("inlineCode",{parentName:"p"},"currentUser")," method so it always returns a specific user."),(0,s.kt)("h4",{id:"server-step-1326-define-mocked-version-of-auth-provider"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/1d21fa5e2eea329b8429de1bf8c1137d700ba488"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 13.26: Define mocked version of Auth provider")),(0,s.kt)("h5",{id:"added-testsmocksauthproviderts"},"Added tests","/","mocks","/","auth.provider.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,21 @@\n+\u250a  \u250a 1\u250aimport sql from 'sql-template-strings';\n+\u250a  \u250a 2\u250aimport { Auth } from './../../modules/users/auth.provider';\n+\u250a  \u250a 3\u250aimport usersModule from './../../modules/users';\n+\u250a  \u250a 4\u250aimport { pool } from '../../db';\n+\u250a  \u250a 5\u250a\n+\u250a  \u250a 6\u250aexport function mockAuth(userId: number) {\n+\u250a  \u250a 7\u250a  class AuthMock extends Auth {\n+\u250a  \u250a 8\u250a    async currentUser() {\n+\u250a  \u250a 9\u250a      const { rows } = await pool.query(\n+\u250a  \u250a10\u250a        sql`SELECT * FROM users WHERE id = ${userId}`\n+\u250a  \u250a11\u250a      );\n+\u250a  \u250a12\u250a      return rows[0];\n+\u250a  \u250a13\u250a    }\n+\u250a  \u250a14\u250a  }\n+\u250a  \u250a15\u250a\n+\u250a  \u250a16\u250a  usersModule.injector.provide({\n+\u250a  \u250a17\u250a    provide: Auth,\n+\u250a  \u250a18\u250a    useClass: AuthMock,\n+\u250a  \u250a19\u250a    overwrite: true,\n+\u250a  \u250a20\u250a  });\n+\u250a  \u250a21\u250a}\n")),(0,s.kt)("p",null,"Let's now migrate all tests and see how easier it is now to manage those. Because we use ApolloServer's instance, we don't need to understand how it's implemented."),(0,s.kt)("h4",{id:"server-step-1327-adjust-tests"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/ee0e1b5d9dcdd1df9f699113232f5c9c7515ec49"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 13.27: Adjust tests")),(0,s.kt)("h5",{id:"changed-testsmutationsaddchattestts"},"Changed tests","/","mutations","/","addChat.test.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,28 +1,14 @@\n \u250a 1\u250a 1\u250aimport { createTestClient } from 'apollo-server-testing';\n-\u250a 2\u250a  \u250aimport { ApolloServer, PubSub, gql } from 'apollo-server-express';\n-\u250a 3\u250a  \u250aimport { rootModule } from '../../index';\n-\u250a 4\u250a  \u250aimport { resetDb, pool } from '../../db';\n-\u250a 5\u250a  \u250aimport sql from 'sql-template-strings';\n-\u250a 6\u250a  \u250aimport { MyContext } from '../../context';\n+\u250a  \u250a 2\u250aimport { gql } from 'apollo-server-express';\n+\u250a  \u250a 3\u250aimport { server } from '../../server';\n+\u250a  \u250a 4\u250aimport { resetDb } from '../../db';\n+\u250a  \u250a 5\u250aimport { mockAuth } from '../mocks/auth.provider';\n \u250a 7\u250a 6\u250a\n \u250a 8\u250a 7\u250adescribe('Mutation.addChat', () => {\n \u250a 9\u250a 8\u250a  beforeEach(resetDb);\n \u250a10\u250a 9\u250a\n \u250a11\u250a10\u250a  it('creates a new chat between current user and specified recipient', async () => {\n-\u250a12\u250a  \u250a    const { rows } = await pool.query(sql`SELECT * FROM users WHERE id = 2`);\n-\u250a13\u250a  \u250a    const currentUser = rows[0];\n-\u250a14\u250a  \u250a    const server = new ApolloServer({\n-\u250a15\u250a  \u250a      schema: rootModule.schema,\n-\u250a16\u250a  \u250a      context: async () => ({\n-\u250a17\u250a  \u250a        pubsub: new PubSub(),\n-\u250a18\u250a  \u250a        currentUser,\n-\u250a19\u250a  \u250a        db: await pool.connect(),\n-\u250a20\u250a  \u250a      }),\n-\u250a21\u250a  \u250a      formatResponse: (res: any, { context }: any) => {\n-\u250a22\u250a  \u250a        context.db.release();\n-\u250a23\u250a  \u250a        return res;\n-\u250a24\u250a  \u250a      },\n-\u250a25\u250a  \u250a    });\n+\u250a  \u250a11\u250a    mockAuth(2);\n \u250a26\u250a12\u250a\n \u250a27\u250a13\u250a    const { query, mutate } = createTestClient(server);\n \u250a28\u250a14\u250a\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -66,20 +52,7 @@\n \u250a66\u250a52\u250a  });\n \u250a67\u250a53\u250a\n \u250a68\u250a54\u250a  it('returns the existing chat if so', async () => {\n-\u250a69\u250a  \u250a    const { rows } = await pool.query(sql`SELECT * FROM users WHERE id = 1`);\n-\u250a70\u250a  \u250a    const currentUser = rows[0];\n-\u250a71\u250a  \u250a    const server = new ApolloServer({\n-\u250a72\u250a  \u250a      schema: rootModule.schema,\n-\u250a73\u250a  \u250a      context: async () => ({\n-\u250a74\u250a  \u250a        pubsub: new PubSub(),\n-\u250a75\u250a  \u250a        currentUser,\n-\u250a76\u250a  \u250a        db: await pool.connect(),\n-\u250a77\u250a  \u250a      }),\n-\u250a78\u250a  \u250a      formatResponse: (res: any, { context }: any) => {\n-\u250a79\u250a  \u250a        context.db.release();\n-\u250a80\u250a  \u250a        return res;\n-\u250a81\u250a  \u250a      },\n-\u250a82\u250a  \u250a    });\n+\u250a  \u250a55\u250a    mockAuth(1);\n \u250a83\u250a56\u250a\n \u250a84\u250a57\u250a    const { query, mutate } = createTestClient(server);\n \u250a85\u250a58\u250a\n")),(0,s.kt)("h5",{id:"changed-testsmutationsaddmessagetestts"},"Changed tests","/","mutations","/","addMessage.test.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,28 +1,14 @@\n \u250a 1\u250a 1\u250aimport { createTestClient } from 'apollo-server-testing';\n-\u250a 2\u250a  \u250aimport { ApolloServer, PubSub, gql } from 'apollo-server-express';\n-\u250a 3\u250a  \u250aimport { rootModule } from '../../index';\n-\u250a 4\u250a  \u250aimport { resetDb, pool } from '../../db';\n-\u250a 5\u250a  \u250aimport sql from 'sql-template-strings';\n-\u250a 6\u250a  \u250aimport { MyContext } from '../../context';\n+\u250a  \u250a 2\u250aimport { gql } from 'apollo-server-express';\n+\u250a  \u250a 3\u250aimport { server } from '../../server';\n+\u250a  \u250a 4\u250aimport { resetDb } from '../../db';\n+\u250a  \u250a 5\u250aimport { mockAuth } from '../mocks/auth.provider';\n \u250a 7\u250a 6\u250a\n \u250a 8\u250a 7\u250adescribe('Mutation.addMessage', () => {\n \u250a 9\u250a 8\u250a  beforeEach(resetDb);\n \u250a10\u250a 9\u250a\n \u250a11\u250a10\u250a  it('should add message to specified chat', async () => {\n-\u250a12\u250a  \u250a    const { rows } = await pool.query(sql`SELECT * FROM users WHERE id = 1`);\n-\u250a13\u250a  \u250a    const currentUser = rows[0];\n-\u250a14\u250a  \u250a    const server = new ApolloServer({\n-\u250a15\u250a  \u250a      schema: rootModule.schema,\n-\u250a16\u250a  \u250a      context: async () => ({\n-\u250a17\u250a  \u250a        pubsub: new PubSub(),\n-\u250a18\u250a  \u250a        currentUser,\n-\u250a19\u250a  \u250a        db: await pool.connect(),\n-\u250a20\u250a  \u250a      }),\n-\u250a21\u250a  \u250a      formatResponse: (res: any, { context }: any) => {\n-\u250a22\u250a  \u250a        context.db.release();\n-\u250a23\u250a  \u250a        return res;\n-\u250a24\u250a  \u250a      },\n-\u250a25\u250a  \u250a    });\n+\u250a  \u250a11\u250a    mockAuth(1);\n \u250a26\u250a12\u250a\n \u250a27\u250a13\u250a    const { query, mutate } = createTestClient(server);\n \u250a28\u250a14\u250a\n")),(0,s.kt)("h5",{id:"changed-testsmutationsremovechattestts"},"Changed tests","/","mutations","/","removeChat.test.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,28 +1,14 @@\n \u250a 1\u250a 1\u250aimport { createTestClient } from 'apollo-server-testing';\n-\u250a 2\u250a  \u250aimport { ApolloServer, PubSub, gql } from 'apollo-server-express';\n-\u250a 3\u250a  \u250aimport { rootModule } from '../../index';\n-\u250a 4\u250a  \u250aimport { resetDb, pool } from '../../db';\n-\u250a 5\u250a  \u250aimport sql from 'sql-template-strings';\n-\u250a 6\u250a  \u250aimport { MyContext } from '../../context';\n+\u250a  \u250a 2\u250aimport { gql } from 'apollo-server-express';\n+\u250a  \u250a 3\u250aimport { server } from '../../server';\n+\u250a  \u250a 4\u250aimport { resetDb } from '../../db';\n+\u250a  \u250a 5\u250aimport { mockAuth } from '../mocks/auth.provider';\n \u250a 7\u250a 6\u250a\n \u250a 8\u250a 7\u250adescribe('Mutation.removeChat', () => {\n \u250a 9\u250a 8\u250a  beforeEach(resetDb);\n \u250a10\u250a 9\u250a\n \u250a11\u250a10\u250a  it('removes chat by id', async () => {\n-\u250a12\u250a  \u250a    const { rows } = await pool.query(sql`SELECT * FROM users WHERE id = 1`);\n-\u250a13\u250a  \u250a    const currentUser = rows[0];\n-\u250a14\u250a  \u250a    const server = new ApolloServer({\n-\u250a15\u250a  \u250a      schema: rootModule.schema,\n-\u250a16\u250a  \u250a      context: async () => ({\n-\u250a17\u250a  \u250a        pubsub: new PubSub(),\n-\u250a18\u250a  \u250a        currentUser,\n-\u250a19\u250a  \u250a        db: await pool.connect(),\n-\u250a20\u250a  \u250a      }),\n-\u250a21\u250a  \u250a      formatResponse: (res: any, { context }: any) => {\n-\u250a22\u250a  \u250a        context.db.release();\n-\u250a23\u250a  \u250a        return res;\n-\u250a24\u250a  \u250a      },\n-\u250a25\u250a  \u250a    });\n+\u250a  \u250a11\u250a    mockAuth(1);\n \u250a26\u250a12\u250a\n \u250a27\u250a13\u250a    const { query, mutate } = createTestClient(server);\n \u250a28\u250a14\u250a\n")),(0,s.kt)("h5",{id:"changed-testsqueriesgetchattestts"},"Changed tests","/","queries","/","getChat.test.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,27 +1,14 @@\n \u250a 1\u250a 1\u250aimport { createTestClient } from 'apollo-server-testing';\n-\u250a 2\u250a  \u250aimport { ApolloServer, gql } from 'apollo-server-express';\n-\u250a 3\u250a  \u250aimport { rootModule } from '../../index';\n-\u250a 4\u250a  \u250aimport { pool, resetDb } from '../../db';\n-\u250a 5\u250a  \u250aimport sql from 'sql-template-strings';\n-\u250a 6\u250a  \u250aimport { MyContext } from '../../context';\n+\u250a  \u250a 2\u250aimport { gql } from 'apollo-server-express';\n+\u250a  \u250a 3\u250aimport { server } from '../../server';\n+\u250a  \u250a 4\u250aimport { resetDb } from '../../db';\n+\u250a  \u250a 5\u250aimport { mockAuth } from '../mocks/auth.provider';\n \u250a 7\u250a 6\u250a\n \u250a 8\u250a 7\u250adescribe('Query.chat', () => {\n \u250a 9\u250a 8\u250a  beforeEach(resetDb);\n \u250a10\u250a 9\u250a\n \u250a11\u250a10\u250a  it('should fetch specified chat', async () => {\n-\u250a12\u250a  \u250a    const { rows } = await pool.query(sql`SELECT * FROM users WHERE id = 1`);\n-\u250a13\u250a  \u250a    const currentUser = rows[0];\n-\u250a14\u250a  \u250a    const server = new ApolloServer({\n-\u250a15\u250a  \u250a      schema: rootModule.schema,\n-\u250a16\u250a  \u250a      context: async () => ({\n-\u250a17\u250a  \u250a        currentUser,\n-\u250a18\u250a  \u250a        db: await pool.connect(),\n-\u250a19\u250a  \u250a      }),\n-\u250a20\u250a  \u250a      formatResponse: (res: any, { context }: any) => {\n-\u250a21\u250a  \u250a        context.db.release();\n-\u250a22\u250a  \u250a        return res;\n-\u250a23\u250a  \u250a      },\n-\u250a24\u250a  \u250a    });\n+\u250a  \u250a11\u250a    mockAuth(1);\n \u250a25\u250a12\u250a\n \u250a26\u250a13\u250a    const { query } = createTestClient(server);\n \u250a27\u250a14\u250a\n")),(0,s.kt)("h5",{id:"changed-testsqueriesgetchatstestts"},"Changed tests","/","queries","/","getChats.test.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,27 +1,14 @@\n \u250a 1\u250a 1\u250aimport { createTestClient } from 'apollo-server-testing';\n-\u250a 2\u250a  \u250aimport { ApolloServer, gql } from 'apollo-server-express';\n-\u250a 3\u250a  \u250aimport { rootModule } from '../../index';\n-\u250a 4\u250a  \u250aimport { pool, resetDb } from '../../db';\n-\u250a 5\u250a  \u250aimport sql from 'sql-template-strings';\n-\u250a 6\u250a  \u250aimport { MyContext } from '../../context';\n+\u250a  \u250a 2\u250aimport { gql } from 'apollo-server-express';\n+\u250a  \u250a 3\u250aimport { server } from '../../server';\n+\u250a  \u250a 4\u250aimport { resetDb } from '../../db';\n+\u250a  \u250a 5\u250aimport { mockAuth } from '../mocks/auth.provider';\n \u250a 7\u250a 6\u250a\n \u250a 8\u250a 7\u250adescribe('Query.chats', () => {\n \u250a 9\u250a 8\u250a  beforeEach(resetDb);\n \u250a10\u250a 9\u250a\n \u250a11\u250a10\u250a  it('should fetch all chats', async () => {\n-\u250a12\u250a  \u250a    const { rows } = await pool.query(sql`SELECT * FROM users WHERE id = 1`);\n-\u250a13\u250a  \u250a    const currentUser = rows[0];\n-\u250a14\u250a  \u250a    const server = new ApolloServer({\n-\u250a15\u250a  \u250a      schema: rootModule.schema,\n-\u250a16\u250a  \u250a      context: async () => ({\n-\u250a17\u250a  \u250a        currentUser,\n-\u250a18\u250a  \u250a        db: await pool.connect(),\n-\u250a19\u250a  \u250a      }),\n-\u250a20\u250a  \u250a      formatResponse: (res: any, { context }: any) => {\n-\u250a21\u250a  \u250a        context.db.release();\n-\u250a22\u250a  \u250a        return res;\n-\u250a23\u250a  \u250a      },\n-\u250a24\u250a  \u250a    });\n+\u250a  \u250a11\u250a    mockAuth(1);\n \u250a25\u250a12\u250a\n \u250a26\u250a13\u250a    const { query } = createTestClient(server);\n \u250a27\u250a14\u250a\n")),(0,s.kt)("h5",{id:"changed-testsqueriesgetmetestts"},"Changed tests","/","queries","/","getMe.test.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,25 +1,14 @@\n \u250a 1\u250a 1\u250aimport { createTestClient } from 'apollo-server-testing';\n-\u250a 2\u250a  \u250aimport { ApolloServer, gql } from 'apollo-server-express';\n-\u250a 3\u250a  \u250aimport { rootModule } from '../../index';\n-\u250a 4\u250a  \u250aimport { pool } from '../../db';\n-\u250a 5\u250a  \u250aimport sql from 'sql-template-strings';\n-\u250a 6\u250a  \u250aimport { MyContext } from '../../context';\n+\u250a  \u250a 2\u250aimport { gql } from 'apollo-server-express';\n+\u250a  \u250a 3\u250aimport { server } from '../../server';\n+\u250a  \u250a 4\u250aimport { resetDb } from '../../db';\n+\u250a  \u250a 5\u250aimport { mockAuth } from '../mocks/auth.provider';\n \u250a 7\u250a 6\u250a\n \u250a 8\u250a 7\u250adescribe('Query.me', () => {\n+\u250a  \u250a 8\u250a  beforeEach(resetDb);\n+\u250a  \u250a 9\u250a\n \u250a 9\u250a10\u250a  it('should fetch current user', async () => {\n-\u250a10\u250a  \u250a    const { rows } = await pool.query(sql`SELECT * FROM users WHERE id = 1`);\n-\u250a11\u250a  \u250a    const currentUser = rows[0];\n-\u250a12\u250a  \u250a    const server = new ApolloServer({\n-\u250a13\u250a  \u250a      schema: rootModule.schema,\n-\u250a14\u250a  \u250a      context: async () => ({\n-\u250a15\u250a  \u250a        currentUser,\n-\u250a16\u250a  \u250a        db: await pool.connect(),\n-\u250a17\u250a  \u250a      }),\n-\u250a18\u250a  \u250a      formatResponse: (res: any, { context }: any) => {\n-\u250a19\u250a  \u250a        context.db.release();\n-\u250a20\u250a  \u250a        return res;\n-\u250a21\u250a  \u250a      },\n-\u250a22\u250a  \u250a    });\n+\u250a  \u250a11\u250a    mockAuth(1);\n \u250a23\u250a12\u250a\n \u250a24\u250a13\u250a    const { query } = createTestClient(server);\n \u250a25\u250a14\u250a\n")),(0,s.kt)("h5",{id:"changed-testsqueriesgetuserstestts"},"Changed tests","/","queries","/","getUsers.test.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,28 +1,14 @@\n \u250a 1\u250a 1\u250aimport { createTestClient } from 'apollo-server-testing';\n-\u250a 2\u250a  \u250aimport { ApolloServer, gql } from 'apollo-server-express';\n-\u250a 3\u250a  \u250aimport { rootModule } from '../../index';\n-\u250a 4\u250a  \u250aimport { pool } from '../../db';\n-\u250a 5\u250a  \u250aimport sql from 'sql-template-strings';\n-\u250a 6\u250a  \u250aimport { MyContext } from '../../context';\n+\u250a  \u250a 2\u250aimport { gql } from 'apollo-server-express';\n+\u250a  \u250a 3\u250aimport { server } from '../../server';\n+\u250a  \u250a 4\u250aimport { resetDb } from '../../db';\n+\u250a  \u250a 5\u250aimport { mockAuth } from '../mocks/auth.provider';\n \u250a 7\u250a 6\u250a\n \u250a 8\u250a 7\u250adescribe('Query.getUsers', () => {\n+\u250a  \u250a 8\u250a  beforeEach(resetDb);\n+\u250a  \u250a 9\u250a\n \u250a 9\u250a10\u250a  it('should fetch all users except the one signed-in', async () => {\n-\u250a10\u250a  \u250a    const firstUserQuery = await pool.query(\n-\u250a11\u250a  \u250a      sql`SELECT * FROM users WHERE id = 1`\n-\u250a12\u250a  \u250a    );\n-\u250a13\u250a  \u250a    let currentUser = firstUserQuery.rows[0];\n-\u250a14\u250a  \u250a    const db = await pool.connect();\n-\u250a15\u250a  \u250a    const server = new ApolloServer({\n-\u250a16\u250a  \u250a      schema: rootModule.schema,\n-\u250a17\u250a  \u250a      context: async () => ({\n-\u250a18\u250a  \u250a        currentUser,\n-\u250a19\u250a  \u250a        db: await pool.connect(),\n-\u250a20\u250a  \u250a      }),\n-\u250a21\u250a  \u250a      formatResponse: (res: any, { context }: any) => {\n-\u250a22\u250a  \u250a        context.db.release();\n-\u250a23\u250a  \u250a        return res;\n-\u250a24\u250a  \u250a      },\n-\u250a25\u250a  \u250a    });\n+\u250a  \u250a11\u250a    mockAuth(1);\n \u250a26\u250a12\u250a\n \u250a27\u250a13\u250a    const { query } = createTestClient(server);\n \u250a28\u250a14\u250a\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -42,10 +28,7 @@\n \u250a42\u250a28\u250a    expect(res.errors).toBeUndefined();\n \u250a43\u250a29\u250a    expect(res.data).toMatchSnapshot();\n \u250a44\u250a30\u250a\n-\u250a45\u250a  \u250a    const secondUserQuery = await pool.query(\n-\u250a46\u250a  \u250a      sql`SELECT * FROM users WHERE id = '2'`\n-\u250a47\u250a  \u250a    );\n-\u250a48\u250a  \u250a    currentUser = secondUserQuery.rows[0];\n+\u250a  \u250a31\u250a    mockAuth(2);\n \u250a49\u250a32\u250a\n \u250a50\u250a33\u250a    res = await query({\n \u250a51\u250a34\u250a      query: gql`\n")),(0,s.kt)("h2",{id:"adjusting-client"},"Adjusting client"),(0,s.kt)("p",null,"We still need to update ",(0,s.kt)("inlineCode",{parentName:"p"},"codegen.yml")," in the client app because of the changes we introduced in this chapter:"),(0,s.kt)("h4",{id:"client-step-141-adjust-to-graphql-modules"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/585ef3be811764be2eac2b851883e541384a1cfc"},(0,s.kt)("strong",{parentName:"a"},"Client")," Step 14.1: Adjust to GraphQL Modules")),(0,s.kt)("h5",{id:"changed-codegenyml-2"},"Changed codegen.yml"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,4 +1,4 @@\n-\u250a1\u250a \u250aschema: ../WhatsApp-Clone-Server/schema/typeDefs.graphql\n+\u250a \u250a1\u250aschema: ../WhatsApp-Clone-Server/modules/*/index.ts\n \u250a2\u250a2\u250adocuments: './src/**/*.{tsx,ts}'\n \u250a3\u250a3\u250aoverwrite: true\n \u250a4\u250a4\u250agenerates:\n")),(0,s.kt)("h2",{id:"many-ways-to-write-graphql"},"Many ways to write GraphQL"),(0,s.kt)("p",null,"We\u2019re going to discuss what are the possible options of building GraphQL API and why schema-first approach was our choice."),(0,s.kt)("p",null,"The main ingredient of a GraphQL API is, of course the schema. It\u2019s built out of type definitions where each of them describes a piece of data, connections between them and how data is actually resolved."),(0,s.kt)("p",null,"The way we develop all of it changes the way we work with the API."),(0,s.kt)("p",null,"We could define two main approaches:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"schema-first"),(0,s.kt)("li",{parentName:"ul"},"resolver-first")),(0,s.kt)("p",null,"The former means design comes before code, the latter vice-versa."),(0,s.kt)("p",null,"In schema-first development you start with SDL, resolvers and code go next. Schema is sort of a contract between teams and also between frontend and backend. With schema-first approach it\u2019s easier to cooperate, discuss and write a better API. Because the SDL is written upfront, the frontend developers can use a mocked version of it and start working on the product while the backend team does the API, in parallel.\nThere are of course some pain points. Once schema is splitted into SDL and resolvers it\u2019s hard to keep them in sync and that\u2019s why things like GraphQL Code Generator were developed, to add type safety on top of all."),(0,s.kt)("p",null,"The resolver-first approach is a bit different. The schema is defined programmatically, which usually means it\u2019s more flexible and combined with TypeScript or Flow gives you type-safety out of the box."),(0,s.kt)("p",null,"We think it\u2019s less readable than having a SDL and there\u2019s a lack of separation between schema and code which might be a blocker for some teams."),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:"left"},(0,s.kt)("a",{parentName:"th",href:"https://github.com/Urigo/WhatsApp-Clone-Tutorial/tree/master@next/.tortilla/manuals/views/step15.md"},"< Previous Step")),(0,s.kt)("th",{parentName:"tr",align:"right"},(0,s.kt)("a",{parentName:"th",href:"https://github.com/Urigo/WhatsApp-Clone-Tutorial/tree/master@next/.tortilla/manuals/views/step17.md"},"Next Step >"))))))}p.isMDXComponent=!0}}]);