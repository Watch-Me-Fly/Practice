"use strict";(self.webpackChunkovrsea_whatsapp_tuto=self.webpackChunkovrsea_whatsapp_tuto||[]).push([[8557],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>h});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=l(t),h=a,m=u["".concat(c,".").concat(h)]||u[h]||d[h]||s;return t?r.createElement(m,i(i({ref:n},p),{},{components:t})):r.createElement(m,i({ref:n},p))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,i=new Array(s);i[0]=u;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var l=2;l<s;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},7439:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var r=t(7462),a=(t(7294),t(3905));const s={sidebar_label:"Step 11: Users",sidebar_position:11},i="Step 11: Users",o={unversionedId:"tuto-whatsapp/step11",id:"tuto-whatsapp/step11",title:"Step 11: Users",description:"[//]: # (head-end)",source:"@site/docs/tuto-whatsapp/step11.md",sourceDirName:"tuto-whatsapp",slug:"/tuto-whatsapp/step11",permalink:"/docs/next/tuto-whatsapp/step11",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tuto-whatsapp/step11.md",tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_label:"Step 11: Users",sidebar_position:11},sidebar:"tutorialSidebar",previous:{title:"Step 10: Live updates with GraphQL subscriptions",permalink:"/docs/next/tuto-whatsapp/step10"},next:{title:"Step 12: Adding and removing chats",permalink:"/docs/next/tuto-whatsapp/step12"}},c={},l=[{value:"<strong>Server</strong> Step 8.1: Add User type",id:"server-step-81-add-user-type",level:4},{value:"Changed codegen.yml",id:"changed-codegenyml",level:5},{value:"Changed db.ts",id:"changed-dbts",level:5},{value:"Changed schema/resolvers.ts",id:"changed-schemaresolversts",level:5},{value:"Changed schema/typeDefs.graphql",id:"changed-schematypedefsgraphql",level:5},{value:"<strong>Server</strong> Step 8.2: Resolve queries in relation to current user",id:"server-step-82-resolve-queries-in-relation-to-current-user",level:4},{value:"Changed index.ts",id:"changed-indexts",level:5},{value:"<strong>Server</strong> Step 8.2: Resolve queries in relation to current user",id:"server-step-82-resolve-queries-in-relation-to-current-user-1",level:4},{value:"Changed context.ts",id:"changed-contextts",level:5},{value:"<strong>Server</strong> Step 8.2: Resolve queries in relation to current user",id:"server-step-82-resolve-queries-in-relation-to-current-user-2",level:4},{value:"Changed schema/resolvers.ts",id:"changed-schemaresolversts-1",level:5},{value:"<strong>Server</strong> Step 8.3: Resolve subscriptions in relation to current user",id:"server-step-83-resolve-subscriptions-in-relation-to-current-user",level:4},{value:"Changed schema/resolvers.ts",id:"changed-schemaresolversts-2",level:5},{value:"<strong>Client</strong> Step 11.1: Distinguish messages",id:"client-step-111-distinguish-messages",level:4},{value:"Changed src/components/ChatRoomScreen/MessagesList.tsx",id:"changed-srccomponentschatroomscreenmessageslisttsx",level:5},{value:"Changed src/components/ChatRoomScreen/index.tsx",id:"changed-srccomponentschatroomscreenindextsx",level:5},{value:"Changed src/components/ChatsListScreen/ChatsList.test.tsx",id:"changed-srccomponentschatslistscreenchatslisttesttsx",level:5},{value:"<strong>Client</strong> Step 11.1: Distinguish messages",id:"client-step-111-distinguish-messages-1",level:4},{value:"Changed src/graphql/fragments/message.fragment.ts",id:"changed-srcgraphqlfragmentsmessagefragmentts",level:5},{value:"<strong>Client</strong> Step 11.2: Support credentials",id:"client-step-112-support-credentials",level:4},{value:"Changed src/client.ts",id:"changed-srcclientts",level:5},{value:"<strong>Server</strong> Step 8.4: Support credentials",id:"server-step-84-support-credentials",level:4},{value:"Changed index.ts",id:"changed-indexts-1",level:5},{value:"<strong>Server</strong> Step 8.5: Use cookie parser",id:"server-step-85-use-cookie-parser",level:4},{value:"Changed index.ts",id:"changed-indexts-2",level:5},{value:"<strong>Server</strong> Step 8.6: Define current user based on cookies",id:"server-step-86-define-current-user-based-on-cookies",level:4},{value:"Changed index.ts",id:"changed-indexts-3",level:5},{value:"Changed package.json",id:"changed-packagejson",level:5},{value:"<strong>Client</strong> Step 11.3: Add basic auth.service",id:"client-step-113-add-basic-authservice",level:4},{value:"Added src/services/auth.service.tsx",id:"added-srcservicesauthservicetsx",level:5},{value:"<strong>Client</strong> Step 11.4: Add AuthScreen",id:"client-step-114-add-authscreen",level:4},{value:"Added src/components/AuthScreen/index.tsx",id:"added-srccomponentsauthscreenindextsx",level:5},{value:"<strong>Client</strong> Step 11.4: Add AuthScreen",id:"client-step-114-add-authscreen-1",level:4},{value:"Changed src/App.tsx",id:"changed-srcapptsx",level:5},{value:"<strong>Client</strong> Step 11.5: Add sign-out button that ChatsNavbar",id:"client-step-115-add-sign-out-button-that-chatsnavbar",level:4},{value:"Changed src/components/ChatsListScreen/ChatsNavbar.tsx",id:"changed-srccomponentschatslistscreenchatsnavbartsx",level:5},{value:"<strong>Client</strong> Step 11.6: Add withAuth() route wrapper",id:"client-step-116-add-withauth-route-wrapper",level:4},{value:"Changed src/services/auth.service.tsx",id:"changed-srcservicesauthservicetsx",level:5},{value:"<strong>Client</strong> Step 11.6: Add withAuth() route wrapper",id:"client-step-116-add-withauth-route-wrapper-1",level:4},{value:"Changed src/App.tsx",id:"changed-srcapptsx-1",level:5}],p={toc:l};function d(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"step-11-users"},"Step 11: Users"),(0,a.kt)("p",null,"Our chat app is pretty functional. We can pick a chat from the chats list and we can send messages. It's not hard to notice that one of the most important mechanisms is missing, which is relating a chat or a message to a specific user. Even though we can send messages, it's basically pointless unless someone else receives it. In this chapter we will create a new users collection with pre-defined documents and we will learn how to simulate authentication programmatically so we can test the new mechanism."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Reshaping the back-end")),(0,a.kt)("p",null,"To implement this feature we need to rethink our back-end and reshape the way our GraphQL schema is structured. Right now we only have 2 entities: Chat and Message, which are connected like so:"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/7648874/55325929-0faa1b00-54b9-11e9-8868-7a8ed3edcda1.png",alt:"chat-message-orm"})),(0,a.kt)("p",null,"We want to have a new User entity where each user will have Chats he participates in and Messages he owns. Therefore, our new GraphQL schema should look like something like this:"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/7648874/55325935-146ecf00-54b9-11e9-8c0f-bc3b63cbe676.png",alt:"chat-message-user-orm"})),(0,a.kt)("p",null,"This change would require us to update the GraphQL type definitions and handlers, the DB models, and the codegen configuration file:"),(0,a.kt)("h4",{id:"server-step-81-add-user-type"},(0,a.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/2a734aeab15e2e841f123b76195e9a6045ef06e2"},(0,a.kt)("strong",{parentName:"a"},"Server")," Step 8.1: Add User type")),(0,a.kt)("h5",{id:"changed-codegenyml"},"Changed codegen.yml"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -10,6 +10,7 @@\n \u250a10\u250a10\u250a      mappers:\n \u250a11\u250a11\u250a        # import { Message } from '../db'\n \u250a12\u250a12\u250a        # The root types of Message resolvers\n+\u250a  \u250a13\u250a        User: ../db#User\n \u250a13\u250a14\u250a        Message: ../db#Message\n \u250a14\u250a15\u250a        Chat: ../db#Chat\n \u250a15\u250a16\u250a      scalars:\n")),(0,a.kt)("h5",{id:"changed-dbts"},"Changed db.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,20 +1,60 @@\n+\u250a  \u250a 1\u250aexport type User = {\n+\u250a  \u250a 2\u250a  id: string;\n+\u250a  \u250a 3\u250a  name: string;\n+\u250a  \u250a 4\u250a  picture: string;\n+\u250a  \u250a 5\u250a};\n+\u250a  \u250a 6\u250a\n \u250a 1\u250a 7\u250aexport type Message = {\n \u250a 2\u250a 8\u250a  id: string;\n \u250a 3\u250a 9\u250a  content: string;\n \u250a 4\u250a10\u250a  createdAt: Date;\n+\u250a  \u250a11\u250a  sender: string;\n+\u250a  \u250a12\u250a  recipient: string;\n \u250a 5\u250a13\u250a};\n \u250a 6\u250a14\u250a\n \u250a 7\u250a15\u250aexport type Chat = {\n \u250a 8\u250a16\u250a  id: string;\n-\u250a 9\u250a  \u250a  name: string;\n-\u250a10\u250a  \u250a  picture: string;\n \u250a11\u250a17\u250a  messages: string[];\n+\u250a  \u250a18\u250a  participants: string[];\n \u250a12\u250a19\u250a};\n \u250a13\u250a20\u250a\n+\u250a  \u250a21\u250aexport const users: User[] = [];\n \u250a14\u250a22\u250aexport const messages: Message[] = [];\n \u250a15\u250a23\u250aexport const chats: Chat[] = [];\n \u250a16\u250a24\u250a\n \u250a17\u250a25\u250aexport const resetDb = () => {\n+\u250a  \u250a26\u250a  users.splice(\n+\u250a  \u250a27\u250a    0,\n+\u250a  \u250a28\u250a    Infinity,\n+\u250a  \u250a29\u250a    ...[\n+\u250a  \u250a30\u250a      {\n+\u250a  \u250a31\u250a        id: '1',\n+\u250a  \u250a32\u250a        name: 'Ray Edwards',\n+\u250a  \u250a33\u250a        picture: 'https://randomuser.me/api/portraits/thumb/lego/1.jpg',\n+\u250a  \u250a34\u250a      },\n+\u250a  \u250a35\u250a      {\n+\u250a  \u250a36\u250a        id: '2',\n+\u250a  \u250a37\u250a        name: 'Ethan Gonzalez',\n+\u250a  \u250a38\u250a        picture: 'https://randomuser.me/api/portraits/thumb/men/1.jpg',\n+\u250a  \u250a39\u250a      },\n+\u250a  \u250a40\u250a      {\n+\u250a  \u250a41\u250a        id: '3',\n+\u250a  \u250a42\u250a        name: 'Bryan Wallace',\n+\u250a  \u250a43\u250a        picture: 'https://randomuser.me/api/portraits/thumb/men/2.jpg',\n+\u250a  \u250a44\u250a      },\n+\u250a  \u250a45\u250a      {\n+\u250a  \u250a46\u250a        id: '4',\n+\u250a  \u250a47\u250a        name: 'Avery Stewart',\n+\u250a  \u250a48\u250a        picture: 'https://randomuser.me/api/portraits/thumb/women/1.jpg',\n+\u250a  \u250a49\u250a      },\n+\u250a  \u250a50\u250a      {\n+\u250a  \u250a51\u250a        id: '5',\n+\u250a  \u250a52\u250a        name: 'Katie Peterson',\n+\u250a  \u250a53\u250a        picture: 'https://randomuser.me/api/portraits/thumb/women/2.jpg',\n+\u250a  \u250a54\u250a      },\n+\u250a  \u250a55\u250a    ]\n+\u250a  \u250a56\u250a  );\n+\u250a  \u250a57\u250a\n \u250a18\u250a58\u250a  messages.splice(\n \u250a19\u250a59\u250a    0,\n \u250a20\u250a60\u250a    Infinity,\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -23,6 +63,8 @@\n \u250a23\u250a63\u250a        id: '1',\n \u250a24\u250a64\u250a        content: 'You on your way?',\n \u250a25\u250a65\u250a        createdAt: new Date(new Date('1-1-2019').getTime() - 60 * 1000 * 1000),\n+\u250a  \u250a66\u250a        sender: '1',\n+\u250a  \u250a67\u250a        recipient: '2',\n \u250a26\u250a68\u250a      },\n \u250a27\u250a69\u250a      {\n \u250a28\u250a70\u250a        id: '2',\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -30,6 +72,8 @@\n \u250a30\u250a72\u250a        createdAt: new Date(\n \u250a31\u250a73\u250a          new Date('1-1-2019').getTime() - 2 * 60 * 1000 * 1000\n \u250a32\u250a74\u250a        ),\n+\u250a  \u250a75\u250a        sender: '1',\n+\u250a  \u250a76\u250a        recipient: '3',\n \u250a33\u250a77\u250a      },\n \u250a34\u250a78\u250a      {\n \u250a35\u250a79\u250a        id: '3',\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -37,6 +81,8 @@\n \u250a37\u250a81\u250a        createdAt: new Date(\n \u250a38\u250a82\u250a          new Date('1-1-2019').getTime() - 24 * 60 * 1000 * 1000\n \u250a39\u250a83\u250a        ),\n+\u250a  \u250a84\u250a        sender: '1',\n+\u250a  \u250a85\u250a        recipient: '4',\n \u250a40\u250a86\u250a      },\n \u250a41\u250a87\u250a      {\n \u250a42\u250a88\u250a        id: '4',\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -44,6 +90,8 @@\n \u250a44\u250a90\u250a        createdAt: new Date(\n \u250a45\u250a91\u250a          new Date('1-1-2019').getTime() - 14 * 24 * 60 * 1000 * 1000\n \u250a46\u250a92\u250a        ),\n+\u250a  \u250a93\u250a        sender: '1',\n+\u250a  \u250a94\u250a        recipient: '5',\n \u250a47\u250a95\u250a      },\n \u250a48\u250a96\u250a    ]\n \u250a49\u250a97\u250a  );\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -54,26 +102,22 @@\n \u250a 54\u250a102\u250a    ...[\n \u250a 55\u250a103\u250a      {\n \u250a 56\u250a104\u250a        id: '1',\n-\u250a 57\u250a   \u250a        name: 'Ethan Gonzalez',\n-\u250a 58\u250a   \u250a        picture: 'https://randomuser.me/api/portraits/thumb/men/1.jpg',\n+\u250a   \u250a105\u250a        participants: ['1', '2'],\n \u250a 59\u250a106\u250a        messages: ['1'],\n \u250a 60\u250a107\u250a      },\n \u250a 61\u250a108\u250a      {\n \u250a 62\u250a109\u250a        id: '2',\n-\u250a 63\u250a   \u250a        name: 'Bryan Wallace',\n-\u250a 64\u250a   \u250a        picture: 'https://randomuser.me/api/portraits/thumb/men/2.jpg',\n+\u250a   \u250a110\u250a        participants: ['1', '3'],\n \u250a 65\u250a111\u250a        messages: ['2'],\n \u250a 66\u250a112\u250a      },\n \u250a 67\u250a113\u250a      {\n \u250a 68\u250a114\u250a        id: '3',\n-\u250a 69\u250a   \u250a        name: 'Avery Stewart',\n-\u250a 70\u250a   \u250a        picture: 'https://randomuser.me/api/portraits/thumb/women/1.jpg',\n+\u250a   \u250a115\u250a        participants: ['1', '4'],\n \u250a 71\u250a116\u250a        messages: ['3'],\n \u250a 72\u250a117\u250a      },\n \u250a 73\u250a118\u250a      {\n \u250a 74\u250a119\u250a        id: '4',\n-\u250a 75\u250a   \u250a        name: 'Katie Peterson',\n-\u250a 76\u250a   \u250a        picture: 'https://randomuser.me/api/portraits/thumb/women/2.jpg',\n+\u250a   \u250a120\u250a        participants: ['1', '5'],\n \u250a 77\u250a121\u250a        messages: ['4'],\n \u250a 78\u250a122\u250a      },\n \u250a 79\u250a123\u250a    ]\n")),(0,a.kt)("h5",{id:"changed-schemaresolversts"},"Changed schema","/","resolvers.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,5 +1,5 @@\n \u250a1\u250a1\u250aimport { DateTimeResolver, URLResolver } from 'graphql-scalars';\n-\u250a2\u250a \u250aimport { Message, chats, messages } from '../db';\n+\u250a \u250a2\u250aimport { User, Message, chats, messages, users } from '../db';\n \u250a3\u250a3\u250aimport { Resolvers } from '../types/graphql';\n \u250a4\u250a4\u250a\n \u250a5\u250a5\u250aconst resolvers: Resolvers = {\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -10,9 +10,27 @@\n \u250a10\u250a10\u250a    chat(message) {\n \u250a11\u250a11\u250a      return chats.find(c => c.messages.some(m => m === message.id)) || null;\n \u250a12\u250a12\u250a    },\n+\u250a  \u250a13\u250a\n+\u250a  \u250a14\u250a    sender(message) {\n+\u250a  \u250a15\u250a      return users.find(u => u.id === message.sender) || null;\n+\u250a  \u250a16\u250a    },\n+\u250a  \u250a17\u250a\n+\u250a  \u250a18\u250a    recipient(message) {\n+\u250a  \u250a19\u250a      return users.find(u => u.id === message.recipient) || null;\n+\u250a  \u250a20\u250a    },\n \u250a13\u250a21\u250a  },\n \u250a14\u250a22\u250a\n \u250a15\u250a23\u250a  Chat: {\n+\u250a  \u250a24\u250a    name() {\n+\u250a  \u250a25\u250a      // TODO: Resolve in relation to current user\n+\u250a  \u250a26\u250a      return null;\n+\u250a  \u250a27\u250a    },\n+\u250a  \u250a28\u250a\n+\u250a  \u250a29\u250a    picture() {\n+\u250a  \u250a30\u250a      // TODO: Resolve in relation to current user\n+\u250a  \u250a31\u250a      return null;\n+\u250a  \u250a32\u250a    },\n+\u250a  \u250a33\u250a\n \u250a16\u250a34\u250a    messages(chat) {\n \u250a17\u250a35\u250a      return messages.filter((m) => chat.messages.includes(m.id));\n \u250a18\u250a36\u250a    },\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -22,6 +40,12 @@\n \u250a22\u250a40\u250a\n \u250a23\u250a41\u250a      return messages.find((m) => m.id === lastMessage) || null;\n \u250a24\u250a42\u250a    },\n+\u250a  \u250a43\u250a\n+\u250a  \u250a44\u250a    participants(chat) {\n+\u250a  \u250a45\u250a      return chat.participants\n+\u250a  \u250a46\u250a        .map(p => users.find(u => u.id === p))\n+\u250a  \u250a47\u250a        .filter(Boolean) as User[];\n+\u250a  \u250a48\u250a    },\n \u250a25\u250a49\u250a  },\n \u250a26\u250a50\u250a\n \u250a27\u250a51\u250a  Query: {\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -49,6 +73,8 @@\n \u250a49\u250a73\u250a      const message: Message = {\n \u250a50\u250a74\u250a        id: messageId,\n \u250a51\u250a75\u250a        createdAt: new Date(),\n+\u250a  \u250a76\u250a        sender: '', // TODO: Fill-in\n+\u250a  \u250a77\u250a        recipient: '', // TODO: Fill-in\n \u250a52\u250a78\u250a        content,\n \u250a53\u250a79\u250a      };\n \u250a54\u250a80\u250a\n")),(0,a.kt)("h5",{id:"changed-schematypedefsgraphql"},"Changed schema","/","typeDefs.graphql"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,19 +1,29 @@\n \u250a 1\u250a 1\u250ascalar Date\n \u250a 2\u250a 2\u250ascalar URL\n \u250a 3\u250a 3\u250a\n+\u250a  \u250a 4\u250atype User {\n+\u250a  \u250a 5\u250a  id: ID!\n+\u250a  \u250a 6\u250a  name: String!\n+\u250a  \u250a 7\u250a  picture: URL\n+\u250a  \u250a 8\u250a}\n+\u250a  \u250a 9\u250a\n \u250a 4\u250a10\u250atype Message {\n \u250a 5\u250a11\u250a  id: ID!\n \u250a 6\u250a12\u250a  content: String!\n \u250a 7\u250a13\u250a  createdAt: Date!\n \u250a 8\u250a14\u250a  chat: Chat\n+\u250a  \u250a15\u250a  sender: User\n+\u250a  \u250a16\u250a  recipient: User\n+\u250a  \u250a17\u250a  isMine: Boolean!\n \u250a 9\u250a18\u250a}\n \u250a10\u250a19\u250a\n \u250a11\u250a20\u250atype Chat {\n \u250a12\u250a21\u250a  id: ID!\n-\u250a13\u250a  \u250a  name: String!\n+\u250a  \u250a22\u250a  name: String\n \u250a14\u250a23\u250a  picture: URL\n \u250a15\u250a24\u250a  lastMessage: Message\n \u250a16\u250a25\u250a  messages: [Message!]!\n+\u250a  \u250a26\u250a  participants: [User!]!\n \u250a17\u250a27\u250a}\n \u250a18\u250a28\u250a\n \u250a19\u250a29\u250atype Query {\n")),(0,a.kt)("p",null,"Even though we made these changes, the app remained the same. That's because the Query type haven't changed at all, and we still serve the same data as before. What we need to do is to edit the Query resolvers to serve data based on the user that is currently logged-in to the app in the current session. Before we go all in with a robust authentication system, it would be smarter to simulate it, so we can test our app and see that everything works as intended."),(0,a.kt)("p",null,"For now, let's assume that we're logged in with user of ID 1 - Ray Edwards. Codewise, this would mean that we will need to have the current user defined on the resolver context. In the main file, let's add the ",(0,a.kt)("inlineCode",{parentName:"p"},"currentUser")," field to the context using a simple ",(0,a.kt)("inlineCode",{parentName:"p"},"find()")," method from our ",(0,a.kt)("inlineCode",{parentName:"p"},"users")," collection:"),(0,a.kt)("h4",{id:"server-step-82-resolve-queries-in-relation-to-current-user"},(0,a.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/0eb37476e1b041980b11d5d6f96fd7fd723791bb"},(0,a.kt)("strong",{parentName:"a"},"Server")," Step 8.2: Resolve queries in relation to current user")),(0,a.kt)("h5",{id:"changed-indexts"},"Changed index.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -2,6 +2,7 @@\n \u250a2\u250a2\u250aimport cors from 'cors';\n \u250a3\u250a3\u250aimport express from 'express';\n \u250a4\u250a4\u250aimport http from 'http';\n+\u250a \u250a5\u250aimport { users } from './db';\n \u250a5\u250a6\u250aimport schema from './schema';\n \u250a6\u250a7\u250a\n \u250a7\u250a8\u250aconst app = express();\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -16,7 +17,10 @@\n \u250a16\u250a17\u250aconst pubsub = new PubSub();\n \u250a17\u250a18\u250aconst server = new ApolloServer({\n \u250a18\u250a19\u250a  schema,\n-\u250a19\u250a  \u250a  context: () => ({ pubsub }),\n+\u250a  \u250a20\u250a  context: () => ({\n+\u250a  \u250a21\u250a    currentUser: users.find((u) => u.id === '1'),\n+\u250a  \u250a22\u250a    pubsub,\n+\u250a  \u250a23\u250a  }),\n \u250a20\u250a24\u250a});\n \u250a21\u250a25\u250a\n \u250a22\u250a26\u250aserver.applyMiddleware({\n")),(0,a.kt)("p",null,"And we will update the context type:"),(0,a.kt)("h4",{id:"server-step-82-resolve-queries-in-relation-to-current-user-1"},(0,a.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/0eb37476e1b041980b11d5d6f96fd7fd723791bb"},(0,a.kt)("strong",{parentName:"a"},"Server")," Step 8.2: Resolve queries in relation to current user")),(0,a.kt)("h5",{id:"changed-contextts"},"Changed context.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,5 +1,7 @@\n \u250a1\u250a1\u250aimport { PubSub } from 'apollo-server-express';\n+\u250a \u250a2\u250aimport { User } from './db';\n \u250a2\u250a3\u250a\n \u250a3\u250a4\u250aexport type MyContext = {\n \u250a4\u250a5\u250a  pubsub: PubSub;\n+\u250a \u250a6\u250a  currentUser: User;\n \u250a5\u250a7\u250a};\n")),(0,a.kt)("p",null,"Now we will update the resolvers to fetch data relatively to the current user logged in. If there's no user logged in, the resolvers should return ",(0,a.kt)("inlineCode",{parentName:"p"},"null"),", as the client is not authorized to view the data he requested:"),(0,a.kt)("h4",{id:"server-step-82-resolve-queries-in-relation-to-current-user-2"},(0,a.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/0eb37476e1b041980b11d5d6f96fd7fd723791bb"},(0,a.kt)("strong",{parentName:"a"},"Server")," Step 8.2: Resolve queries in relation to current user")),(0,a.kt)("h5",{id:"changed-schemaresolversts-1"},"Changed schema","/","resolvers.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -8,27 +8,47 @@\n \u250a 8\u250a 8\u250a\n \u250a 9\u250a 9\u250a  Message: {\n \u250a10\u250a10\u250a    chat(message) {\n-\u250a11\u250a  \u250a      return chats.find(c => c.messages.some(m => m === message.id)) || null;\n+\u250a  \u250a11\u250a      return (\n+\u250a  \u250a12\u250a        chats.find((c) => c.messages.some((m) => m === message.id)) || null\n+\u250a  \u250a13\u250a      );\n \u250a12\u250a14\u250a    },\n \u250a13\u250a15\u250a\n \u250a14\u250a16\u250a    sender(message) {\n-\u250a15\u250a  \u250a      return users.find(u => u.id === message.sender) || null;\n+\u250a  \u250a17\u250a      return users.find((u) => u.id === message.sender) || null;\n \u250a16\u250a18\u250a    },\n \u250a17\u250a19\u250a\n \u250a18\u250a20\u250a    recipient(message) {\n-\u250a19\u250a  \u250a      return users.find(u => u.id === message.recipient) || null;\n+\u250a  \u250a21\u250a      return users.find((u) => u.id === message.recipient) || null;\n+\u250a  \u250a22\u250a    },\n+\u250a  \u250a23\u250a\n+\u250a  \u250a24\u250a    isMine(message, args, { currentUser }) {\n+\u250a  \u250a25\u250a      return message.sender === currentUser.id;\n \u250a20\u250a26\u250a    },\n \u250a21\u250a27\u250a  },\n \u250a22\u250a28\u250a\n \u250a23\u250a29\u250a  Chat: {\n-\u250a24\u250a  \u250a    name() {\n-\u250a25\u250a  \u250a      // TODO: Resolve in relation to current user\n-\u250a26\u250a  \u250a      return null;\n+\u250a  \u250a30\u250a    name(chat, args, { currentUser }) {\n+\u250a  \u250a31\u250a      if (!currentUser) return null;\n+\u250a  \u250a32\u250a\n+\u250a  \u250a33\u250a      const participantId = chat.participants.find((p) => p !== currentUser.id);\n+\u250a  \u250a34\u250a\n+\u250a  \u250a35\u250a      if (!participantId) return null;\n+\u250a  \u250a36\u250a\n+\u250a  \u250a37\u250a      const participant = users.find((u) => u.id === participantId);\n+\u250a  \u250a38\u250a\n+\u250a  \u250a39\u250a      return participant ? participant.name : null;\n \u250a27\u250a40\u250a    },\n \u250a28\u250a41\u250a\n-\u250a29\u250a  \u250a    picture() {\n-\u250a30\u250a  \u250a      // TODO: Resolve in relation to current user\n-\u250a31\u250a  \u250a      return null;\n+\u250a  \u250a42\u250a    picture(chat, args, { currentUser }) {\n+\u250a  \u250a43\u250a      if (!currentUser) return null;\n+\u250a  \u250a44\u250a\n+\u250a  \u250a45\u250a      const participantId = chat.participants.find((p) => p !== currentUser.id);\n+\u250a  \u250a46\u250a\n+\u250a  \u250a47\u250a      if (!participantId) return null;\n+\u250a  \u250a48\u250a\n+\u250a  \u250a49\u250a      const participant = users.find((u) => u.id === participantId);\n+\u250a  \u250a50\u250a\n+\u250a  \u250a51\u250a      return participant ? participant.picture : null;\n \u250a32\u250a52\u250a    },\n \u250a33\u250a53\u250a\n \u250a34\u250a54\u250a    messages(chat) {\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -43,28 +63,39 @@\n \u250a 43\u250a 63\u250a\n \u250a 44\u250a 64\u250a    participants(chat) {\n \u250a 45\u250a 65\u250a      return chat.participants\n-\u250a 46\u250a   \u250a        .map(p => users.find(u => u.id === p))\n+\u250a   \u250a 66\u250a        .map((p) => users.find((u) => u.id === p))\n \u250a 47\u250a 67\u250a        .filter(Boolean) as User[];\n \u250a 48\u250a 68\u250a    },\n \u250a 49\u250a 69\u250a  },\n \u250a 50\u250a 70\u250a\n \u250a 51\u250a 71\u250a  Query: {\n-\u250a 52\u250a   \u250a    chats() {\n-\u250a 53\u250a   \u250a      return chats;\n+\u250a   \u250a 72\u250a    chats(root, args, { currentUser }) {\n+\u250a   \u250a 73\u250a      if (!currentUser) return [];\n+\u250a   \u250a 74\u250a\n+\u250a   \u250a 75\u250a      return chats.filter((c) => c.participants.includes(currentUser.id));\n \u250a 54\u250a 76\u250a    },\n \u250a 55\u250a 77\u250a\n-\u250a 56\u250a   \u250a    chat(root, { chatId }) {\n-\u250a 57\u250a   \u250a      return chats.find((c) => c.id === chatId) || null;\n+\u250a   \u250a 78\u250a    chat(root, { chatId }, { currentUser }) {\n+\u250a   \u250a 79\u250a      if (!currentUser) return null;\n+\u250a   \u250a 80\u250a\n+\u250a   \u250a 81\u250a      const chat = chats.find((c) => c.id === chatId);\n+\u250a   \u250a 82\u250a\n+\u250a   \u250a 83\u250a      if (!chat) return null;\n+\u250a   \u250a 84\u250a\n+\u250a   \u250a 85\u250a      return chat.participants.includes(currentUser.id) ? chat : null;\n \u250a 58\u250a 86\u250a    },\n \u250a 59\u250a 87\u250a  },\n \u250a 60\u250a 88\u250a\n \u250a 61\u250a 89\u250a  Mutation: {\n-\u250a 62\u250a   \u250a    addMessage(root, { chatId, content }, { pubsub }) {\n+\u250a   \u250a 90\u250a    addMessage(root, { chatId, content }, { currentUser, pubsub }) {\n+\u250a   \u250a 91\u250a      if (!currentUser) return null;\n+\u250a   \u250a 92\u250a\n \u250a 63\u250a 93\u250a      const chatIndex = chats.findIndex((c) => c.id === chatId);\n \u250a 64\u250a 94\u250a\n \u250a 65\u250a 95\u250a      if (chatIndex === -1) return null;\n \u250a 66\u250a 96\u250a\n \u250a 67\u250a 97\u250a      const chat = chats[chatIndex];\n+\u250a   \u250a 98\u250a      if (!chat.participants.includes(currentUser.id)) return null;\n \u250a 68\u250a 99\u250a\n \u250a 69\u250a100\u250a      const messagesIds = messages.map((currentMessage) =>\n \u250a 70\u250a101\u250a        Number(currentMessage.id)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -73,8 +104,10 @@\n \u250a 73\u250a104\u250a      const message: Message = {\n \u250a 74\u250a105\u250a        id: messageId,\n \u250a 75\u250a106\u250a        createdAt: new Date(),\n-\u250a 76\u250a   \u250a        sender: '', // TODO: Fill-in\n-\u250a 77\u250a   \u250a        recipient: '', // TODO: Fill-in\n+\u250a   \u250a107\u250a        sender: currentUser.id,\n+\u250a   \u250a108\u250a        recipient: chat.participants.find(\n+\u250a   \u250a109\u250a          (p) => p !== currentUser.id\n+\u250a   \u250a110\u250a        ) as string,\n \u250a 78\u250a111\u250a        content,\n \u250a 79\u250a112\u250a      };\n \u250a 80\u250a113\u250a\n")),(0,a.kt)("p",null,"Now if we will get back to the app and refresh the page, we should see a new chats list which is only relevant to Ray Edwards.\nEarlier in this chapter, we've defined a new ",(0,a.kt)("inlineCode",{parentName:"p"},"isMine")," field on the ",(0,a.kt)("inlineCode",{parentName:"p"},"Message")," type.\nThis field is useful because now we can differentiate between messages that are mine and messages that belong to the recipient.\nWe can use that information to distinct between messages in our UI."),(0,a.kt)("p",null,"But we should also take into account the current user when we publish real-time subscription events."),(0,a.kt)("p",null,"We will check if there is a logged in user and if the users is part of the actual conversation before we publish:"),(0,a.kt)("h4",{id:"server-step-83-resolve-subscriptions-in-relation-to-current-user"},(0,a.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/542a1b344bc8c10142c799a6ac617d7dce905eaf"},(0,a.kt)("strong",{parentName:"a"},"Server")," Step 8.3: Resolve subscriptions in relation to current user")),(0,a.kt)("h5",{id:"changed-schemaresolversts-2"},"Changed schema","/","resolvers.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,3 +1,4 @@\n+\u250a \u250a1\u250aimport { withFilter } from 'apollo-server-express';\n \u250a1\u250a2\u250aimport { DateTimeResolver, URLResolver } from 'graphql-scalars';\n \u250a2\u250a3\u250aimport { User, Message, chats, messages, users } from '../db';\n \u250a3\u250a4\u250aimport { Resolvers } from '../types/graphql';\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -127,8 +128,16 @@\n \u250a127\u250a128\u250a\n \u250a128\u250a129\u250a  Subscription: {\n \u250a129\u250a130\u250a    messageAdded: {\n-\u250a130\u250a   \u250a      subscribe: (root, args, { pubsub }) =>\n-\u250a131\u250a   \u250a        pubsub.asyncIterator('messageAdded'),\n+\u250a   \u250a131\u250a      subscribe: withFilter(\n+\u250a   \u250a132\u250a        (root, args, { pubsub }) => pubsub.asyncIterator('messageAdded'),\n+\u250a   \u250a133\u250a        ({ messageAdded }, args, { currentUser }) => {\n+\u250a   \u250a134\u250a          if (!currentUser) return false;\n+\u250a   \u250a135\u250a\n+\u250a   \u250a136\u250a          return [messageAdded.sender, messageAdded.recipient].includes(\n+\u250a   \u250a137\u250a            currentUser.id\n+\u250a   \u250a138\u250a          );\n+\u250a   \u250a139\u250a        }\n+\u250a   \u250a140\u250a      ),\n \u250a132\u250a141\u250a    },\n \u250a133\u250a142\u250a  },\n \u250a134\u250a143\u250a};\n")),(0,a.kt)("p",null,"Let's first download a new image that will help us achieve the new style and save it under the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/blob/cordova/public/assets/message-other.png?raw=true"},(0,a.kt)("inlineCode",{parentName:"a"},"src/public/assets/message-other.png"))," path.\nThen let's implement the new style:"),(0,a.kt)("h4",{id:"client-step-111-distinguish-messages"},(0,a.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/9809f1daf7aea03d1362d5ff2d3f0540243813dd"},(0,a.kt)("strong",{parentName:"a"},"Client")," Step 11.1: Distinguish messages")),(0,a.kt)("h5",{id:"changed-srccomponentschatroomscreenmessageslisttsx"},"Changed src","/","components","/","ChatRoomScreen","/","MessagesList.tsx"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -2,7 +2,7 @@\n \u250a2\u250a2\u250aimport React from 'react';\n \u250a3\u250a3\u250aimport { useEffect, useRef } from 'react';\n \u250a4\u250a4\u250aimport ReactDOM from 'react-dom';\n-\u250a5\u250a \u250aimport styled from 'styled-components';\n+\u250a \u250a5\u250aimport styled, { css } from 'styled-components';\n \u250a6\u250a6\u250a\n \u250a7\u250a7\u250aconst Container = styled.div`\n \u250a8\u250a8\u250a  display: block;\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -11,9 +11,11 @@\n \u250a11\u250a11\u250a  padding: 0 15px;\n \u250a12\u250a12\u250a`;\n \u250a13\u250a13\u250a\n+\u250a  \u250a14\u250atype StyledProp = {\n+\u250a  \u250a15\u250a  isMine: any;\n+\u250a  \u250a16\u250a};\n+\u250a  \u250a17\u250a\n \u250a14\u250a18\u250aconst MessageItem = styled.div`\n-\u250a15\u250a  \u250a  float: right;\n-\u250a16\u250a  \u250a  background-color: #dcf8c6;\n \u250a17\u250a19\u250a  display: inline-block;\n \u250a18\u250a20\u250a  position: relative;\n \u250a19\u250a21\u250a  max-width: 100%;\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -30,17 +32,36 @@\n \u250a30\u250a32\u250a  }\n \u250a31\u250a33\u250a\n \u250a32\u250a34\u250a  &::before {\n-\u250a33\u250a  \u250a    background-image: url(/assets/message-mine.png);\n \u250a34\u250a35\u250a    content: '';\n \u250a35\u250a36\u250a    position: absolute;\n \u250a36\u250a37\u250a    bottom: 3px;\n \u250a37\u250a38\u250a    width: 12px;\n \u250a38\u250a39\u250a    height: 19px;\n-\u250a39\u250a  \u250a    right: -11px;\n \u250a40\u250a40\u250a    background-position: 50% 50%;\n \u250a41\u250a41\u250a    background-repeat: no-repeat;\n \u250a42\u250a42\u250a    background-size: contain;\n \u250a43\u250a43\u250a  }\n+\u250a  \u250a44\u250a\n+\u250a  \u250a45\u250a  ${(props: StyledProp) =>\n+\u250a  \u250a46\u250a    props.isMine\n+\u250a  \u250a47\u250a      ? css`\n+\u250a  \u250a48\u250a          float: right;\n+\u250a  \u250a49\u250a          background-color: #dcf8c6;\n+\u250a  \u250a50\u250a\n+\u250a  \u250a51\u250a          &::before {\n+\u250a  \u250a52\u250a            right: -11px;\n+\u250a  \u250a53\u250a            background-image: url(/assets/message-mine.png);\n+\u250a  \u250a54\u250a          }\n+\u250a  \u250a55\u250a        `\n+\u250a  \u250a56\u250a      : css`\n+\u250a  \u250a57\u250a          float: left;\n+\u250a  \u250a58\u250a          background-color: #fff;\n+\u250a  \u250a59\u250a\n+\u250a  \u250a60\u250a          &::before {\n+\u250a  \u250a61\u250a            left: -11px;\n+\u250a  \u250a62\u250a            background-image: url(/assets/message-other.png);\n+\u250a  \u250a63\u250a          }\n+\u250a  \u250a64\u250a        `}\n \u250a44\u250a65\u250a`;\n \u250a45\u250a66\u250a\n \u250a46\u250a67\u250aconst Contents = styled.div`\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -75,7 +96,6 @@\n \u250a 75\u250a 96\u250a\n \u250a 76\u250a 97\u250a  useEffect(() => {\n \u250a 77\u250a 98\u250a    if (!selfRef.current) return;\n-\u250a 78\u250a   \u250a\n \u250a 79\u250a 99\u250a    const selfDOMNode = ReactDOM.findDOMNode(selfRef.current) as HTMLElement;\n \u250a 80\u250a100\u250a    selfDOMNode.scrollTop = Number.MAX_SAFE_INTEGER;\n \u250a 81\u250a101\u250a  }, [messages.length]);\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},'@@ -83,7 +103,10 @@\n \u250a 83\u250a103\u250a  return (\n \u250a 84\u250a104\u250a    <Container ref={selfRef}>\n \u250a 85\u250a105\u250a      {messages.map((message: any) => (\n-\u250a 86\u250a   \u250a        <MessageItem data-testid="message-item" key={message.id}>\n+\u250a   \u250a106\u250a        <MessageItem\n+\u250a   \u250a107\u250a          data-testid="message-item"\n+\u250a   \u250a108\u250a          isMine={message.isMine}\n+\u250a   \u250a109\u250a          key={message.id}>\n \u250a 87\u250a110\u250a          <Contents data-testid="message-content">{message.content}</Contents>\n \u250a 88\u250a111\u250a          <Timestamp data-testid="message-date">\n \u250a 89\u250a112\u250a            {moment(message.createdAt).format(\'HH:mm\')}\n')),(0,a.kt)("h5",{id:"changed-srccomponentschatroomscreenindextsx"},"Changed src","/","components","/","ChatRoomScreen","/","index.tsx"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -68,6 +68,7 @@\n \u250a68\u250a68\u250a            __typename: 'Message',\n \u250a69\u250a69\u250a            id: Math.random().toString(36).substr(2, 9),\n \u250a70\u250a70\u250a            createdAt: new Date(),\n+\u250a  \u250a71\u250a            isMine: true,\n \u250a71\u250a72\u250a            chat: {\n \u250a72\u250a73\u250a              __typename: 'Chat',\n \u250a73\u250a74\u250a              id: chatId,\n")),(0,a.kt)("h5",{id:"changed-srccomponentschatslistscreenchatslisttesttsx"},"Changed src","/","components","/","ChatsListScreen","/","ChatsList.test.tsx"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -44,6 +44,7 @@\n \u250a44\u250a44\u250a                  id: 1,\n \u250a45\u250a45\u250a                  content: 'Hello',\n \u250a46\u250a46\u250a                  createdAt: new Date('1 Jan 2019 GMT'),\n+\u250a  \u250a47\u250a                  isMine: true,\n \u250a47\u250a48\u250a                  chat: {\n \u250a48\u250a49\u250a                    __typename: 'Chat',\n \u250a49\u250a50\u250a                    id: 1,\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -94,6 +95,7 @@\n \u250a 94\u250a 95\u250a                  id: 1,\n \u250a 95\u250a 96\u250a                  content: 'Hello',\n \u250a 96\u250a 97\u250a                  createdAt: new Date('1 Jan 2019 GMT'),\n+\u250a   \u250a 98\u250a                  isMine: true,\n \u250a 97\u250a 99\u250a                  chat: {\n \u250a 98\u250a100\u250a                    __typename: 'Chat',\n \u250a 99\u250a101\u250a                    id: 1,\n")),(0,a.kt)("h4",{id:"client-step-111-distinguish-messages-1"},(0,a.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/9809f1daf7aea03d1362d5ff2d3f0540243813dd"},(0,a.kt)("strong",{parentName:"a"},"Client")," Step 11.1: Distinguish messages")),(0,a.kt)("h5",{id:"changed-srcgraphqlfragmentsmessagefragmentts"},"Changed src","/","graphql","/","fragments","/","message.fragment.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -5,6 +5,7 @@\n \u250a 5\u250a 5\u250a    id\n \u250a 6\u250a 6\u250a    createdAt\n \u250a 7\u250a 7\u250a    content\n+\u250a  \u250a 8\u250a    isMine\n \u250a 8\u250a 9\u250a    chat {\n \u250a 9\u250a10\u250a      id\n \u250a10\u250a11\u250a    }\n")),(0,a.kt)("p",null,"This is how the updated ",(0,a.kt)("inlineCode",{parentName:"p"},"ChatRoomScreen")," should look like:"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/7648874/55326701-face8700-54ba-11e9-877e-0b7dd71a1b68.png",alt:"chat-room-screen"})),(0,a.kt)("p",null,"We can use a temporary solution to log-in and alternate between different users. This would be a good way to test data authorization without implementing an authentication mechanism. One way to know which user is logged in is via ",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies"},"cookies"),"."),(0,a.kt)("p",null,"Cookies are just text files which are stored locally on your computer and they contain key-value data maps. Cookies will be sent automatically by the browser with every HTTP request under the ",(0,a.kt)("inlineCode",{parentName:"p"},"Cookie")," header. The header can be parsed and read by the server and this way inform it about the state of the client. Cookie values can also be set by the server by sending back a response which contain a ",(0,a.kt)("inlineCode",{parentName:"p"},"Set-Cookie")," header. The browser will automatically write these cookies because of its specification and how it works."),(0,a.kt)("p",null,"This is how you can set cookies on the client:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'document.cookie = "yummy_cookie=choco"\ndocument.cookie = "tasty_cookie=strawberry"\n// logs "yummy_cookie=choco; tasty_cookie=strawberry"\n')),(0,a.kt)("p",null,"And this is how further requests would look like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"GET /sample_page.html HTTP/2.0\nHost: www.example.org\nCookie: yummy_cookie=choco; tasty_cookie=strawberry\n")),(0,a.kt)("p",null,"Using this method we can set the current user's ID. Open your browser's dev-console, and type the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// Ray Edwards\ndocument.cookie = 'currentUserId=1'\n")),(0,a.kt)("p",null,"To be able to send cookies with Apollo Client, we need to set the ",(0,a.kt)("a",{parentName:"p",href:"https://www.apollographql.com/docs/react/recipes/authentication#cookie"},(0,a.kt)("inlineCode",{parentName:"a"},"credentials")),' option to "include" when creating the HTTP link:'),(0,a.kt)("h4",{id:"client-step-112-support-credentials"},(0,a.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/5d14e18b7e71d666f804a99f2c4578a4c5fade3b"},(0,a.kt)("strong",{parentName:"a"},"Client")," Step 11.2: Support credentials")),(0,a.kt)("h5",{id:"changed-srcclientts"},"Changed src","/","client.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -10,6 +10,7 @@\n \u250a10\u250a10\u250a\n \u250a11\u250a11\u250aconst httpLink = new HttpLink({\n \u250a12\u250a12\u250a  uri: httpUri,\n+\u250a  \u250a13\u250a  credentials: 'include',\n \u250a13\u250a14\u250a});\n \u250a14\u250a15\u250a\n \u250a15\u250a16\u250aconst wsLink = new WebSocketLink({\n")),(0,a.kt)("p",null,"This will set the ",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Access-Control-Allow-Credentials"},(0,a.kt)("inlineCode",{parentName:"a"},"Access-Control-Allow-Credentials"))," header to \u201cinclude\u201d with each HTTP request which is necessary when using the POST method. In correlation to that, we would need to configure the server to be able to receive and set cookies. This can be done via CORS options like so:"),(0,a.kt)("h4",{id:"server-step-84-support-credentials"},(0,a.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/3e51f38bb115db19cf60f6c7badc2a29c8b12d3d"},(0,a.kt)("strong",{parentName:"a"},"Server")," Step 8.4: Support credentials")),(0,a.kt)("h5",{id:"changed-indexts-1"},"Changed index.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -7,7 +7,8 @@\n \u250a 7\u250a 7\u250a\n \u250a 8\u250a 8\u250aconst app = express();\n \u250a 9\u250a 9\u250a\n-\u250a10\u250a  \u250aapp.use(cors());\n+\u250a  \u250a10\u250aconst origin = process.env.ORIGIN || 'http://localhost:3000';\n+\u250a  \u250a11\u250aapp.use(cors({ credentials: true, origin }));\n \u250a11\u250a12\u250aapp.use(express.json());\n \u250a12\u250a13\u250a\n \u250a13\u250a14\u250aapp.get('/_ping', (req, res) => {\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -26,6 +27,7 @@\n \u250a26\u250a27\u250aserver.applyMiddleware({\n \u250a27\u250a28\u250a  app,\n \u250a28\u250a29\u250a  path: '/graphql',\n+\u250a  \u250a30\u250a  cors: { credentials: true, origin },\n \u250a29\u250a31\u250a});\n \u250a30\u250a32\u250a\n \u250a31\u250a33\u250aconst httpServer = http.createServer(app);\n")),(0,a.kt)("p",null,"So how exactly does one retrieve the values of the cookies? Like mentioned earlier, each and every request will have them set on the ",(0,a.kt)("inlineCode",{parentName:"p"},"cookie")," header, so one way would be by reading the header directly, but a more convenient way would be using an Express middleware called ",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/cookie-parser"},(0,a.kt)("inlineCode",{parentName:"a"},"cookie-parser")),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ yarn add cookie-parser\n")),(0,a.kt)("h4",{id:"server-step-85-use-cookie-parser"},(0,a.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/631c76a14536af1b956f8c3486e6b4431be9eff7"},(0,a.kt)("strong",{parentName:"a"},"Server")," Step 8.5: Use cookie parser")),(0,a.kt)("h5",{id:"changed-indexts-2"},"Changed index.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,5 +1,6 @@\n \u250a1\u250a1\u250aimport { ApolloServer, gql, PubSub } from 'apollo-server-express';\n \u250a2\u250a2\u250aimport cors from 'cors';\n+\u250a \u250a3\u250aimport cookieParser from 'cookie-parser';\n \u250a3\u250a4\u250aimport express from 'express';\n \u250a4\u250a5\u250aimport http from 'http';\n \u250a5\u250a6\u250aimport { users } from './db';\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -10,6 +11,7 @@\n \u250a10\u250a11\u250aconst origin = process.env.ORIGIN || 'http://localhost:3000';\n \u250a11\u250a12\u250aapp.use(cors({ credentials: true, origin }));\n \u250a12\u250a13\u250aapp.use(express.json());\n+\u250a  \u250a14\u250aapp.use(cookieParser());\n \u250a13\u250a15\u250a\n \u250a14\u250a16\u250aapp.get('/_ping', (req, res) => {\n \u250a15\u250a17\u250a  res.send('pong');\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"cookie-parser")," will read the ",(0,a.kt)("inlineCode",{parentName:"p"},"Cookie")," header, it will parse it into a JSON and will define it on ",(0,a.kt)("inlineCode",{parentName:"p"},"req.cookies"),". Since we\u2019re using Apollo-Server with Express, the ",(0,a.kt)("inlineCode",{parentName:"p"},"req")," object should be accessible as the first argument in the ",(0,a.kt)("inlineCode",{parentName:"p"},"context")," function. This means that we can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"currentUserId")," from the cookies to fetch the current user from our users collection and define it on the context object:"),(0,a.kt)("h4",{id:"server-step-86-define-current-user-based-on-cookies"},(0,a.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/a9e15a1a00cd8aabe7db9fee6c749d0068ab65f8"},(0,a.kt)("strong",{parentName:"a"},"Server")," Step 8.6: Define current user based on cookies")),(0,a.kt)("h5",{id:"changed-indexts-3"},"Changed index.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,6 +1,7 @@\n \u250a1\u250a1\u250aimport { ApolloServer, gql, PubSub } from 'apollo-server-express';\n \u250a2\u250a2\u250aimport cors from 'cors';\n \u250a3\u250a3\u250aimport cookieParser from 'cookie-parser';\n+\u250a \u250a4\u250aimport cookie from 'cookie';\n \u250a4\u250a5\u250aimport express from 'express';\n \u250a5\u250a6\u250aimport http from 'http';\n \u250a6\u250a7\u250aimport { users } from './db';\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -20,10 +21,30 @@\n \u250a20\u250a21\u250aconst pubsub = new PubSub();\n \u250a21\u250a22\u250aconst server = new ApolloServer({\n \u250a22\u250a23\u250a  schema,\n-\u250a23\u250a  \u250a  context: () => ({\n-\u250a24\u250a  \u250a    currentUser: users.find((u) => u.id === '1'),\n-\u250a25\u250a  \u250a    pubsub,\n-\u250a26\u250a  \u250a  }),\n+\u250a  \u250a24\u250a  context: (session: any) => {\n+\u250a  \u250a25\u250a    // Access the request object\n+\u250a  \u250a26\u250a    let req = session.connection\n+\u250a  \u250a27\u250a      ? session.connection.context.request\n+\u250a  \u250a28\u250a      : session.req;\n+\u250a  \u250a29\u250a\n+\u250a  \u250a30\u250a    // It's subscription\n+\u250a  \u250a31\u250a    if (session.connection) {\n+\u250a  \u250a32\u250a      req.cookies = cookie.parse(req.headers.cookie || '');\n+\u250a  \u250a33\u250a    }\n+\u250a  \u250a34\u250a\n+\u250a  \u250a35\u250a    return {\n+\u250a  \u250a36\u250a      currentUser: users.find((u) => u.id === req.cookies.currentUserId),\n+\u250a  \u250a37\u250a      pubsub,\n+\u250a  \u250a38\u250a    };\n+\u250a  \u250a39\u250a  },\n+\u250a  \u250a40\u250a  subscriptions: {\n+\u250a  \u250a41\u250a    onConnect(params, ws, ctx) {\n+\u250a  \u250a42\u250a      // pass the request object to context\n+\u250a  \u250a43\u250a      return {\n+\u250a  \u250a44\u250a        request: ctx.request,\n+\u250a  \u250a45\u250a      };\n+\u250a  \u250a46\u250a    },\n+\u250a  \u250a47\u250a  },\n \u250a27\u250a48\u250a});\n \u250a28\u250a49\u250a\n \u250a29\u250a50\u250aserver.applyMiddleware({\n")),(0,a.kt)("h5",{id:"changed-packagejson"},"Changed package.json"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},'@@ -21,6 +21,7 @@\n \u250a21\u250a21\u250a    "@graphql-codegen/typescript": "1.14.0",\n \u250a22\u250a22\u250a    "@graphql-codegen/typescript-resolvers": "1.14.0",\n \u250a23\u250a23\u250a    "@types/cors": "2.8.6",\n+\u250a  \u250a24\u250a    "@types/cookie": "0.4.0",\n \u250a24\u250a25\u250a    "@types/cookie-parser": "1.4.2",\n \u250a25\u250a26\u250a    "@types/express": "4.17.6",\n \u250a26\u250a27\u250a    "@types/graphql": "14.5.0",\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},'@@ -36,6 +37,7 @@\n \u250a36\u250a37\u250a  "dependencies": {\n \u250a37\u250a38\u250a    "apollo-server-express": "2.13.1",\n \u250a38\u250a39\u250a    "apollo-server-testing": "2.13.1",\n+\u250a  \u250a40\u250a    "cookie": "0.4.1",\n \u250a39\u250a41\u250a    "cors": "2.8.5",\n \u250a40\u250a42\u250a    "cookie-parser": "1.4.5",\n \u250a41\u250a43\u250a    "express": "4.17.1",\n')),(0,a.kt)("p",null,"Now you can go ahead and change the value of the ",(0,a.kt)("inlineCode",{parentName:"p"},"currentUserId")," cookie and see how it affects the view anytime you refresh the page. Needless to say that this is not the most convenient way to switch between users, so we\u2019re gonna implement a dedicated screen that will set the cookies for us."),(0,a.kt)("p",null,"All the auth related logic should go into a dedicated service since it can serve us vastly across the application, not just for a single component. Thus we will create a new service called ",(0,a.kt)("inlineCode",{parentName:"p"},"auth.service"),", which will contain 3 basic functions for now: ",(0,a.kt)("inlineCode",{parentName:"p"},"signIn()"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"signOut()")," and `isSignedIn():"),(0,a.kt)("h4",{id:"client-step-113-add-basic-authservice"},(0,a.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/65c43bd0e4aa01c1df4f552ec501c3ac56687cb1"},(0,a.kt)("strong",{parentName:"a"},"Client")," Step 11.3: Add basic auth.service")),(0,a.kt)("h5",{id:"added-srcservicesauthservicetsx"},"Added src","/","services","/","auth.service.tsx"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},'@@ -0,0 +1,26 @@\n+\u250a  \u250a 1\u250aimport { useCallback } from \'react\';\n+\u250a  \u250a 2\u250aimport { useApolloClient } from \'@apollo/react-hooks\';\n+\u250a  \u250a 3\u250a\n+\u250a  \u250a 4\u250aexport const signIn = (currentUserId: string) => {\n+\u250a  \u250a 5\u250a  document.cookie = `currentUserId=${currentUserId}`;\n+\u250a  \u250a 6\u250a\n+\u250a  \u250a 7\u250a  // This will become async in the near future\n+\u250a  \u250a 8\u250a  return Promise.resolve();\n+\u250a  \u250a 9\u250a};\n+\u250a  \u250a10\u250a\n+\u250a  \u250a11\u250aexport const useSignOut = () => {\n+\u250a  \u250a12\u250a  const client = useApolloClient();\n+\u250a  \u250a13\u250a\n+\u250a  \u250a14\u250a  return useCallback(() => {\n+\u250a  \u250a15\u250a    // "expires" represents the lifespan of a cookie. Beyond that date the cookie will\n+\u250a  \u250a16\u250a    // be deleted by the browser. "expires" cannot be viewed from "document.cookie"\n+\u250a  \u250a17\u250a    document.cookie = `currentUserId=;expires=${new Date(0)}`;\n+\u250a  \u250a18\u250a\n+\u250a  \u250a19\u250a    // Clear cache\n+\u250a  \u250a20\u250a    return client.clearStore();\n+\u250a  \u250a21\u250a  }, [client]);\n+\u250a  \u250a22\u250a};\n+\u250a  \u250a23\u250a\n+\u250a  \u250a24\u250aexport const isSignedIn = () => {\n+\u250a  \u250a25\u250a  return /currentUserId=.+(;|$)/.test(document.cookie);\n+\u250a  \u250a26\u250a};\n')),(0,a.kt)("p",null,"Now we will implement the ",(0,a.kt)("inlineCode",{parentName:"p"},"AuthScreen"),". For now this screen should be fairly simple.\nIt should contain a single ",(0,a.kt)("inlineCode",{parentName:"p"},"TextField")," to specify the current user ID, and a ",(0,a.kt)("inlineCode",{parentName:"p"},"sign-in")," button that will call the ",(0,a.kt)("inlineCode",{parentName:"p"},"signIn()")," method with the specified ID.\nOnce it does so, we will be proceeded to the ",(0,a.kt)("inlineCode",{parentName:"p"},"ChatsListScreen"),". First we will download and save the following assets:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/raw/master/public/assets/whatsapp-icon.png"},(0,a.kt)("inlineCode",{parentName:"a"},"src/public/assets/whatsapp-icon.png")))),(0,a.kt)("h4",{id:"client-step-114-add-authscreen"},(0,a.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/a1b19533f3e87a03f8ca51d04f4d840def034a0f"},(0,a.kt)("strong",{parentName:"a"},"Client")," Step 11.4: Add AuthScreen")),(0,a.kt)("h5",{id:"added-srccomponentsauthscreenindextsx"},"Added src","/","components","/","AuthScreen","/","index.tsx"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},'@@ -0,0 +1,167 @@\n+\u250a   \u250a  1\u250aimport MaterialButton from \'@material-ui/core/Button\';\n+\u250a   \u250a  2\u250aimport MaterialTextField from \'@material-ui/core/TextField\';\n+\u250a   \u250a  3\u250aimport React from \'react\';\n+\u250a   \u250a  4\u250aimport { useCallback, useState } from \'react\';\n+\u250a   \u250a  5\u250aimport styled from \'styled-components\';\n+\u250a   \u250a  6\u250aimport { signIn } from \'../../services/auth.service\';\n+\u250a   \u250a  7\u250aimport { useNavigate } from \'react-router-dom\';\n+\u250a   \u250a  8\u250a\n+\u250a   \u250a  9\u250aconst Container = styled.div`\n+\u250a   \u250a 10\u250a  height: 100%;\n+\u250a   \u250a 11\u250a  background: radial-gradient(rgb(34, 65, 67), rgb(17, 48, 50)),\n+\u250a   \u250a 12\u250a    url(/assets/chat-background.jpg) no-repeat;\n+\u250a   \u250a 13\u250a  background-size: cover;\n+\u250a   \u250a 14\u250a  background-blend-mode: multiply;\n+\u250a   \u250a 15\u250a  color: white;\n+\u250a   \u250a 16\u250a`;\n+\u250a   \u250a 17\u250a\n+\u250a   \u250a 18\u250aconst Intro = styled.div`\n+\u250a   \u250a 19\u250a  height: 265px;\n+\u250a   \u250a 20\u250a`;\n+\u250a   \u250a 21\u250a\n+\u250a   \u250a 22\u250aconst Icon = styled.img`\n+\u250a   \u250a 23\u250a  width: 125px;\n+\u250a   \u250a 24\u250a  height: auto;\n+\u250a   \u250a 25\u250a  margin-left: auto;\n+\u250a   \u250a 26\u250a  margin-right: auto;\n+\u250a   \u250a 27\u250a  padding-top: 70px;\n+\u250a   \u250a 28\u250a  display: block;\n+\u250a   \u250a 29\u250a`;\n+\u250a   \u250a 30\u250a\n+\u250a   \u250a 31\u250aconst Title = styled.h2`\n+\u250a   \u250a 32\u250a  width: 100%;\n+\u250a   \u250a 33\u250a  text-align: center;\n+\u250a   \u250a 34\u250a  color: white;\n+\u250a   \u250a 35\u250a`;\n+\u250a   \u250a 36\u250a\n+\u250a   \u250a 37\u250a// eslint-disable-next-line\n+\u250a   \u250a 38\u250aconst Alternative = styled.div`\n+\u250a   \u250a 39\u250a  position: fixed;\n+\u250a   \u250a 40\u250a  bottom: 10px;\n+\u250a   \u250a 41\u250a  left: 10px;\n+\u250a   \u250a 42\u250a\n+\u250a   \u250a 43\u250a  a {\n+\u250a   \u250a 44\u250a    color: var(--secondary-bg);\n+\u250a   \u250a 45\u250a  }\n+\u250a   \u250a 46\u250a`;\n+\u250a   \u250a 47\u250a\n+\u250a   \u250a 48\u250aconst SignInForm = styled.div`\n+\u250a   \u250a 49\u250a  height: calc(100% - 265px);\n+\u250a   \u250a 50\u250a`;\n+\u250a   \u250a 51\u250a\n+\u250a   \u250a 52\u250aconst ActualForm = styled.form`\n+\u250a   \u250a 53\u250a  padding: 20px;\n+\u250a   \u250a 54\u250a`;\n+\u250a   \u250a 55\u250a\n+\u250a   \u250a 56\u250aconst Section = styled.div`\n+\u250a   \u250a 57\u250a  width: 100%;\n+\u250a   \u250a 58\u250a  padding-bottom: 35px;\n+\u250a   \u250a 59\u250a`;\n+\u250a   \u250a 60\u250a\n+\u250a   \u250a 61\u250aconst Legend = styled.legend`\n+\u250a   \u250a 62\u250a  font-weight: bold;\n+\u250a   \u250a 63\u250a  color: white;\n+\u250a   \u250a 64\u250a`;\n+\u250a   \u250a 65\u250a\n+\u250a   \u250a 66\u250a// eslint-disable-next-line\n+\u250a   \u250a 67\u250aconst Label = styled.label`\n+\u250a   \u250a 68\u250a  color: white !important;\n+\u250a   \u250a 69\u250a`;\n+\u250a   \u250a 70\u250a\n+\u250a   \u250a 71\u250a// eslint-disable-next-line\n+\u250a   \u250a 72\u250aconst Input = styled.input`\n+\u250a   \u250a 73\u250a  color: white;\n+\u250a   \u250a 74\u250a\n+\u250a   \u250a 75\u250a  &::placeholder {\n+\u250a   \u250a 76\u250a    color: var(--primary-bg);\n+\u250a   \u250a 77\u250a  }\n+\u250a   \u250a 78\u250a`;\n+\u250a   \u250a 79\u250a\n+\u250a   \u250a 80\u250aconst TextField = styled(MaterialTextField)`\n+\u250a   \u250a 81\u250a  width: 100%;\n+\u250a   \u250a 82\u250a  position: relative;\n+\u250a   \u250a 83\u250a\n+\u250a   \u250a 84\u250a  > div::before {\n+\u250a   \u250a 85\u250a    border-color: white !important;\n+\u250a   \u250a 86\u250a  }\n+\u250a   \u250a 87\u250a\n+\u250a   \u250a 88\u250a  input {\n+\u250a   \u250a 89\u250a    color: white !important;\n+\u250a   \u250a 90\u250a\n+\u250a   \u250a 91\u250a    &::placeholder {\n+\u250a   \u250a 92\u250a      color: var(--primary-bg) !important;\n+\u250a   \u250a 93\u250a    }\n+\u250a   \u250a 94\u250a  }\n+\u250a   \u250a 95\u250a\n+\u250a   \u250a 96\u250a  label {\n+\u250a   \u250a 97\u250a    color: white !important;\n+\u250a   \u250a 98\u250a  }\n+\u250a   \u250a 99\u250a`;\n+\u250a   \u250a100\u250a\n+\u250a   \u250a101\u250aconst Button = styled(MaterialButton)`\n+\u250a   \u250a102\u250a  width: 100px;\n+\u250a   \u250a103\u250a  display: block !important;\n+\u250a   \u250a104\u250a  margin: auto !important;\n+\u250a   \u250a105\u250a  background-color: var(--secondary-bg) !important;\n+\u250a   \u250a106\u250a\n+\u250a   \u250a107\u250a  &[disabled] {\n+\u250a   \u250a108\u250a    color: #38a81c;\n+\u250a   \u250a109\u250a  }\n+\u250a   \u250a110\u250a\n+\u250a   \u250a111\u250a  &:not([disabled]) {\n+\u250a   \u250a112\u250a    color: white;\n+\u250a   \u250a113\u250a  }\n+\u250a   \u250a114\u250a`;\n+\u250a   \u250a115\u250a\n+\u250a   \u250a116\u250aconst AuthScreen: React.FC = () => {\n+\u250a   \u250a116\u250a  const navigate = useNavigate();\n+\u250a   \u250a117\u250a  const [userId, setUserId] = useState(\'\');\n+\u250a   \u250a118\u250a\n+\u250a   \u250a119\u250a  const onUserIdChange = useCallback(({ target }) => {\n+\u250a   \u250a120\u250a    setUserId(target.value);\n+\u250a   \u250a121\u250a  }, []);\n+\u250a   \u250a122\u250a\n+\u250a   \u250a123\u250a  const maySignIn = useCallback(() => {\n+\u250a   \u250a124\u250a    return !!userId;\n+\u250a   \u250a125\u250a  }, [userId]);\n+\u250a   \u250a126\u250a\n+\u250a   \u250a127\u250a  const handleSignIn = useCallback(() => {\n+\u250a   \u250a128\u250a    signIn(userId).then(() => {\n+\u250a   \u250a129\u250a      navigate(\'/chats\', { replace: true });\n+\u250a   \u250a130\u250a    });\n+\u250a   \u250a131\u250a  }, [userId, history]);\n+\u250a   \u250a132\u250a\n+\u250a   \u250a133\u250a  return (\n+\u250a   \u250a134\u250a    <Container>\n+\u250a   \u250a135\u250a      <Intro>\n+\u250a   \u250a136\u250a        <Icon src="assets/whatsapp-icon.png" className="AuthScreen-icon" />\n+\u250a   \u250a137\u250a        <Title className="AuthScreen-title">WhatsApp</Title>\n+\u250a   \u250a138\u250a      </Intro>\n+\u250a   \u250a139\u250a      <SignInForm>\n+\u250a   \u250a140\u250a        <ActualForm>\n+\u250a   \u250a141\u250a          <Legend>Sign in</Legend>\n+\u250a   \u250a142\u250a          <Section>\n+\u250a   \u250a143\u250a            <TextField\n+\u250a   \u250a144\u250a              data-testid="user-id-input"\n+\u250a   \u250a145\u250a              label="User ID"\n+\u250a   \u250a146\u250a              value={userId}\n+\u250a   \u250a147\u250a              onChange={onUserIdChange}\n+\u250a   \u250a148\u250a              margin="normal"\n+\u250a   \u250a149\u250a              placeholder="Enter current user ID"\n+\u250a   \u250a150\u250a            />\n+\u250a   \u250a151\u250a          </Section>\n+\u250a   \u250a152\u250a          <Button\n+\u250a   \u250a153\u250a            data-testid="sign-in-button"\n+\u250a   \u250a154\u250a            type="button"\n+\u250a   \u250a155\u250a            color="secondary"\n+\u250a   \u250a156\u250a            variant="contained"\n+\u250a   \u250a157\u250a            disabled={!maySignIn()}\n+\u250a   \u250a158\u250a            onClick={handleSignIn}>\n+\u250a   \u250a159\u250a            Sign in\n+\u250a   \u250a160\u250a          </Button>\n+\u250a   \u250a161\u250a        </ActualForm>\n+\u250a   \u250a162\u250a      </SignInForm>\n+\u250a   \u250a163\u250a    </Container>\n+\u250a   \u250a164\u250a  );\n+\u250a   \u250a165\u250a};\n+\u250a   \u250a166\u250a\n+\u250a   \u250a167\u250aexport default AuthScreen;\n')),(0,a.kt)("p",null,"Accordingly we will define a new ",(0,a.kt)("inlineCode",{parentName:"p"},"/sign/in")," route that will render the ",(0,a.kt)("inlineCode",{parentName:"p"},"AuthScreen")," we\u2019re under that path name:"),(0,a.kt)("h4",{id:"client-step-114-add-authscreen-1"},(0,a.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/a1b19533f3e87a03f8ca51d04f4d840def034a0f"},(0,a.kt)("strong",{parentName:"a"},"Client")," Step 11.4: Add AuthScreen")),(0,a.kt)("h5",{id:"changed-srcapptsx"},"Changed src","/","App.tsx"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -5,6 +5,7 @@\n\n \u250a 7\u250a 7\u250a} from 'react-router-dom';\n+\u250a  \u250a 8\u250aimport AuthScreen from './components/AuthScreen';\n \u250a 8\u250a 9\u250aimport ChatRoomScreen from './components/ChatRoomScreen';\n \u250a 9\u250a10\u250aimport ChatsListScreen from './components/ChatsListScreen';\n \u250a10\u250a11\u250aimport AnimatedSwitch from './components/AnimatedSwitch';\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},'@@ -16,6 +17,7 @@\n \u250a16\u250a17\u250a  return (\n \u250a17\u250a18\u250a    <BrowserRouter>\n \u250a18\u250a19\u250a      <Routes>\n+\u250a  \u250a20\u250a        <Route path="/sign/(in|up)" element={<AuthScreen />} />\n \u250a19\u250a21\u250a        <Route path="/chats" element={<ChatsListScreen />} />\n \u250a20\u250a22\u250a\n \u250a21\u250a23\u250a        <Route\n')),(0,a.kt)("p",null,"This is how the new screen should look like:"),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/7648874/55606715-7a56a180-57ac-11e9-8eea-2da5931cccf5.png",alt:"auth-screen"})),(0,a.kt)("p",null,"Now let\u2019s type the ",(0,a.kt)("inlineCode",{parentName:"p"},"/sign/in")," route in our browser\u2019s navigation bar and assign a user ID, see how it affects what chats we see in the ",(0,a.kt)("inlineCode",{parentName:"p"},"ChatsListScreen"),". You\u2019ve probably noticed that there\u2019s no way to escape from the ",(0,a.kt)("inlineCode",{parentName:"p"},"/chats")," route unless we edit the browser\u2019s navigation bar manually. To fix that, we will add a new sign-out button to the navbar of the ",(0,a.kt)("inlineCode",{parentName:"p"},"ChatsListScreen")," that will call the ",(0,a.kt)("inlineCode",{parentName:"p"},"signOut()")," method anytime we click on it, and will bring us back to the ",(0,a.kt)("inlineCode",{parentName:"p"},"AuthScreen"),":"),(0,a.kt)("h4",{id:"client-step-115-add-sign-out-button-that-chatsnavbar"},(0,a.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/8008d81bd58781ba8cb05a4f993f3636fc176404"},(0,a.kt)("strong",{parentName:"a"},"Client")," Step 11.5: Add sign-out button that ChatsNavbar")),(0,a.kt)("h5",{id:"changed-srccomponentschatslistscreenchatsnavbartsx"},"Changed src","/","components","/","ChatsListScreen","/","ChatsNavbar.tsx"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,14 +1,48 @@\n \u250a 1\u250a 1\u250aimport React from 'react';\n-\u250a 2\u250a  \u250aimport { Toolbar } from '@material-ui/core';\n+\u250a  \u250a 2\u250aimport { Button, Toolbar } from '@material-ui/core';\n \u250a 3\u250a 3\u250aimport styled from 'styled-components';\n+\u250a  \u250a 4\u250aimport SignOutIcon from '@material-ui/icons/PowerSettingsNew';\n+\u250a  \u250a 5\u250aimport { useCallback } from 'react';\n+\u250a  \u250a 6\u250aimport { useSignOut } from '../../services/auth.service';\n+\u250a  \u250a 7\u250aimport { useNavigate } from 'react-router-dom';\n \u250a 4\u250a 8\u250a\n \u250a 5\u250a 9\u250aconst Container = styled(Toolbar)`\n+\u250a  \u250a10\u250a  display: flex;\n \u250a 6\u250a11\u250a  background-color: var(--primary-bg);\n \u250a 7\u250a12\u250a  color: var(--primary-text);\n \u250a 8\u250a13\u250a  font-size: 20px;\n \u250a 9\u250a14\u250a  line-height: 40px;\n \u250a10\u250a15\u250a`;\n \u250a11\u250a16\u250a\n-\u250a12\u250a  \u250aconst ChatsNavbar: React.FC = () => <Container>Whatsapp Clone</Container>;\n+\u250a  \u250a17\u250aconst Title = styled.div`\n+\u250a  \u250a18\u250a  flex: 1;\n+\u250a  \u250a19\u250a`;\n+\u250a  \u250a20\u250a\n+\u250a  \u250a21\u250aconst LogoutButton = styled(Button)`\n+\u250a  \u250a22\u250a  color: var(--primary-text) !important;\n+\u250a  \u250a23\u250a`;\n+\u250a  \u250a24\u250a\n+\u250a  \u250a29\u250aconst ChatsNavbar: React.FC = () => {\n+\u250a  \u250a30\u250a  const navigate = useNavigate();\n+\u250a  \u250a30\u250a  const signOut = useSignOut();\n+\u250a  \u250a31\u250a\n+\u250a  \u250a32\u250a  const handleSignOut = useCallback(() => {\n+\u250a  \u250a33\u250a    signOut().then(() => {\n+\u250a  \u250a34\u250a      navigate('/sign/in', { replace: true });\n+\u250a  \u250a35\u250a    });\n+\u250a  \u250a36\u250a  }, [history, signOut]);\n+\u250a  \u250a37\u250a\n+\u250a  \u250a38\u250a  return (\n+\u250a  \u250a39\u250a    <Container>\n+\u250a  \u250a40\u250a      <Title>Whatsapp Clone</Title>\n+\u250a  \u250a41\u250a      <LogoutButton data-testid=\"sign-out-button\" onClick={handleSignOut}>\n+\u250a  \u250a42\u250a        <SignOutIcon />\n+\u250a  \u250a43\u250a      </LogoutButton>\n+\u250a  \u250a44\u250a    </Container>\n+\u250a  \u250a45\u250a  );\n+\u250a  \u250a46\u250a};\n \u250a13\u250a47\u250a\n \u250a14\u250a48\u250aexport default ChatsNavbar;\n")),(0,a.kt)("p",null,"At this point we\u2019ve got everything we need, but we will add a small touch to improve the user experience and make it feel more complete. Users who aren\u2019t logged in shouldn\u2019t be able to view any screen besides the ",(0,a.kt)("inlineCode",{parentName:"p"},"AuthScreen"),". First they need to sign-in, and only then they will be able to view the ",(0,a.kt)("inlineCode",{parentName:"p"},"ChatsListScreen")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"ChatRoomScreen"),". To achieve that, we will wrap all the components which require authentication before we provide them into their routes. This wrap will basically check whether a user is logged in or not by reading the cookies, and if not we will be redirected to the ",(0,a.kt)("inlineCode",{parentName:"p"},"/sign/in")," route. Let\u2019s implement that wrapper component in the ",(0,a.kt)("inlineCode",{parentName:"p"},"auth.service")," and call it ",(0,a.kt)("inlineCode",{parentName:"p"},"WithAuth"),":"),(0,a.kt)("h4",{id:"client-step-116-add-withauth-route-wrapper"},(0,a.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/0f38f546ebf2d24267bb9e4006d95b6299384940"},(0,a.kt)("strong",{parentName:"a"},"Client")," Step 11.6: Add withAuth() route wrapper")),(0,a.kt)("h5",{id:"changed-srcservicesauthservicetsx"},"Changed src","/","services","/","auth.service.tsx"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,5 +1,26 @@\n+\u250a  \u250a 1\u250aimport React, { PropsWithChildren } from 'react';\n \u250a 1\u250a 2\u250aimport { useCallback } from 'react';\n \u250a 2\u250a 3\u250aimport { useApolloClient } from '@apollo/react-hooks';\n+\u250a  \u250a 4\u250aimport { Navigate, useLocation } from 'react-router-dom';\n+\u250a  \u250a 5\u250aimport { useCacheService } from './cache.service';\n+\u250a  \u250a 6\u250a\n+\u250a  \u250a 7\u250aexport const WithAuth: React.FC = ({\n+\u250a  \u250a 8\u250a  children,\n+\u250a  \u250a 9\u250a}: PropsWithChildren<{}>) => {\n+\u250a  \u250a10\u250a  const location = useLocation();\n+\u250a  \u250a11\u250a  if (!isSignedIn()) {\n+\u250a  \u250a12\u250a    if (location.pathname === '/sign/in') {\n+\u250a  \u250a13\u250a      return null;\n+\u250a  \u250a14\u250a    }\n+\u250a  \u250a15\u250a\n+\u250a  \u250a16\u250a    return <Navigate to=\"/sign/in\" />;\n+\u250a  \u250a17\u250a  }\n+\u250a  \u250a18\u250a\n+\u250a  \u250a19\u250a  useCacheService();\n+\u250a  \u250a20\u250a\n+\u250a  \u250a21\u250a  return <Component {...(props as P)} />;\n+\u250a  \u250a23\u250a};\n \u250a 3\u250a24\u250a\n \u250a 4\u250a25\u250aexport const signIn = (currentUserId: string) => {\n \u250a 5\u250a26\u250a  document.cookie = `currentUserId=${currentUserId}`;\n")),(0,a.kt)("p",null,"We will use this component to wrap the right components in our app\u2019s router. Note that since we used the ",(0,a.kt)("inlineCode",{parentName:"p"},"useCacheService()")," directly in the ",(0,a.kt)("inlineCode",{parentName:"p"},"WithAuth")," component, there\u2019s no need to use it in the router itself anymore. This makes a lot more sense since there\u2019s no need to stay subscribed to data that you're not gonna receive from the first place unless you\u2019re logged-in:"),(0,a.kt)("h4",{id:"client-step-116-add-withauth-route-wrapper-1"},(0,a.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/0f38f546ebf2d24267bb9e4006d95b6299384940"},(0,a.kt)("strong",{parentName:"a"},"Client")," Step 11.6: Add withAuth() route wrapper")),(0,a.kt)("h5",{id:"changed-srcapptsx-1"},"Changed src","/","App.tsx"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},'@@ -9,32 +9,27 @@\n-\u250a12\u250a  \u250aimport { useCacheService } from \'./services/cache.service\';\n+\u250a  \u250a12\u250aimport { WithAuth } from \'./services/auth.service\';\n \u250a13\u250a13\u250a\n-\u250a14\u250a  \u250aconst App: React.FC = () => {\n-\u250a15\u250a  \u250a  useCacheService();\n+\u250a  \u250a14\u250aconst App: React.FC = () => (\n+\u250a  \u250a15\u250a  <BrowserRouter>\n+\u250a  \u250a16\u250a    <Routes>\n+\u250a  \u250a16\u250a      <Route path="/sign/(in|up)" element={<AuthScreen />}>\n+\u250a  \u250a17\u250a      <Route\n+\u250a  \u250a17\u250a        path="/chats"\n+\u250a  \u250a18\u250a        element={\n+\u250a  \u250a18\u250a          <WithAuth>\n+\u250a  \u250a18\u250a            <ChatsListScreen />\n+\u250a  \u250a18\u250a          </WithAuth>\n+\u250a  \u250a18\u250a        }\n+\u250a  \u250a18\u250a      />\n \u250a16\u250a19\u250a\n-\u250a17\u250a  \u250a  return (\n-\u250a18\u250a  \u250a    <BrowserRouter>\n-\u250a19\u250a  \u250a      <Routes>\n-\u250a20\u250a  \u250a        <Route path="/sign-(in|up)" element={<AuthScreen />} />\n-\u250a21\u250a  \u250a        <Route path="/chats" element={<ChatsListScreen />} />\n-\u250a23\u250a  \u250a        <Route\n-\u250a25\u250a  \u250a          path="/chats/:chatId"\n-\u250a26\u250a  \u250a          element={<ChatRoomScreen/>}\n+\u250a  \u250a20\u250a      <Route\n+\u250a  \u250a22\u250a        path="/chats/:chatId"\n+\u250a  \u250a23\u250a        element={\n+\u250a  \u250a24\u250a          <WithAuth>\n \u250a30\u250a25\u250a            <ChatRoomScreen />\n+\u250a  \u250a24\u250a          </WithAuth>\n+\u250a  \u250a24\u250a        }\n-\u250a31\u250a  \u250a          }\n-\u250a32\u250a  \u250a        />\n-\u250a34\u250a  \u250a        <Route path="/" element={<Navigate to ="/chats" />} />\n-\u250a33\u250a  \u250a      </Routes>\n-\u250a35\u250a  \u250a    </BrowserRouter>\n-\u250a36\u250a  \u250a  );\n-\u250a37\u250a  \u250a};\n+\u250a  \u250a28\u250a      />\n+\u250a  \u250a30\u250a      <Route path="/" element={<Navigate to ="/chats" />} />\n+\u250a  \u250a29\u250a    </Routes>\n+\u250a  \u250a31\u250a  </BrowserRouter>\n+\u250a  \u250a32\u250a);\n \u250a38\u250a33\u250a\n \u250a39\u250a34\u250aconst redirectToChats = () => <Redirect to="/chats" />;\n \u250a40\u250a35\u250a\n')),(0,a.kt)("p",null,"Assuming that you\u2019re not logged-in, if you\u2019ll try to force navigate to the ",(0,a.kt)("inlineCode",{parentName:"p"},"/chats")," route you should be automatically redirected to the ",(0,a.kt)("inlineCode",{parentName:"p"},"/sign/in")," form. We will finish the chapter here as we wanna keep things simple and gradual. It\u2019s true that we haven\u2019t implemented true authentication, but that would be addressed soon further in this tutorial."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"left"},(0,a.kt)("a",{parentName:"th",href:"https://github.com/Urigo/WhatsApp-Clone-Tutorial/tree/master@next/.tortilla/manuals/views/step10.md"},"< Previous Step")),(0,a.kt)("th",{parentName:"tr",align:"right"},(0,a.kt)("a",{parentName:"th",href:"https://github.com/Urigo/WhatsApp-Clone-Tutorial/tree/master@next/.tortilla/manuals/views/step12.md"},"Next Step >"))))))}d.isMDXComponent=!0}}]);