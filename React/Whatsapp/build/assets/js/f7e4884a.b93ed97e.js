"use strict";(self.webpackChunkovrsea_whatsapp_tuto=self.webpackChunkovrsea_whatsapp_tuto||[]).push([[4133],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),h=p(n),m=r,u=h["".concat(l,".").concat(m)]||h[m]||c[m]||s;return n?a.createElement(u,i(i({ref:t},d),{},{components:n})):a.createElement(u,i({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=h;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var p=2;p<s;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},1545:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const s={sidebar_label:"Step 3: Setup a basic Node.JS server with a basic REST endpoint",sidebar_position:3},i="Step 3: Setup a basic Node.JS server with a basic REST endpoint",o={unversionedId:"tuto-whatsapp/step3",id:"version-1.1.0/tuto-whatsapp/step3",title:"Step 3: Setup a basic Node.JS server with a basic REST endpoint",description:"[//]: # (head-end)",source:"@site/versioned_docs/version-1.1.0/tuto-whatsapp/step3.md",sourceDirName:"tuto-whatsapp",slug:"/tuto-whatsapp/step3",permalink:"/docs/tuto-whatsapp/step3",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/versioned_docs/version-1.1.0/tuto-whatsapp/step3.md",tags:[],version:"1.1.0",sidebarPosition:3,frontMatter:{sidebar_label:"Step 3: Setup a basic Node.JS server with a basic REST endpoint",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Step 2: Styling with Material UI and styled-components",permalink:"/docs/tuto-whatsapp/step2"},next:{title:"Step 4: Transition to GraphQL",permalink:"/docs/tuto-whatsapp/step4"}},l={},p=[{value:"<strong>Server</strong> Step 1.1: Create start script",id:"server-step-11-create-start-script",level:4},{value:"Added index.js",id:"added-indexjs",level:5},{value:"<strong>Server</strong> Step 1.2: Setup TypeScript",id:"server-step-12-setup-typescript",level:4},{value:"Added tsconfig.json",id:"added-tsconfigjson",level:5},{value:"<strong>Server</strong> Step 1.3: Setup a Express with a basic health check route",id:"server-step-13-setup-a-express-with-a-basic-health-check-route",level:4},{value:"Changed index.ts",id:"changed-indexts",level:5},{value:"<strong>Server</strong> Step 1.4: Use Prettier",id:"server-step-14-use-prettier",level:4},{value:"Added .prettierignore",id:"added-prettierignore",level:5},{value:"Added .prettierrc.yml",id:"added-prettierrcyml",level:5},{value:"Changed package.json",id:"changed-packagejson",level:5},{value:"<strong>Server</strong> Step 1.4: Use Prettier",id:"server-step-14-use-prettier-1",level:4},{value:"Changed index.ts",id:"changed-indexts-1",level:5},{value:"<strong>Server</strong> Step 1.5: Create GET /chats route",id:"server-step-15-create-get-chats-route",level:4},{value:"Added db.ts",id:"added-dbts",level:5},{value:"Changed index.ts",id:"changed-indexts-2",level:5},{value:"<strong>Server</strong> Step 1.6: Use CORS",id:"server-step-16-use-cors",level:4},{value:"Changed index.ts",id:"changed-indexts-3",level:5},{value:"<strong>Client</strong> Step 3.1: Define server URL",id:"client-step-31-define-server-url",level:4},{value:"Added .env",id:"added-env",level:5},{value:"<strong>Client</strong> Step 3.2: Fetch chats using native fetch API instead of mock DB",id:"client-step-32-fetch-chats-using-native-fetch-api-instead-of-mock-db",level:4},{value:"Changed src/components/ChatsListScreen/ChatsList.tsx",id:"changed-srccomponentschatslistscreenchatslisttsx",level:5},{value:"Deleted src/db.ts",id:"deleted-srcdbts",level:5}],d={toc:p};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"step-3-setup-a-basic-nodejs-server-with-a-basic-rest-endpoint"},"Step 3: Setup a basic Node.JS server with a basic REST endpoint"),(0,r.kt)("p",null,"Currently we have a running app with a single screen which looks stylish and presents some data to the user."),(0,r.kt)("p",null,"There is something missing though - The data that we are displaying can't be changed in any way."),(0,r.kt)("p",null,"But even if we change the data there is still a more fundamental issue - all of the data lives on the client."),(0,r.kt)("p",null,"That means that each client has its own copy of the data and the data is not shared between them,\nif a client creates a new message, only that client will have the new message and not the client the message was sent to."),(0,r.kt)("p",null,"Also if the client shuts down, all the data will be lost."),(0,r.kt)("p",null,"So how can we have a place to put the data that is being shared between all clients?"),(0,r.kt)("p",null,"We should find a central machine that all clients will connect to and get the data from.\nIf some client wants to create a new message, it will create it on that central machine so that the next time another clients will ask for the available messages,\nall those messages will be available on the central machine."),(0,r.kt)("p",null,"That central machine that stores data is called a database and the machine that communicates between the database and the client is called a server."),(0,r.kt)("p",null,"In this step, we will write a NodeJS server (server that runs using the Javascript language) and will expose a REST endpoint that will serve the data-mock.\nWe will build the REST application using ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/express"},"Express"),".\nLater in this tutorial we will migrate to using a real data-base with real I/O from the user, because at this point, if the server shuts down all data will be lost."),(0,r.kt)("p",null,"The plan is to have a server up and running at ",(0,r.kt)("inlineCode",{parentName:"p"},"localhost:4000")," that will expose a ",(0,r.kt)("inlineCode",{parentName:"p"},"GET /chats")," route.\nUnlike our client application, we're not gonna use any boilerplate and we're gonna set everything up manually."),(0,r.kt)("p",null,"Right outside the client project, we will create a new directory called ",(0,r.kt)("inlineCode",{parentName:"p"},"whatsapp-clone-server")," in which we will start creating our server:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ mkdir whatsapp-clone-server\n$ cd whatsapp-clone-server\n")),(0,r.kt)("p",null,"Then we will use ",(0,r.kt)("inlineCode",{parentName:"p"},"Yarn")," to initialize a new project:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ yarn init -yp\n")),(0,r.kt)("p",null,"There's nothing special about this command, it only creates a basic ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json")," file.\nJust to make sure that things work, we will add an ",(0,r.kt)("inlineCode",{parentName:"p"},"index.js")," file which will print ",(0,r.kt)("inlineCode",{parentName:"p"},'"hello world"')," to the console."),(0,r.kt)("h4",{id:"server-step-11-create-start-script"},(0,r.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/711adadd03669bb16871f880d4b6d1af5b8e2706"},(0,r.kt)("strong",{parentName:"a"},"Server")," Step 1.1: Create start script")),(0,r.kt)("h5",{id:"added-indexjs"},"Added index.js"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1 @@\n+\u250a \u250a1\u250aconsole.log('hello world')\n")),(0,r.kt)("p",null,"And we will add a startup script to the ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json")," file called ",(0,r.kt)("inlineCode",{parentName:"p"},"start"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'"scripts": {\n  "start": "node index.js"\n}\n')),(0,r.kt)("p",null,"TODO: Format on save"),(0,r.kt)("p",null,"NPM-scripts are just a way to define an alias for commands. Now we only have one simple script,\nbut it can turn out to be something very complex depending on our server, so it can be very useful.\nMore about npm-scripts can be found in the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.npmjs.com/misc/scripts"},"official NPM docs"),"."),(0,r.kt)("p",null,"Now we can run our server by running ",(0,r.kt)("inlineCode",{parentName:"p"},"$ yarn start"),' and we should see the message "hello world" printed to the console, as expected.'),(0,r.kt)("p",null,"Like in our client's app, we will be using TypeScript.\nIn order to use TypeScript we will install a few packages:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ yarn add --dev typescript ts-node @types/node\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Note how we used the ",(0,r.kt)("inlineCode",{parentName:"p"},"--dev")," flag. It is a good practice to separate between production dependencies and development dependencies.\nThat way when you deploy your server to the real environment, you won't install the unnecessary development dependencies there.\nMore about the ",(0,r.kt)("inlineCode",{parentName:"p"},"--dev")," option can be read in the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.npmjs.com/cli/install"},"NPM-install docs"),".")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/typescript"},(0,r.kt)("inlineCode",{parentName:"a"},"typescript"))," package is TypeScript's core transpiler."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/ts-node"},(0,r.kt)("inlineCode",{parentName:"a"},"ts-node"))," is an interpreter that will transpile required ",(0,r.kt)("inlineCode",{parentName:"li"},".ts")," files into JavaScript at runtime."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.npmjs.com/package/@types/node"},(0,r.kt)("inlineCode",{parentName:"a"},"@types/node"))," will make the appropriate definitions for a Node.JS environment.")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"You can read more about the ",(0,r.kt)("inlineCode",{parentName:"p"},"@types")," monorepo in the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/DefinitelyTyped/DefinitelyTyped"},"official GitHub repository"),".")),(0,r.kt)("p",null,"We will rename the ",(0,r.kt)("inlineCode",{parentName:"p"},"index.js")," file to ",(0,r.kt)("inlineCode",{parentName:"p"},"index.ts"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ mv index.js index.ts\n")),(0,r.kt)("p",null,"Now we need to compile the ",(0,r.kt)("inlineCode",{parentName:"p"},"ts")," file to turn it into a Javascript file the Node can run."),(0,r.kt)("p",null,"For that we will use Typescript and its ",(0,r.kt)("inlineCode",{parentName:"p"},"tsc")," command.\nThe command has many options, but instead of writing them in the command line, we can specify them in a ",(0,r.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," file at the root of the project."),(0,r.kt)("p",null,"Our server is gonna use the following ",(0,r.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," file, feel free to make the necessary modifications based on your needs:"),(0,r.kt)("h4",{id:"server-step-12-setup-typescript"},(0,r.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/1b7f0a5ec850cd10985092c8cc15c8fa9dde4db4"},(0,r.kt)("strong",{parentName:"a"},"Server")," Step 1.2: Setup TypeScript")),(0,r.kt)("h5",{id:"added-tsconfigjson"},"Added tsconfig.json"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},'@@ -0,0 +1,13 @@\n+\u250a  \u250a 1\u250a{\n+\u250a  \u250a 2\u250a  "compilerOptions": {\n+\u250a  \u250a 3\u250a    "target": "es2020",\n+\u250a  \u250a 4\u250a    "module": "commonjs",\n+\u250a  \u250a 5\u250a    "skipLibCheck": true,\n+\u250a  \u250a 6\u250a    "strict": true,\n+\u250a  \u250a 7\u250a    "strictFunctionTypes": false,\n+\u250a  \u250a 8\u250a    "strictPropertyInitialization": false,\n+\u250a  \u250a 9\u250a    "esModuleInterop": true,\n+\u250a  \u250a10\u250a    "experimentalDecorators": true,\n+\u250a  \u250a11\u250a    "emitDecoratorMetadata": true\n+\u250a  \u250a12\u250a  }\n+\u250a  \u250a13\u250a}\n')),(0,r.kt)("p",null,"Now let's run ",(0,r.kt)("inlineCode",{parentName:"p"},"tsc")," and see what happens."),(0,r.kt)("p",null,"We've got a new ",(0,r.kt)("inlineCode",{parentName:"p"},"index.js")," file!  Now let's run it by running ",(0,r.kt)("inlineCode",{parentName:"p"},"node index.js"),"."),(0,r.kt)("p",null,"That's great, but doing this work each time we change a file can be annoying,\nso let's use tools to track when files change and make them run the code automatically after."),(0,r.kt)("p",null,"Let's update the npm-script ",(0,r.kt)("inlineCode",{parentName:"p"},"start")," to use ",(0,r.kt)("inlineCode",{parentName:"p"},"ts-node"),", since we wanna use TypeScript,\nand not JavaScript directly:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'"start": "ts-node index.ts"\n')),(0,r.kt)("p",null,"We can test the startup of our server again by running ",(0,r.kt)("inlineCode",{parentName:"p"},"$ yarn start"),' and we should see the message "hello world" printed to the console.'),(0,r.kt)("p",null,"The skeleton of the project is set and we can move on to implementing the REST API."),(0,r.kt)("p",null,"Like we said at the beginning, we will be using Express to setup the API. Express is a wrapper around the native ",(0,r.kt)("a",{parentName:"p",href:"https://nodejs.org/api/http.html"},'Node.JS "http"')," library which is responsible for handling HTTP requests.\nYes, it can also be used directly, but Express is much more comfortable and has an amazing ecosystem built around it.\nLet's install Express and its TypeScript definitions:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ yarn add express\n$ yarn add --dev @types/express\n")),(0,r.kt)("p",null,"Before we implement the ",(0,r.kt)("inlineCode",{parentName:"p"},"GET /chats")," route we will implement a ",(0,r.kt)("inlineCode",{parentName:"p"},"GET /_ping"),' route. This route will be used to determine whether the server is up and running,\nand how fast the connection is based on the response time.\nFor every request sent to this route, we should expect a response saying "pong".\nSome call it "heartbeat", because this route is being tested repeatedly by the hosting machine to check if it\'s alive, just like a heartbeat in a way.\nThis is how the route should look like:'),(0,r.kt)("h4",{id:"server-step-13-setup-a-express-with-a-basic-health-check-route"},(0,r.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/62db6e653d8a72e26f0cd5deea9026b6a92f2522"},(0,r.kt)("strong",{parentName:"a"},"Server")," Step 1.3: Setup a Express with a basic health check route")),(0,r.kt)("h5",{id:"changed-indexts"},"Changed index.ts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1 +1,13 @@\n-\u250a 1\u250a  \u250aconsole.log('hello world')\n+\u250a  \u250a 1\u250aimport express from 'express'\n+\u250a  \u250a 2\u250a\n+\u250a  \u250a 3\u250aconst app = express()\n+\u250a  \u250a 4\u250a\n+\u250a  \u250a 5\u250aapp.get('/_ping', (req, res) => {\n+\u250a  \u250a 6\u250a  res.send('pong')\n+\u250a  \u250a 7\u250a})\n+\u250a  \u250a 8\u250a\n+\u250a  \u250a 9\u250aconst port = process.env.PORT || 4000\n+\u250a  \u250a10\u250a\n+\u250a  \u250a11\u250aapp.listen(port, () => {\n+\u250a  \u250a12\u250a  console.log(`Server is listening on port ${port}`)\n+\u250a  \u250a13\u250a})\n")),(0,r.kt)("p",null,"We can use the"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    $ curl localhost:4000/_ping\n")),(0,r.kt)("p",null,'command to send a request to the server and we should get a "pong", assuming that the server available on that URL.'),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Code formatting")),(0,r.kt)("p",null,"Just like we talked in the first chapter, some developers write code in a different style than others and since we want to make it consistent, we're going to use ",(0,r.kt)("strong",{parentName:"p"},"Prettier"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ yarn add --dev prettier\n")),(0,r.kt)("p",null,"We're going to define a npm script called ",(0,r.kt)("inlineCode",{parentName:"p"},"format"),", few styling rules and we're also going to ignore ",(0,r.kt)("em",{parentName:"p"},"node_modules"),":"),(0,r.kt)("h4",{id:"server-step-14-use-prettier"},(0,r.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/f12fde47393a056db59acd431d81f8a4035e14b9"},(0,r.kt)("strong",{parentName:"a"},"Server")," Step 1.4: Use Prettier")),(0,r.kt)("h5",{id:"added-prettierignore"},"Added .prettierignore"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,2 @@\n+\u250a \u250a1\u250anode_modules\n+\u250a \u250a2\u250a.prettierrc.yml\ud83d\udeab\u21b5\n")),(0,r.kt)("h5",{id:"added-prettierrcyml"},"Added .prettierrc.yml"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,2 @@\n+\u250a \u250a1\u250asingleQuote: true\n+\u250a \u250a2\u250aparser: 'typescript'\n")),(0,r.kt)("h5",{id:"changed-packagejson"},"Changed package.json"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},'@@ -7,11 +7,13 @@\n \u250a 7\u250a 7\u250a  },\n \u250a 8\u250a 8\u250a  "private": true,\n \u250a 9\u250a 9\u250a  "scripts": {\n-\u250a10\u250a  \u250a    "start": "ts-node index.ts"\n+\u250a  \u250a10\u250a    "start": "ts-node index.ts",\n+\u250a  \u250a11\u250a    "format": "prettier \\"**/*.ts\\" --write"\n \u250a11\u250a12\u250a  },\n \u250a12\u250a13\u250a  "devDependencies": {\n \u250a13\u250a14\u250a    "@types/express": "4.17.6",\n \u250a14\u250a15\u250a    "@types/node": "14.0.4",\n+\u250a  \u250a16\u250a    "prettier": "2.0.5",\n \u250a15\u250a17\u250a    "ts-node": "8.10.1",\n \u250a16\u250a18\u250a    "typescript": "3.9.3"\n \u250a17\u250a19\u250a  },\n')),(0,r.kt)("p",null,"Now let's run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ yarn format\n")),(0,r.kt)("p",null,"Prettier should format your code:"),(0,r.kt)("h4",{id:"server-step-14-use-prettier-1"},(0,r.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/f12fde47393a056db59acd431d81f8a4035e14b9"},(0,r.kt)("strong",{parentName:"a"},"Server")," Step 1.4: Use Prettier")),(0,r.kt)("h5",{id:"changed-indexts-1"},"Changed index.ts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,13 +1,13 @@\n-\u250a 1\u250a  \u250aimport express from 'express'\n+\u250a  \u250a 1\u250aimport express from 'express';\n \u250a 2\u250a 2\u250a\n-\u250a 3\u250a  \u250aconst app = express()\n+\u250a  \u250a 3\u250aconst app = express();\n \u250a 4\u250a 4\u250a\n \u250a 5\u250a 5\u250aapp.get('/_ping', (req, res) => {\n-\u250a 6\u250a  \u250a  res.send('pong')\n-\u250a 7\u250a  \u250a})\n+\u250a  \u250a 6\u250a  res.send('pong');\n+\u250a  \u250a 7\u250a});\n \u250a 8\u250a 8\u250a\n-\u250a 9\u250a  \u250aconst port = process.env.PORT || 4000\n+\u250a  \u250a 9\u250aconst port = process.env.PORT || 4000;\n \u250a10\u250a10\u250a\n \u250a11\u250a11\u250aapp.listen(port, () => {\n-\u250a12\u250a  \u250a  console.log(`Server is listening on port ${port}`)\n-\u250a13\u250a  \u250a})\n+\u250a  \u250a12\u250a  console.log(`Server is listening on port ${port}`);\n+\u250a  \u250a13\u250a});\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Remember to run ",(0,r.kt)("inlineCode",{parentName:"p"},"yarn prettier")," before you comit your changes!")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"GET /chats"),' should be implemented similarly, only the response is different. Instead of returning "pong" we will return the data-mock for our chats:'),(0,r.kt)("h4",{id:"server-step-15-create-get-chats-route"},(0,r.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/20f0a327b1c68354caf84b3071829c580441987d"},(0,r.kt)("strong",{parentName:"a"},"Server")," Step 1.5: Create GET /chats route")),(0,r.kt)("h5",{id:"added-dbts"},"Added db.ts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,51 @@\n+\u250a  \u250a 1\u250aexport const messages = [\n+\u250a  \u250a 2\u250a  {\n+\u250a  \u250a 3\u250a    id: '1',\n+\u250a  \u250a 4\u250a    content: 'You on your way?',\n+\u250a  \u250a 5\u250a    createdAt: new Date(new Date('1-1-2019').getTime() - 60 * 1000 * 1000),\n+\u250a  \u250a 6\u250a  },\n+\u250a  \u250a 7\u250a  {\n+\u250a  \u250a 8\u250a    id: '2',\n+\u250a  \u250a 9\u250a    content: \"Hey, it's me\",\n+\u250a  \u250a10\u250a    createdAt: new Date(new Date('1-1-2019').getTime() - 2 * 60 * 1000 * 1000),\n+\u250a  \u250a11\u250a  },\n+\u250a  \u250a12\u250a  {\n+\u250a  \u250a13\u250a    id: '3',\n+\u250a  \u250a14\u250a    content: 'I should buy a boat',\n+\u250a  \u250a15\u250a    createdAt: new Date(new Date('1-1-2019').getTime() - 24 * 60 * 1000 * 1000),\n+\u250a  \u250a16\u250a  },\n+\u250a  \u250a17\u250a  {\n+\u250a  \u250a18\u250a    id: '4',\n+\u250a  \u250a19\u250a    content: 'This is wicked good ice cream.',\n+\u250a  \u250a20\u250a    createdAt: new Date(\n+\u250a  \u250a21\u250a      new Date('1-1-2019').getTime() - 14 * 24 * 60 * 1000 * 1000\n+\u250a  \u250a22\u250a    ),\n+\u250a  \u250a23\u250a  },\n+\u250a  \u250a24\u250a];\n+\u250a  \u250a25\u250a\n+\u250a  \u250a26\u250aexport const chats = [\n+\u250a  \u250a27\u250a  {\n+\u250a  \u250a28\u250a    id: '1',\n+\u250a  \u250a29\u250a    name: 'Ethan Gonzalez',\n+\u250a  \u250a30\u250a    picture: 'https://randomuser.me/api/portraits/thumb/men/1.jpg',\n+\u250a  \u250a31\u250a    lastMessage: '1',\n+\u250a  \u250a32\u250a  },\n+\u250a  \u250a33\u250a  {\n+\u250a  \u250a34\u250a    id: '2',\n+\u250a  \u250a35\u250a    name: 'Bryan Wallace',\n+\u250a  \u250a36\u250a    picture: 'https://randomuser.me/api/portraits/thumb/men/2.jpg',\n+\u250a  \u250a37\u250a    lastMessage: '2',\n+\u250a  \u250a38\u250a  },\n+\u250a  \u250a39\u250a  {\n+\u250a  \u250a40\u250a    id: '3',\n+\u250a  \u250a41\u250a    name: 'Avery Stewart',\n+\u250a  \u250a42\u250a    picture: 'https://randomuser.me/api/portraits/thumb/women/1.jpg',\n+\u250a  \u250a43\u250a    lastMessage: '3',\n+\u250a  \u250a44\u250a  },\n+\u250a  \u250a45\u250a  {\n+\u250a  \u250a46\u250a    id: '4',\n+\u250a  \u250a47\u250a    name: 'Katie Peterson',\n+\u250a  \u250a48\u250a    picture: 'https://randomuser.me/api/portraits/thumb/women/2.jpg',\n+\u250a  \u250a49\u250a    lastMessage: '4',\n+\u250a  \u250a50\u250a  },\n+\u250a  \u250a51\u250a];\n")),(0,r.kt)("h5",{id:"changed-indexts-2"},"Changed index.ts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,4 +1,5 @@\n \u250a1\u250a1\u250aimport express from 'express';\n+\u250a \u250a2\u250aimport { chats } from './db';\n \u250a2\u250a3\u250a\n \u250a3\u250a4\u250aconst app = express();\n \u250a4\u250a5\u250a\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -6,6 +7,10 @@\n \u250a 6\u250a 7\u250a  res.send('pong');\n \u250a 7\u250a 8\u250a});\n \u250a 8\u250a 9\u250a\n+\u250a  \u250a10\u250aapp.get('/chats', (req, res) => {\n+\u250a  \u250a11\u250a  res.json(chats);\n+\u250a  \u250a12\u250a});\n+\u250a  \u250a13\u250a\n \u250a 9\u250a14\u250aconst port = process.env.PORT || 4000;\n \u250a10\u250a15\u250a\n \u250a11\u250a16\u250aapp.listen(port, () => {\n")),(0,r.kt)("p",null,"TODO: Mention ",(0,r.kt)("inlineCode",{parentName:"p"},"_req")),(0,r.kt)("p",null,"Check that we can get the chats by running:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"    $ curl localhost:4000/chats\n")),(0,r.kt)("p",null,"Unlike the previous route, we used the ",(0,r.kt)("inlineCode",{parentName:"p"},".json()")," method this time around to send a response. This will simply stringify the given JSON and set the right headers.\nSimilarly to the client, we've defined the db mock in a dedicated file, as this is easier to maintain and look at."),(0,r.kt)("p",null,"It's also recommended to connect a middleware called ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/cors"},(0,r.kt)("inlineCode",{parentName:"a"},"cors"))," which will enable cross-origin requests.\nWithout it we will only be able to make requests in localhost, something which is likely to limit us in the future because we would probably host our server somewhere separate than the client application.\nWithout it it will also be impossible to call the server from our client app.\nLet's install the ",(0,r.kt)("inlineCode",{parentName:"p"},"cors")," library and load it with the Express ",(0,r.kt)("inlineCode",{parentName:"p"},"middleware()")," function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ yarn add cors\n")),(0,r.kt)("p",null,"and its Typescript types:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ yarn add --dev @types/cors\n")),(0,r.kt)("h4",{id:"server-step-16-use-cors"},(0,r.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/102b93bdec2f4d6e1dccb66d473d4d7de4d9c983"},(0,r.kt)("strong",{parentName:"a"},"Server")," Step 1.6: Use CORS")),(0,r.kt)("h5",{id:"changed-indexts-3"},"Changed index.ts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,8 +1,11 @@\n+\u250a  \u250a 1\u250aimport cors from 'cors';\n \u250a 1\u250a 2\u250aimport express from 'express';\n \u250a 2\u250a 3\u250aimport { chats } from './db';\n \u250a 3\u250a 4\u250a\n \u250a 4\u250a 5\u250aconst app = express();\n \u250a 5\u250a 6\u250a\n+\u250a  \u250a 7\u250aapp.use(cors());\n+\u250a  \u250a 8\u250a\n \u250a 6\u250a 9\u250aapp.get('/_ping', (req, res) => {\n \u250a 7\u250a10\u250a  res.send('pong');\n \u250a 8\u250a11\u250a});\n")),(0,r.kt)("p",null,"The server is now ready to use!"),(0,r.kt)("p",null,"So getting back to the client, first we will define our server's URL under the ",(0,r.kt)("inlineCode",{parentName:"p"},".env")," file:"),(0,r.kt)("h4",{id:"client-step-31-define-server-url"},(0,r.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/2cbdb094276e31fce41b143a30c72d09fb2c92a2"},(0,r.kt)("strong",{parentName:"a"},"Client")," Step 3.1: Define server URL")),(0,r.kt)("h5",{id:"added-env"},"Added .env"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1 @@\n+\u250a \u250a1\u250aREACT_APP_SERVER_URL=http://localhost:4000\ud83d\udeab\u21b5\n")),(0,r.kt)("p",null,"This will make our server's URL available under the ",(0,r.kt)("inlineCode",{parentName:"p"},"process.env.REACT_APP_SERVER_URL")," member expression and it will be replaced with a fixed value at build time, just like macros.\nThe ",(0,r.kt)("inlineCode",{parentName:"p"},".env")," file is a file which will automatically be loaded to ",(0,r.kt)("inlineCode",{parentName:"p"},"process.env")," by the ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/dotenv"},(0,r.kt)("inlineCode",{parentName:"a"},"dotenv"))," NPM package.\n",(0,r.kt)("inlineCode",{parentName:"p"},"react-scripts")," then filters environment variables which have a ",(0,r.kt)("inlineCode",{parentName:"p"},"REACT_APP_")," prefix and provides the created JSON to a Webpack plugin called ",(0,r.kt)("a",{parentName:"p",href:"https://webpack.js.org/plugins/define-plugin/"},"DefinePlugin"),", which will result in the macro effect."),(0,r.kt)("p",null,"Now let's move back into our React app folder.\nWe will now replace the local data-mock usage with a fetch from the server.\nFor that we can use the native ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"},"fetch API"),",\nhowever, it needs to be used in the right life-cycle hook of the React.Component."),(0,r.kt)("p",null,"There are 2 naive approaches for that:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Calling ",(0,r.kt)("inlineCode",{parentName:"li"},"fetch()")," outside the component, but this way that chats will be fetched even if we're not even intending to create an instance of the component.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"fetch().then(() => /* ... */)\nconst MyComponent = () => {}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Calling ",(0,r.kt)("inlineCode",{parentName:"li"},"fetch()")," inside the component, but then it will be invoked whenever the component is re-rendered.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const MyComponent = () => {\n  fetch().then(() => /* ... */)\n}\n")),(0,r.kt)("p",null,"These 2 approaches indeed work, but they both fail to deliver what's necessary on the right time.\nIn addition, there's no way to properly coordinate async function calls with the render method of the component."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Introducing: React hooks")),(0,r.kt)("p",null,"With React hooks we can invoke the desired logic in the right life-cycle stage of the target component.\nThis way we can avoid potential memory leaks or extra calculations.\nTo implement a proper ",(0,r.kt)("inlineCode",{parentName:"p"},"fetch()"),", we will be using 2 React hooks:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://reactjs.org/docs/hooks-reference.html#usestate"},(0,r.kt)("inlineCode",{parentName:"a"},"React.useState()"))," - which is used to get and set a state of the component - will be used to store the chats fetched from the server.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const [value, setValue] = useState(initialValue);\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://reactjs.org/docs/hooks-reference.html#usememo"},(0,r.kt)("inlineCode",{parentName:"a"},"React.useMemo()"))," - which is used to run a computation only once certain conditions were met - will be used to run the ",(0,r.kt)("inlineCode",{parentName:"li"},"fetch()")," function only once the component has mounted.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"const memoizedValue = useMemo(calcFn, [cond1, cond2, ...conds]);\n")),(0,r.kt)("p",null,"The result of that approach will look like this, in the context of our ChatsList component:"),(0,r.kt)("h4",{id:"client-step-32-fetch-chats-using-native-fetch-api-instead-of-mock-db"},(0,r.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/7dde51d3a665c63de671a410c2ab69065fdb8e9a"},(0,r.kt)("strong",{parentName:"a"},"Client")," Step 3.2: Fetch chats using native fetch API instead of mock DB")),(0,r.kt)("h5",{id:"changed-srccomponentschatslistscreenchatslisttsx"},"Changed src","/","components","/","ChatsListScreen","/","ChatsList.tsx"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,8 +1,8 @@\n \u250a1\u250a1\u250aimport React from 'react';\n-\u250a2\u250a \u250aimport { chats } from '../../db';\n \u250a3\u250a2\u250aimport moment from 'moment';\n \u250a4\u250a3\u250aimport { List, ListItem } from '@material-ui/core';\n \u250a5\u250a4\u250aimport styled from 'styled-components';\n+\u250a \u250a5\u250aimport { useState, useMemo } from 'react';\n \u250a6\u250a6\u250a\n \u250a7\u250a7\u250aconst Container = styled.div`\n \u250a8\u250a8\u250a  height: calc(100% - 56px);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -56,27 +56,37 @@\n \u250a56\u250a56\u250a  font-size: 13px;\n \u250a57\u250a57\u250a`;\n \u250a58\u250a58\u250a\n-\u250a59\u250a  \u250aconst ChatsList = () => (\n-\u250a60\u250a  \u250a  <Container>\n-\u250a61\u250a  \u250a    <StyledList>\n-\u250a62\u250a  \u250a      {chats.map((chat) => (\n-\u250a63\u250a  \u250a        <StyledListItem key={chat.id} button>\n-\u250a64\u250a  \u250a          <ChatPicture src={chat.picture} alt=\"Profile\" />\n-\u250a65\u250a  \u250a          <ChatInfo>\n-\u250a66\u250a  \u250a            <ChatName>{chat.name}</ChatName>\n-\u250a67\u250a  \u250a            {chat.lastMessage && (\n-\u250a68\u250a  \u250a              <>\n-\u250a69\u250a  \u250a                <MessageContent>{chat.lastMessage.content}</MessageContent>\n-\u250a70\u250a  \u250a                <MessageDate>\n-\u250a71\u250a  \u250a                  {moment(chat.lastMessage.createdAt).format('HH:mm')}\n-\u250a72\u250a  \u250a                </MessageDate>\n-\u250a73\u250a  \u250a              </>\n-\u250a74\u250a  \u250a            )}\n-\u250a75\u250a  \u250a          </ChatInfo>\n-\u250a76\u250a  \u250a        </StyledListItem>\n-\u250a77\u250a  \u250a      ))}\n-\u250a78\u250a  \u250a    </StyledList>\n-\u250a79\u250a  \u250a  </Container>\n-\u250a80\u250a  \u250a);\n+\u250a  \u250a59\u250aconst ChatsList = () => {\n+\u250a  \u250a60\u250a  const [chats, setChats] = useState<any[]>([]);\n+\u250a  \u250a61\u250a\n+\u250a  \u250a62\u250a  useMemo(async () => {\n+\u250a  \u250a63\u250a    const body = await fetch(`${process.env.REACT_APP_SERVER_URL}/chats`);\n+\u250a  \u250a64\u250a    const chats = await body.json();\n+\u250a  \u250a65\u250a    setChats(chats);\n+\u250a  \u250a66\u250a  }, []);\n+\u250a  \u250a67\u250a\n+\u250a  \u250a68\u250a  return (\n+\u250a  \u250a69\u250a    <Container>\n+\u250a  \u250a70\u250a      <StyledList>\n+\u250a  \u250a71\u250a        {chats.map((chat) => (\n+\u250a  \u250a72\u250a          <StyledListItem key={chat!.id} button>\n+\u250a  \u250a73\u250a            <ChatPicture src={chat.picture} alt=\"Profile\" />\n+\u250a  \u250a74\u250a            <ChatInfo>\n+\u250a  \u250a75\u250a              <ChatName>{chat.name}</ChatName>\n+\u250a  \u250a76\u250a              {chat.lastMessage && (\n+\u250a  \u250a77\u250a                <>\n+\u250a  \u250a78\u250a                  <MessageContent>{chat.lastMessage.content}</MessageContent>\n+\u250a  \u250a79\u250a                  <MessageDate>\n+\u250a  \u250a80\u250a                    {moment(chat.lastMessage.createdAt).format('HH:mm')}\n+\u250a  \u250a81\u250a                  </MessageDate>\n+\u250a  \u250a82\u250a                </>\n+\u250a  \u250a83\u250a              )}\n+\u250a  \u250a84\u250a            </ChatInfo>\n+\u250a  \u250a85\u250a          </StyledListItem>\n+\u250a  \u250a86\u250a        ))}\n+\u250a  \u250a87\u250a      </StyledList>\n+\u250a  \u250a88\u250a    </Container>\n+\u250a  \u250a89\u250a  );\n+\u250a  \u250a90\u250a};\n \u250a81\u250a91\u250a\n \u250a82\u250a92\u250aexport default ChatsList;\n")),(0,r.kt)("h5",{id:"deleted-srcdbts"},"Deleted src","/","db.ts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,49 +0,0 @@\n-\u250a 1\u250a  \u250aexport const messages = [\n-\u250a 2\u250a  \u250a  {\n-\u250a 3\u250a  \u250a    id: '1',\n-\u250a 4\u250a  \u250a    content: 'You on your way?',\n-\u250a 5\u250a  \u250a    createdAt: new Date(Date.now() - 60 * 1000 * 1000),\n-\u250a 6\u250a  \u250a  },\n-\u250a 7\u250a  \u250a  {\n-\u250a 8\u250a  \u250a    id: '2',\n-\u250a 9\u250a  \u250a    content: \"Hey, it's me\",\n-\u250a10\u250a  \u250a    createdAt: new Date(Date.now() - 2 * 60 * 1000 * 1000),\n-\u250a11\u250a  \u250a  },\n-\u250a12\u250a  \u250a  {\n-\u250a13\u250a  \u250a    id: '3',\n-\u250a14\u250a  \u250a    content: 'I should buy a boat',\n-\u250a15\u250a  \u250a    createdAt: new Date(Date.now() - 24 * 60 * 1000 * 1000),\n-\u250a16\u250a  \u250a  },\n-\u250a17\u250a  \u250a  {\n-\u250a18\u250a  \u250a    id: '4',\n-\u250a19\u250a  \u250a    content: 'This is wicked good ice cream.',\n-\u250a20\u250a  \u250a    createdAt: new Date(Date.now() - 14 * 24 * 60 * 1000 * 1000),\n-\u250a21\u250a  \u250a  },\n-\u250a22\u250a  \u250a];\n-\u250a23\u250a  \u250a\n-\u250a24\u250a  \u250aexport const chats = [\n-\u250a25\u250a  \u250a  {\n-\u250a26\u250a  \u250a    id: '1',\n-\u250a27\u250a  \u250a    name: 'Ethan Gonzalez',\n-\u250a28\u250a  \u250a    picture: 'https://randomuser.me/api/portraits/thumb/men/1.jpg',\n-\u250a29\u250a  \u250a    lastMessage: messages.find((m) => m.id === '1'),\n-\u250a30\u250a  \u250a  },\n-\u250a31\u250a  \u250a  {\n-\u250a32\u250a  \u250a    id: '2',\n-\u250a33\u250a  \u250a    name: 'Bryan Wallace',\n-\u250a34\u250a  \u250a    picture: 'https://randomuser.me/api/portraits/thumb/men/2.jpg',\n-\u250a35\u250a  \u250a    lastMessage: messages.find((m) => m.id === '2'),\n-\u250a36\u250a  \u250a  },\n-\u250a37\u250a  \u250a  {\n-\u250a38\u250a  \u250a    id: '3',\n-\u250a39\u250a  \u250a    name: 'Avery Stewart',\n-\u250a40\u250a  \u250a    picture: 'https://randomuser.me/api/portraits/thumb/women/1.jpg',\n-\u250a41\u250a  \u250a    lastMessage: messages.find((m) => m.id === '3'),\n-\u250a42\u250a  \u250a  },\n-\u250a43\u250a  \u250a  {\n-\u250a44\u250a  \u250a    id: '4',\n-\u250a45\u250a  \u250a    name: 'Katie Peterson',\n-\u250a46\u250a  \u250a    picture: 'https://randomuser.me/api/portraits/thumb/women/2.jpg',\n-\u250a47\u250a  \u250a    lastMessage: messages.find((m) => m.id === '4'),\n-\u250a48\u250a  \u250a  },\n-\u250a49\u250a  \u250a];\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"It's recommended to read about React hooks and their basic concept at the ",(0,r.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/hooks-overview.html"},"official React docs page"),".")),(0,r.kt)("p",null,"At this point we can get rid of ",(0,r.kt)("inlineCode",{parentName:"p"},"db.ts")," file in the client, since we don't use it anymore:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ rm src/db.ts\n")),(0,r.kt)("p",null,"That's it. Our ChatsListScreen is now connected to a working back-end.\nIn the next step we will upgrade our REST API into a GraphQL API and we will create a basis for a more robust back-end."),(0,r.kt)("hr",null),(0,r.kt)("p",null,"TODO:"),(0,r.kt)("p",null,"First, ",(0,r.kt)("inlineCode",{parentName:"p"},"tsc")," has a ",(0,r.kt)("inlineCode",{parentName:"p"},"--watch")," option so that if the Typescript files changed it will compile them again and spit new Javascript files."),(0,r.kt)("p",null,"Then we need to rerun the Node server everytime the output Javascript files has changed.\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/remy/nodemon"},"nodemon")," is a tool that tracks file and if the files changed it will re-run our node server."),(0,r.kt)("p",null,'Let\'s create a new npm script called "watch" and make it run both tools:'),(0,r.kt)("p",null,"TODO: New diff"),(0,r.kt)("p",null,"TODO: ",(0,r.kt)("a",{parentName:"p",href:"https://stackoverflow.com/a/39172660/1426570"},"https://stackoverflow.com/a/39172660/1426570")),(0,r.kt)("p",null,"TODO: Better watch, also watch and copy schema files (maybe in a later chapter)?"),(0,r.kt)("p",null,"TODO: concurrently - because it works on all environments"),(0,r.kt)("p",null,"TODO: Explain what -r register command does in Node and in Jest"),(0,r.kt)("p",null,"TODO: Talk about the difference between graphql-import and graphql-import-node"),(0,r.kt)("p",null,"TODO: Show debugging"),(0,r.kt)("p",null,"It's a bit annoying that we get the compiled file right next to our Typescript file, so let's move it into a separate folder:"),(0,r.kt)("p",null,"TODO: New diff for the ",(0,r.kt)("inlineCode",{parentName:"p"},"lib")," folder update"),(0,r.kt)("p",null,"TODO: why ",(0,r.kt)("inlineCode",{parentName:"p"},"useMemo(fn, [true])")," instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"useEffect(fn, [])")," ?"),(0,r.kt)("p",null,"TODO: Move to hooks in a separate commit and later change to call the server"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"th",href:"https://github.com/Urigo/WhatsApp-Clone-Tutorial/tree/master@next/.tortilla/manuals/views/step2.md"},"< Previous Step")),(0,r.kt)("th",{parentName:"tr",align:"right"},(0,r.kt)("a",{parentName:"th",href:"https://github.com/Urigo/WhatsApp-Clone-Tutorial/tree/master@next/.tortilla/manuals/views/step4.md"},"Next Step >"))))))}c.isMDXComponent=!0}}]);