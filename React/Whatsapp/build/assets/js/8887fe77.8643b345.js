"use strict";(self.webpackChunkovrsea_whatsapp_tuto=self.webpackChunkovrsea_whatsapp_tuto||[]).push([[5075],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)t=s[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),l=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,s=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=l(t),m=a,g=u["".concat(p,".").concat(m)]||u[m]||d[m]||s;return t?r.createElement(g,o(o({ref:n},c),{},{components:t})):r.createElement(g,o({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var s=t.length,o=new Array(s);o[0]=u;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var l=2;l<s;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5906:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var r=t(7462),a=(t(7294),t(3905));const s={sidebar_label:"Step 13: Authentication",sidebar_position:13},o="Step 13: Authentication",i={unversionedId:"tuto-whatsapp/step13",id:"version-1.0.0/tuto-whatsapp/step13",title:"Step 13: Authentication",description:"[//]: # (head-end)",source:"@site/versioned_docs/version-1.0.0/tuto-whatsapp/step13.md",sourceDirName:"tuto-whatsapp",slug:"/tuto-whatsapp/step13",permalink:"/docs/1.0.0/tuto-whatsapp/step13",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/versioned_docs/version-1.0.0/tuto-whatsapp/step13.md",tags:[],version:"1.0.0",sidebarPosition:13,frontMatter:{sidebar_label:"Step 13: Authentication",sidebar_position:13},sidebar:"tutorialSidebar",previous:{title:"Step 12: Adding and removing chats",permalink:"/docs/1.0.0/tuto-whatsapp/step12"},next:{title:"Step 14: Migrating to PostgreSQL",permalink:"/docs/1.0.0/tuto-whatsapp/step14"}},p={},l=[{value:"<strong>Server</strong> Step 10.1: Separate app into a different module",id:"server-step-101-separate-app-into-a-different-module",level:4},{value:"Added app.ts",id:"added-appts",level:5},{value:"Added env.ts",id:"added-envts",level:5},{value:"Changed index.ts",id:"changed-indexts",level:5},{value:"<strong>Server</strong> Step 10.2: Add signIn mutation",id:"server-step-102-add-signin-mutation",level:4},{value:"Changed context.ts",id:"changed-contextts",level:5},{value:"Changed env.ts",id:"changed-envts",level:5},{value:"Changed index.ts",id:"changed-indexts-1",level:5},{value:"Changed package.json",id:"changed-packagejson",level:5},{value:"Changed schema/resolvers.ts",id:"changed-schemaresolversts",level:5},{value:"Changed schema/typeDefs.graphql",id:"changed-schematypedefsgraphql",level:5},{value:"<strong>Server</strong> Step 10.3: Get current user from auth token",id:"server-step-103-get-current-user-from-auth-token",level:4},{value:"Changed index.ts",id:"changed-indexts-2",level:5},{value:"<strong>Server</strong> Step 10.4: Update user schema to contain credentials",id:"server-step-104-update-user-schema-to-contain-credentials",level:4},{value:"Changed db.ts",id:"changed-dbts",level:5},{value:"<strong>Client</strong> Step 13.1: Use authToken cookie",id:"client-step-131-use-authtoken-cookie",level:4},{value:"Changed src/services/auth.service.tsx",id:"changed-srcservicesauthservicetsx",level:5},{value:"<strong>Client</strong> Step 13.2: Update auth service to call signIn mutation",id:"client-step-132-update-auth-service-to-call-signin-mutation",level:4},{value:"Added src/graphql/mutations/index.ts",id:"added-srcgraphqlmutationsindexts",level:5},{value:"Added src/graphql/mutations/signIn.mutation.ts",id:"added-srcgraphqlmutationssigninmutationts",level:5},{value:"<strong>Client</strong> Step 13.2: Update auth service to call signIn mutation",id:"client-step-132-update-auth-service-to-call-signin-mutation-1",level:4},{value:"<strong>Client</strong> Step 13.2: Update auth service to call signIn mutation",id:"client-step-132-update-auth-service-to-call-signin-mutation-2",level:4},{value:"Changed src/services/auth.service.tsx",id:"changed-srcservicesauthservicetsx-1",level:5},{value:"<strong>Server</strong> Step 10.5: Add Query.me",id:"server-step-105-add-queryme",level:4},{value:"Changed schema/resolvers.ts",id:"changed-schemaresolversts-1",level:5},{value:"Changed schema/typeDefs.graphql",id:"changed-schematypedefsgraphql-1",level:5},{value:"Added tests/queries/getMe.test.ts",id:"added-testsqueriesgetmetestts",level:5},{value:"<strong>Client</strong> Step 13.3: Validate auth token against the back-end on restricted route",id:"client-step-133-validate-auth-token-against-the-back-end-on-restricted-route",level:4},{value:"Added src/graphql/queries/me.query.ts",id:"added-srcgraphqlqueriesmequeryts",level:5},{value:"Changed src/services/auth.service.tsx",id:"changed-srcservicesauthservicetsx-2",level:5},{value:"<strong>Client</strong> Step 13.4: Add username and password to AuthScreen",id:"client-step-134-add-username-and-password-to-authscreen",level:4},{value:"Changed src/components/AuthScreen/index.tsx",id:"changed-srccomponentsauthscreenindextsx",level:5},{value:"<strong>Server</strong> Step 10.6: Add signUp mutation",id:"server-step-106-add-signup-mutation",level:4},{value:"Added validators.ts",id:"added-validatorsts",level:5},{value:"<strong>Server</strong> Step 10.6: Add signUp mutation",id:"server-step-106-add-signup-mutation-1",level:4},{value:"Changed schema/resolvers.ts",id:"changed-schemaresolversts-2",level:5},{value:"Changed schema/typeDefs.graphql",id:"changed-schematypedefsgraphql-2",level:5},{value:"<strong>Client</strong> Step 13.5: Add signUp() method to auth.service",id:"client-step-135-add-signup-method-to-authservice",level:4},{value:"Added src/graphql/mutations/signUp.mutation.ts",id:"added-srcgraphqlmutationssignupmutationts",level:5},{value:"Changed src/services/auth.service.tsx",id:"changed-srcservicesauthservicetsx-3",level:5},{value:"<strong>Client</strong> Step 13.6: Split AuthScreen into SignInForm and SignUpForm",id:"client-step-136-split-authscreen-into-signinform-and-signupform",level:4},{value:"Added src/components/AuthScreen/SignInForm.test.tsx",id:"added-srccomponentsauthscreensigninformtesttsx",level:5},{value:"Added src/components/AuthScreen/SignInForm.tsx",id:"added-srccomponentsauthscreensigninformtsx",level:5},{value:"Added src/components/AuthScreen/SignUpForm.test.tsx",id:"added-srccomponentsauthscreensignupformtesttsx",level:5},{value:"Added src/components/AuthScreen/SignUpForm.tsx",id:"added-srccomponentsauthscreensignupformtsx",level:5},{value:"Added src/components/AuthScreen/form-components.ts",id:"added-srccomponentsauthscreenform-componentsts",level:5},{value:"Changed src/components/AuthScreen/index.tsx",id:"changed-srccomponentsauthscreenindextsx-1",level:5},{value:"<strong>Client</strong> Step 13.6: Split AuthScreen into SignInForm and SignUpForm",id:"client-step-136-split-authscreen-into-signinform-and-signupform-1",level:4},{value:"Added src/components/AuthScreen/SignInForm.test.tsx",id:"added-srccomponentsauthscreensigninformtesttsx-1",level:5},{value:"Added src/components/AuthScreen/SignInForm.tsx",id:"added-srccomponentsauthscreensigninformtsx-1",level:5},{value:"Added src/components/AuthScreen/SignUpForm.test.tsx",id:"added-srccomponentsauthscreensignupformtesttsx-1",level:5},{value:"Added src/components/AuthScreen/SignUpForm.tsx",id:"added-srccomponentsauthscreensignupformtsx-1",level:5},{value:"Added src/components/AuthScreen/form-components.ts",id:"added-srccomponentsauthscreenform-componentsts-1",level:5},{value:"Changed src/components/AuthScreen/index.tsx",id:"changed-srccomponentsauthscreenindextsx-2",level:5}],c={toc:l};function d(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"step-13-authentication"},"Step 13: Authentication"),(0,a.kt)("p",null,"In the previous step we\u2019ve set the ground for the authentication system in our app. We have a users collection which can be used to distinguish which data the client is authorized to view, and we have a context handler which can retrieve the current user logged in based on the received value of the ",(0,a.kt)("inlineCode",{parentName:"p"},"cookie")," header. It\u2019s definitely a good starting point, but it misses a lot of things."),(0,a.kt)("p",null,"In this chapter we will implement a cookie-based authentication system. There are many ways to implement an authentication system in an app, but cookie-based authentication is one of the most popular ones, hence we will go with that method. Essentially the authentication flow in our app should look very simple: a user will be able to sign-in with a dedicated screen, and if he doesn\u2019t own an account he can use the sign-up screen to create a new one. The more complicated part in this flow is the back-end, which is the core of this chapter. So before we get into the implementation, we need to understand the authentication process:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A user logs in with a username and a password.\nThe server compares the received username and password to the ones stored in the database."),(0,a.kt)("li",{parentName:"ul"},"If the comparison was successful, the server will generate a token and will set it as a cookie."),(0,a.kt)("li",{parentName:"ul"},"Each time a request is sent, the server will retrieve the username from the stored token on the cookie header and will send data back accordingly.")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/7648874/55929679-55e94200-5c50-11e9-9fe7-54ad6194a572.png",alt:"auth-flow"})),(0,a.kt)("p",null,"The stored token will save us the hassle of re-specifying the username and password over and over again each and every request. It\u2019s important to note that everything in the authentication process is encrypted, ",(0,a.kt)("strong",{parentName:"p"},"sensitive information will never be stored or sent in its raw form"),", otherwise data might be stolen in case of a DB breach or a request hijacking. This is what it means for our app:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Passwords will always be stored in an encrypted form in the DB using an algorithm called ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Bcrypt"},"Bcrypt"),". Bcrypt has the ability to compare the password in its raw form to the encrypted one, which can help us authorize the user.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Tokens are self contained. That means that once we decode the encrypted string we can get a hold of the username string. This form of encrypted tokens is called ",(0,a.kt)("a",{parentName:"p",href:"https://jwt.io/"},"Json Web Token (JWT)"),"."))),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"We're not going to elaborate about the algorithm behind each encryption method because we want to focus more on practicality, although it's very much recommended to understand how each method works before proceeding.")),(0,a.kt)("p",null,"The implementation will follow the principles above. Authentication is a hot topic in the GraphQL world and there are several ways of doing so. We will start with the back-end and set the infrastructure for authentication, and then we will move on to the front-end."),(0,a.kt)("p",null,"We\u2019re gonna expose 2 new mutations from GraphQL Schema: ",(0,a.kt)("inlineCode",{parentName:"p"},"signIn")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"signUp"),". ",(0,a.kt)("inlineCode",{parentName:"p"},"/sign-out")," is unnecessary because it can be done locally by deleting the right cookie. Our back-end is gonna grow bigger so first we will separate the Express app from the Apollo Server instance, and extract the env vars to a dedicated module:"),(0,a.kt)("h4",{id:"server-step-101-separate-app-into-a-different-module"},(0,a.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/9e61318bfa394b55ca4e7169090135d6956a0185"},(0,a.kt)("strong",{parentName:"a"},"Server")," Step 10.1: Separate app into a different module")),(0,a.kt)("h5",{id:"added-appts"},"Added app.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,14 @@\n+\u250a  \u250a 1\u250aimport cors from 'cors';\n+\u250a  \u250a 2\u250aimport cookieParser from 'cookie-parser';\n+\u250a  \u250a 3\u250aimport express from 'express';\n+\u250a  \u250a 4\u250aimport { origin } from './env';\n+\u250a  \u250a 5\u250a\n+\u250a  \u250a 6\u250aexport const app = express();\n+\u250a  \u250a 7\u250a\n+\u250a  \u250a 8\u250aapp.use(cors({ credentials: true, origin }));\n+\u250a  \u250a 9\u250aapp.use(express.json());\n+\u250a  \u250a10\u250aapp.use(cookieParser());\n+\u250a  \u250a11\u250a\n+\u250a  \u250a12\u250aapp.get('/_ping', (req, res) => {\n+\u250a  \u250a13\u250a  res.send('pong');\n+\u250a  \u250a14\u250a});\n")),(0,a.kt)("h5",{id:"added-envts"},"Added env.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,2 @@\n+\u250a \u250a1\u250aexport const origin = process.env.ORIGIN || 'http://localhost:3000';\n+\u250a \u250a2\u250aexport const port = process.env.PORT || 4000;\n")),(0,a.kt)("h5",{id:"changed-indexts"},"Changed index.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,23 +1,11 @@\n \u250a 1\u250a 1\u250aimport { ApolloServer, gql, PubSub } from 'apollo-server-express';\n-\u250a 2\u250a  \u250aimport cors from 'cors';\n-\u250a 3\u250a  \u250aimport cookieParser from 'cookie-parser';\n \u250a 4\u250a 2\u250aimport cookie from 'cookie';\n-\u250a 5\u250a  \u250aimport express from 'express';\n \u250a 6\u250a 3\u250aimport http from 'http';\n+\u250a  \u250a 4\u250aimport { app } from './app';\n \u250a 7\u250a 5\u250aimport { users } from './db';\n+\u250a  \u250a 6\u250aimport { origin, port } from './env';\n \u250a 8\u250a 7\u250aimport schema from './schema';\n \u250a 9\u250a 8\u250a\n-\u250a10\u250a  \u250aconst app = express();\n-\u250a11\u250a  \u250a\n-\u250a12\u250a  \u250aconst origin = process.env.ORIGIN || 'http://localhost:3000';\n-\u250a13\u250a  \u250aapp.use(cors({ credentials: true, origin }));\n-\u250a14\u250a  \u250aapp.use(express.json());\n-\u250a15\u250a  \u250aapp.use(cookieParser());\n-\u250a16\u250a  \u250a\n-\u250a17\u250a  \u250aapp.get('/_ping', (req, res) => {\n-\u250a18\u250a  \u250a  res.send('pong');\n-\u250a19\u250a  \u250a});\n-\u250a20\u250a  \u250a\n \u250a21\u250a 9\u250aconst pubsub = new PubSub();\n \u250a22\u250a10\u250aconst server = new ApolloServer({\n \u250a23\u250a11\u250a  schema,\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -56,8 +44,6 @@\n \u250a56\u250a44\u250aconst httpServer = http.createServer(app);\n \u250a57\u250a45\u250aserver.installSubscriptionHandlers(httpServer);\n \u250a58\u250a46\u250a\n-\u250a59\u250a  \u250aconst port = process.env.PORT || 4000;\n-\u250a60\u250a  \u250a\n \u250a61\u250a47\u250ahttpServer.listen(port, () => {\n \u250a62\u250a48\u250a  console.log(`Server is listening on port ${port}`);\n \u250a63\u250a49\u250a});\n")),(0,a.kt)("p",null,"We will first start with the ",(0,a.kt)("inlineCode",{parentName:"p"},"signIn")," mutation, so we can test it against pre-defined user credentials, and then we will proceed to implementing the ",(0,a.kt)("inlineCode",{parentName:"p"},"signUp")," mutation. It would be a lot easier to progress this way. For that we will install a couple of packages:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"bcrypt")," - which is responsible for running a one-way encryption against received passwords before they\u2019re stored in the DB.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"jsonwebtoken")," - responsible for encrypting the logged-in username before it\u2019s set as a cooky and decrypting it once it\u2019s sent back with a request."),(0,a.kt)("p",{parentName:"li"},"  $ yarn add bcrypt jsonwebtoken"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ yarn add --dev @types/bcrypt @types/jsonwebtoken\n")),(0,a.kt)("p",null,"And we will implement the ",(0,a.kt)("inlineCode",{parentName:"p"},"signIn")," mutation:"),(0,a.kt)("h4",{id:"server-step-102-add-signin-mutation"},(0,a.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/8ba6e1be6bb29c0cce26b58a8664c173c6071731"},(0,a.kt)("strong",{parentName:"a"},"Server")," Step 10.2: Add signIn mutation")),(0,a.kt)("h5",{id:"changed-contextts"},"Changed context.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,7 +1,9 @@\n \u250a1\u250a1\u250aimport { PubSub } from 'apollo-server-express';\n \u250a2\u250a2\u250aimport { User } from './db';\n+\u250a \u250a3\u250aimport { Response } from 'express';\n \u250a3\u250a4\u250a\n \u250a4\u250a5\u250aexport type MyContext = {\n \u250a5\u250a6\u250a  pubsub: PubSub;\n \u250a6\u250a7\u250a  currentUser: User;\n+\u250a \u250a8\u250a  res: Response;\n \u250a7\u250a9\u250a};\n")),(0,a.kt)("h5",{id:"changed-envts"},"Changed env.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,2 +1,6 @@\n+\u250a \u250a1\u250aexport const expiration = process.env.JWT_EXPIRATION_MS\n+\u250a \u250a2\u250a  ? parseInt(process.env.JWT_EXPIRATION_MS)\n+\u250a \u250a3\u250a  : 24 * 60 * 60 * 1000;\n+\u250a \u250a4\u250aexport const secret = process.env.JWT_SECRET || '70p53cr37';\n \u250a1\u250a5\u250aexport const origin = process.env.ORIGIN || 'http://localhost:3000';\n \u250a2\u250a6\u250aexport const port = process.env.PORT || 4000;\n")),(0,a.kt)("h5",{id:"changed-indexts-1"},"Changed index.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -23,6 +23,7 @@\n \u250a23\u250a23\u250a    return {\n \u250a24\u250a24\u250a      currentUser: users.find((u) => u.id === req.cookies.currentUserId),\n \u250a25\u250a25\u250a      pubsub,\n+\u250a  \u250a26\u250a      res: session.res,\n \u250a26\u250a27\u250a    };\n \u250a27\u250a28\u250a  },\n \u250a28\u250a29\u250a  subscriptions: {\n")),(0,a.kt)("h5",{id:"changed-packagejson"},"Changed package.json"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},'@@ -20,12 +20,14 @@\n \u250a20\u250a20\u250a    "@graphql-codegen/cli": "1.14.0",\n \u250a21\u250a21\u250a    "@graphql-codegen/typescript": "1.14.0",\n \u250a22\u250a22\u250a    "@graphql-codegen/typescript-resolvers": "1.14.0",\n+\u250a  \u250a23\u250a    "@types/bcrypt": "3.0.0",\n \u250a23\u250a24\u250a    "@types/cors": "2.8.6",\n \u250a24\u250a25\u250a    "@types/cookie": "0.4.0",\n \u250a25\u250a26\u250a    "@types/cookie-parser": "1.4.2",\n \u250a26\u250a27\u250a    "@types/express": "4.17.6",\n \u250a27\u250a28\u250a    "@types/graphql": "14.5.0",\n \u250a28\u250a29\u250a    "@types/jest": "25.2.3",\n+\u250a  \u250a30\u250a    "@types/jsonwebtoken": "8.5.0",\n \u250a29\u250a31\u250a    "@types/node": "14.0.4",\n \u250a30\u250a32\u250a    "jest": "26.0.1",\n \u250a31\u250a33\u250a    "jest-junit": "10.0.0",\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},'@@ -37,6 +39,7 @@\n \u250a37\u250a39\u250a  "dependencies": {\n \u250a38\u250a40\u250a    "apollo-server-express": "2.13.1",\n \u250a39\u250a41\u250a    "apollo-server-testing": "2.13.1",\n+\u250a  \u250a42\u250a    "bcrypt": "4.0.1",\n \u250a40\u250a43\u250a    "cookie": "0.4.1",\n \u250a41\u250a44\u250a    "cors": "2.8.5",\n \u250a42\u250a45\u250a    "cookie-parser": "1.4.5",\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},'@@ -44,7 +47,8 @@\n \u250a44\u250a47\u250a    "graphql": "15.0.0",\n \u250a45\u250a48\u250a    "graphql-import": "1.0.2",\n \u250a46\u250a49\u250a    "graphql-scalars": "1.1.2",\n-\u250a47\u250a  \u250a    "graphql-tools": "5.0.0"\n+\u250a  \u250a50\u250a    "graphql-tools": "5.0.0",\n+\u250a  \u250a51\u250a    "jsonwebtoken": "8.5.1"\n \u250a48\u250a52\u250a  },\n \u250a49\u250a53\u250a  "jest": {\n \u250a50\u250a54\u250a    "transform": {\n')),(0,a.kt)("h5",{id:"changed-schemaresolversts"},"Changed schema","/","resolvers.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -2,6 +2,9 @@\n \u250a 2\u250a 2\u250aimport { DateTimeResolver, URLResolver } from 'graphql-scalars';\n \u250a 3\u250a 3\u250aimport { User, Message, Chat, chats, messages, users } from '../db';\n \u250a 4\u250a 4\u250aimport { Resolvers } from '../types/graphql';\n+\u250a  \u250a 5\u250aimport { secret, expiration } from '../env';\n+\u250a  \u250a 6\u250aimport bcrypt from 'bcrypt';\n+\u250a  \u250a 7\u250aimport jwt from 'jsonwebtoken';\n \u250a 5\u250a 8\u250a\n \u250a 6\u250a 9\u250aconst resolvers: Resolvers = {\n \u250a 7\u250a10\u250a  Date: DateTimeResolver,\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -89,11 +92,31 @@\n \u250a 89\u250a 92\u250a    users(root, args, { currentUser }) {\n \u250a 90\u250a 93\u250a      if (!currentUser) return [];\n \u250a 91\u250a 94\u250a\n-\u250a 92\u250a   \u250a      return users.filter(u => u.id !== currentUser.id);\n+\u250a   \u250a 95\u250a      return users.filter((u) => u.id !== currentUser.id);\n \u250a 93\u250a 96\u250a    },\n \u250a 94\u250a 97\u250a  },\n \u250a 95\u250a 98\u250a\n \u250a 96\u250a 99\u250a  Mutation: {\n+\u250a   \u250a100\u250a    signIn(root, { username, password }, { res }) {\n+\u250a   \u250a101\u250a      const user = users.find((u) => u.username === username);\n+\u250a   \u250a102\u250a\n+\u250a   \u250a103\u250a      if (!user) {\n+\u250a   \u250a104\u250a        throw new Error('user not found');\n+\u250a   \u250a105\u250a      }\n+\u250a   \u250a106\u250a\n+\u250a   \u250a107\u250a      const passwordsMatch = bcrypt.compareSync(password, user.password);\n+\u250a   \u250a108\u250a\n+\u250a   \u250a109\u250a      if (!passwordsMatch) {\n+\u250a   \u250a110\u250a        throw new Error('password is incorrect');\n+\u250a   \u250a111\u250a      }\n+\u250a   \u250a112\u250a\n+\u250a   \u250a113\u250a      const authToken = jwt.sign(username, secret);\n+\u250a   \u250a114\u250a\n+\u250a   \u250a115\u250a      res.cookie('authToken', authToken, { maxAge: expiration });\n+\u250a   \u250a116\u250a\n+\u250a   \u250a117\u250a      return user;\n+\u250a   \u250a118\u250a    },\n+\u250a   \u250a119\u250a\n \u250a 97\u250a120\u250a    addMessage(root, { chatId, content }, { currentUser, pubsub }) {\n \u250a 98\u250a121\u250a      if (!currentUser) return null;\n \u250a 99\u250a122\u250a\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -133,17 +156,17 @@\n \u250a133\u250a156\u250a\n \u250a134\u250a157\u250a    addChat(root, { recipientId }, { currentUser, pubsub }) {\n \u250a135\u250a158\u250a      if (!currentUser) return null;\n-\u250a136\u250a   \u250a      if (!users.some(u => u.id === recipientId)) return null;\n+\u250a   \u250a159\u250a      if (!users.some((u) => u.id === recipientId)) return null;\n \u250a137\u250a160\u250a\n \u250a138\u250a161\u250a      let chat = chats.find(\n-\u250a139\u250a   \u250a        c =>\n+\u250a   \u250a162\u250a        (c) =>\n \u250a140\u250a163\u250a          c.participants.includes(currentUser.id) &&\n \u250a141\u250a164\u250a          c.participants.includes(recipientId)\n \u250a142\u250a165\u250a      );\n \u250a143\u250a166\u250a\n \u250a144\u250a167\u250a      if (chat) return chat;\n \u250a145\u250a168\u250a\n-\u250a146\u250a   \u250a      const chatsIds = chats.map(c => Number(c.id));\n+\u250a   \u250a169\u250a      const chatsIds = chats.map((c) => Number(c.id));\n \u250a147\u250a170\u250a\n \u250a148\u250a171\u250a      chat = {\n \u250a149\u250a172\u250a        id: String(Math.max(...chatsIds) + 1),\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -163,16 +186,18 @@\n \u250a163\u250a186\u250a    removeChat(root, { chatId }, { currentUser, pubsub }) {\n \u250a164\u250a187\u250a      if (!currentUser) return null;\n \u250a165\u250a188\u250a\n-\u250a166\u250a   \u250a      const chatIndex = chats.findIndex(c => c.id === chatId);\n+\u250a   \u250a189\u250a      const chatIndex = chats.findIndex((c) => c.id === chatId);\n \u250a167\u250a190\u250a\n \u250a168\u250a191\u250a      if (chatIndex === -1) return null;\n \u250a169\u250a192\u250a\n \u250a170\u250a193\u250a      const chat = chats[chatIndex];\n \u250a171\u250a194\u250a\n-\u250a172\u250a   \u250a      if (!chat.participants.some(p => p === currentUser.id)) return null;\n+\u250a   \u250a195\u250a      if (!chat.participants.some((p) => p === currentUser.id)) return null;\n \u250a173\u250a196\u250a\n-\u250a174\u250a   \u250a      chat.messages.forEach(chatMessage => {\n-\u250a175\u250a   \u250a        const chatMessageIndex = messages.findIndex(m => m.id === chatMessage);\n+\u250a   \u250a197\u250a      chat.messages.forEach((chatMessage) => {\n+\u250a   \u250a198\u250a        const chatMessageIndex = messages.findIndex(\n+\u250a   \u250a199\u250a          (m) => m.id === chatMessage\n+\u250a   \u250a200\u250a        );\n \u250a176\u250a201\u250a\n \u250a177\u250a202\u250a        if (chatMessageIndex !== -1) {\n \u250a178\u250a203\u250a          messages.splice(chatMessageIndex, 1);\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -210,7 +235,7 @@\n \u250a210\u250a235\u250a        ({ chatAdded }: { chatAdded: Chat }, args, { currentUser }) => {\n \u250a211\u250a236\u250a          if (!currentUser) return false;\n \u250a212\u250a237\u250a\n-\u250a213\u250a   \u250a          return chatAdded.participants.some(p => p === currentUser.id);\n+\u250a   \u250a238\u250a          return chatAdded.participants.some((p) => p === currentUser.id);\n \u250a214\u250a239\u250a        }\n \u250a215\u250a240\u250a      ),\n \u250a216\u250a241\u250a    },\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -221,7 +246,7 @@\n \u250a221\u250a246\u250a        ({ targetChat }: { targetChat: Chat }, args, { currentUser }) => {\n \u250a222\u250a247\u250a          if (!currentUser) return false;\n \u250a223\u250a248\u250a\n-\u250a224\u250a   \u250a          return targetChat.participants.some(p => p === currentUser.id);\n+\u250a   \u250a249\u250a          return targetChat.participants.some((p) => p === currentUser.id);\n \u250a225\u250a250\u250a        }\n \u250a226\u250a251\u250a      ),\n \u250a227\u250a252\u250a    },\n")),(0,a.kt)("h5",{id:"changed-schematypedefsgraphql"},"Changed schema","/","typeDefs.graphql"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -33,6 +33,7 @@\n \u250a33\u250a33\u250a}\n \u250a34\u250a34\u250a\n \u250a35\u250a35\u250atype Mutation {\n+\u250a  \u250a36\u250a  signIn(username: String!, password: String!): User\n \u250a36\u250a37\u250a  addMessage(chatId: ID!, content: String!): Message\n \u250a37\u250a38\u250a  addChat(recipientId: ID!): Chat\n \u250a38\u250a39\u250a  removeChat(chatId: ID!): ID\n")),(0,a.kt)("p",null,"As you can see we use a special secret before we encrypt the username with JWT. The same secret will be used later on to decrypt the token back into username when getting requests. If someone malicious will get a hold of that password, he can fabricate an authentication token for every user that he wants, ",(0,a.kt)("strong",{parentName:"p"},"thus it\u2019s important to choose a strong secret"),"."),(0,a.kt)("p",null,"When building the context for our GraphQL resolvers, we will decode the received cookie with JWT using the same secret to determine the username who made the request. Once we have that username, we can simply retrieve the original user from the DB and define it on the context:"),(0,a.kt)("h4",{id:"server-step-103-get-current-user-from-auth-token"},(0,a.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/a700ad1c75065385deacf0762752d64395189436"},(0,a.kt)("strong",{parentName:"a"},"Server")," Step 10.3: Get current user from auth token")),(0,a.kt)("h5",{id:"changed-indexts-2"},"Changed index.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,9 +1,10 @@\n \u250a 1\u250a 1\u250aimport { ApolloServer, gql, PubSub } from 'apollo-server-express';\n \u250a 2\u250a 2\u250aimport cookie from 'cookie';\n \u250a 3\u250a 3\u250aimport http from 'http';\n+\u250a  \u250a 4\u250aimport jwt from 'jsonwebtoken';\n \u250a 4\u250a 5\u250aimport { app } from './app';\n \u250a 5\u250a 6\u250aimport { users } from './db';\n-\u250a 6\u250a  \u250aimport { origin, port } from './env';\n+\u250a  \u250a 7\u250aimport { origin, port, secret } from './env';\n \u250a 7\u250a 8\u250aimport schema from './schema';\n \u250a 8\u250a 9\u250a\n \u250a 9\u250a10\u250aconst pubsub = new PubSub();\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -20,8 +21,14 @@\n \u250a20\u250a21\u250a      req.cookies = cookie.parse(req.headers.cookie || '');\n \u250a21\u250a22\u250a    }\n \u250a22\u250a23\u250a\n+\u250a  \u250a24\u250a    let currentUser;\n+\u250a  \u250a25\u250a    if (req.cookies.authToken) {\n+\u250a  \u250a26\u250a      const username = jwt.verify(req.cookies.authToken, secret) as string;\n+\u250a  \u250a27\u250a      currentUser = username && users.find((u) => u.username === username);\n+\u250a  \u250a28\u250a    }\n+\u250a  \u250a29\u250a\n \u250a23\u250a30\u250a    return {\n-\u250a24\u250a  \u250a      currentUser: users.find((u) => u.id === req.cookies.currentUserId),\n+\u250a  \u250a31\u250a      currentUser,\n \u250a25\u250a32\u250a      pubsub,\n \u250a26\u250a33\u250a      res: session.res,\n \u250a27\u250a34\u250a    };\n")),(0,a.kt)("p",null,"You might have noticed that the User schema has been updated, because we try to address the ",(0,a.kt)("inlineCode",{parentName:"p"},"user.username")," property. The authentication in our app will be done with a username and a password; accordingly, we will update our User type definitions and the user documents in the users collection mock. The credentials that we\u2019re going to store can actually be used to sign-in to our app:"),(0,a.kt)("h4",{id:"server-step-104-update-user-schema-to-contain-credentials"},(0,a.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/60f77d0274c80acd66bbf40a4e2a2c7a11c8929f"},(0,a.kt)("strong",{parentName:"a"},"Server")," Step 10.4: Update user schema to contain credentials")),(0,a.kt)("h5",{id:"changed-dbts"},"Changed db.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,6 +1,8 @@\n \u250a1\u250a1\u250aexport type User = {\n \u250a2\u250a2\u250a  id: string;\n \u250a3\u250a3\u250a  name: string;\n+\u250a \u250a4\u250a  username: string;\n+\u250a \u250a5\u250a  password: string;\n \u250a4\u250a6\u250a  picture: string;\n \u250a5\u250a7\u250a};\n \u250a6\u250a8\u250a\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -30,26 +32,41 @@\n \u250a30\u250a32\u250a      {\n \u250a31\u250a33\u250a        id: '1',\n \u250a32\u250a34\u250a        name: 'Ray Edwards',\n+\u250a  \u250a35\u250a        username: 'ray',\n+\u250a  \u250a36\u250a        password:\n+\u250a  \u250a37\u250a          '$2a$08$NO9tkFLCoSqX1c5wk3s7z.JfxaVMKA.m7zUDdDwEquo4rvzimQeJm', // 111\n \u250a33\u250a38\u250a        picture: 'https://randomuser.me/api/portraits/thumb/lego/1.jpg',\n \u250a34\u250a39\u250a      },\n \u250a35\u250a40\u250a      {\n \u250a36\u250a41\u250a        id: '2',\n \u250a37\u250a42\u250a        name: 'Ethan Gonzalez',\n+\u250a  \u250a43\u250a        username: 'ethan',\n+\u250a  \u250a44\u250a        password:\n+\u250a  \u250a45\u250a          '$2a$08$xE4FuCi/ifxjL2S8CzKAmuKLwv18ktksSN.F3XYEnpmcKtpbpeZgO', // 222\n \u250a38\u250a46\u250a        picture: 'https://randomuser.me/api/portraits/thumb/men/1.jpg',\n \u250a39\u250a47\u250a      },\n \u250a40\u250a48\u250a      {\n \u250a41\u250a49\u250a        id: '3',\n \u250a42\u250a50\u250a        name: 'Bryan Wallace',\n+\u250a  \u250a51\u250a        username: 'bryan',\n+\u250a  \u250a52\u250a        password:\n+\u250a  \u250a53\u250a          '$2a$08$UHgH7J8G6z1mGQn2qx2kdeWv0jvgHItyAsL9hpEUI3KJmhVW5Q1d.', // 333\n \u250a43\u250a54\u250a        picture: 'https://randomuser.me/api/portraits/thumb/men/2.jpg',\n \u250a44\u250a55\u250a      },\n \u250a45\u250a56\u250a      {\n \u250a46\u250a57\u250a        id: '4',\n \u250a47\u250a58\u250a        name: 'Avery Stewart',\n+\u250a  \u250a59\u250a        username: 'avery',\n+\u250a  \u250a60\u250a        password:\n+\u250a  \u250a61\u250a          '$2a$08$wR1k5Q3T9FC7fUgB7Gdb9Os/GV7dGBBf4PLlWT7HERMFhmFDt47xi', // 444\n \u250a48\u250a62\u250a        picture: 'https://randomuser.me/api/portraits/thumb/women/1.jpg',\n \u250a49\u250a63\u250a      },\n \u250a50\u250a64\u250a      {\n \u250a51\u250a65\u250a        id: '5',\n \u250a52\u250a66\u250a        name: 'Katie Peterson',\n+\u250a  \u250a67\u250a        username: 'katie',\n+\u250a  \u250a68\u250a        password:\n+\u250a  \u250a69\u250a          '$2a$08$6.mbXqsDX82ZZ7q5d8Osb..JrGSsNp4R3IKj7mxgF6YGT0OmMw242', // 555\n \u250a53\u250a70\u250a        picture: 'https://randomuser.me/api/portraits/thumb/women/2.jpg',\n \u250a54\u250a71\u250a      },\n \u250a55\u250a72\u250a    ]\n")),(0,a.kt)("p",null,"To test it out, we will run our front-end application and open the dev-console. Using the Apollo Client we will send a request to the ",(0,a.kt)("inlineCode",{parentName:"p"},"signIn")," mutation. We can use the credentials of one of the users stored in the DB. As for now all our restricted routes are observing the ",(0,a.kt)("inlineCode",{parentName:"p"},"currentUserId")," cookie. This is wrong and no longer relevant. Let\u2019s change the ",(0,a.kt)("inlineCode",{parentName:"p"},"withAuth()")," method to observe the ",(0,a.kt)("inlineCode",{parentName:"p"},"authToken")," cookie so we can test our new mutation successfully:"),(0,a.kt)("h4",{id:"client-step-131-use-authtoken-cookie"},(0,a.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/d96e3a46f6e2b375e3dc0efaed8524b54a0f5aa5"},(0,a.kt)("strong",{parentName:"a"},"Client")," Step 13.1: Use authToken cookie")),(0,a.kt)("h5",{id:"changed-srcservicesauthservicetsx"},"Changed src","/","services","/","auth.service.tsx"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -22,8 +22,8 @@\n \u250a22\u250a22\u250a  };\n \u250a23\u250a23\u250a};\n \u250a24\u250a24\u250a\n-\u250a25\u250a  \u250aexport const signIn = (currentUserId: string) => {\n-\u250a26\u250a  \u250a  document.cookie = `currentUserId=${currentUserId}`;\n+\u250a  \u250a25\u250aexport const signIn = (authToken: string) => {\n+\u250a  \u250a26\u250a  document.cookie = `authToken=${authToken}`;\n \u250a27\u250a27\u250a\n \u250a28\u250a28\u250a  // This will become async in the near future\n \u250a29\u250a29\u250a  return Promise.resolve();\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},'@@ -35,7 +35,7 @@\n \u250a35\u250a35\u250a  return useCallback(() => {\n \u250a36\u250a36\u250a    // "expires" represents the lifespan of a cookie. Beyond that date the cookie will\n \u250a37\u250a37\u250a    // be deleted by the browser. "expires" cannot be viewed from "document.cookie"\n-\u250a38\u250a  \u250a    document.cookie = `currentUserId=;expires=${new Date(0)}`;\n+\u250a  \u250a38\u250a    document.cookie = `authToken=;expires=${new Date(0)}`;\n \u250a39\u250a39\u250a\n \u250a40\u250a40\u250a    // Clear cache\n \u250a41\u250a41\u250a    return client.clearStore();\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -43,5 +43,5 @@\n \u250a43\u250a43\u250a};\n \u250a44\u250a44\u250a\n \u250a45\u250a45\u250aexport const isSignedIn = () => {\n-\u250a46\u250a  \u250a  return /currentUserId=.+(;|$)/.test(document.cookie);\n+\u250a  \u250a46\u250a  return /authToken=.+(;|$)/.test(document.cookie);\n \u250a47\u250a47\u250a};\n")),(0,a.kt)("p",null,"Now we can perform the signIn. It would be a good idea to signIn with the first user - ",(0,a.kt)("inlineCode",{parentName:"p"},"ray"),", since all the DB mock is built around him:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"mutation signIn(username: 'ray', password: '111') {\n  id\n}\n")),(0,a.kt)("p",null,"Now if we would look at the value of ",(0,a.kt)("inlineCode",{parentName:"p"},"document.cookie")," we should see a key named ",(0,a.kt)("inlineCode",{parentName:"p"},"authToken")," with a JWT token and the ",(0,a.kt)("inlineCode",{parentName:"p"},"ChatsListScreen")," should show the chats which are relevant to ",(0,a.kt)("inlineCode",{parentName:"p"},"ray"),". To complete the sign-in flow we would need to update the ",(0,a.kt)("inlineCode",{parentName:"p"},"AuthScreen")," and the ",(0,a.kt)("inlineCode",{parentName:"p"},"auth.service")," to use username and password and the actual ",(0,a.kt)("inlineCode",{parentName:"p"},"sign-in")," mutation we\u2019ve just implemented."),(0,a.kt)("p",null,"Now back to the ",(0,a.kt)("inlineCode",{parentName:"p"},"auth.service"),", we will replace the ",(0,a.kt)("inlineCode",{parentName:"p"},"signIn()")," method implementation with one that actually calls the ",(0,a.kt)("inlineCode",{parentName:"p"},"signIn")," mutation in our API. We will start by defining the mutation:"),(0,a.kt)("h4",{id:"client-step-132-update-auth-service-to-call-signin-mutation"},(0,a.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/edc1f3efc5d44528bd28721c2f13f6fc92084c7a"},(0,a.kt)("strong",{parentName:"a"},"Client")," Step 13.2: Update auth service to call signIn mutation")),(0,a.kt)("h5",{id:"added-srcgraphqlmutationsindexts"},"Added src","/","graphql","/","mutations","/","index.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1 @@\n+\u250a \u250a1\u250aexport { default as signIn } from './signIn.mutation';\n")),(0,a.kt)("h5",{id:"added-srcgraphqlmutationssigninmutationts"},"Added src","/","graphql","/","mutations","/","signIn.mutation.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,9 @@\n+\u250a \u250a1\u250aimport gql from 'graphql-tag';\n+\u250a \u250a2\u250a\n+\u250a \u250a3\u250aexport default gql`\n+\u250a \u250a4\u250a  mutation signIn($username: String!, $password: String!) {\n+\u250a \u250a5\u250a    signIn(username: $username, password: $password) {\n+\u250a \u250a6\u250a      id\n+\u250a \u250a7\u250a    }\n+\u250a \u250a8\u250a  }\n+\u250a \u250a9\u250a`;\n")),(0,a.kt)("p",null,"Updating ",(0,a.kt)("inlineCode",{parentName:"p"},"codegen.yml")," to include the file we've just added in the generation process:"),(0,a.kt)("h4",{id:"client-step-132-update-auth-service-to-call-signin-mutation-1"},(0,a.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/edc1f3efc5d44528bd28721c2f13f6fc92084c7a"},(0,a.kt)("strong",{parentName:"a"},"Client")," Step 13.2: Update auth service to call signIn mutation")),(0,a.kt)("p",null,"And finally, we will update the service to use the generated mutation method ",(0,a.kt)("inlineCode",{parentName:"p"},"useSignInMutation()"),":"),(0,a.kt)("h4",{id:"client-step-132-update-auth-service-to-call-signin-mutation-2"},(0,a.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/edc1f3efc5d44528bd28721c2f13f6fc92084c7a"},(0,a.kt)("strong",{parentName:"a"},"Client")," Step 13.2: Update auth service to call signIn mutation")),(0,a.kt)("h5",{id:"changed-srcservicesauthservicetsx-1"},"Changed src","/","services","/","auth.service.tsx"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -2,6 +2,7 @@\n \u250a2\u250a2\u250aimport { useCallback } from 'react';\n \u250a3\u250a3\u250aimport { useApolloClient } from '@apollo/react-hooks';\n \u250a4\u250a4\u250aimport { Redirect } from 'react-router-dom';\n+\u250a \u250a5\u250aimport { useSignInMutation } from '../graphql/types';\n \u250a5\u250a6\u250aimport { useCacheService } from './cache.service';\n \u250a6\u250a7\u250a\n \u250a7\u250a8\u250aexport const withAuth = <P extends object>(\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -22,12 +23,7 @@\n \u250a22\u250a23\u250a  };\n \u250a23\u250a24\u250a};\n \u250a24\u250a25\u250a\n-\u250a25\u250a  \u250aexport const signIn = (authToken: string) => {\n-\u250a26\u250a  \u250a  document.cookie = `authToken=${authToken}`;\n-\u250a27\u250a  \u250a\n-\u250a28\u250a  \u250a  // This will become async in the near future\n-\u250a29\u250a  \u250a  return Promise.resolve();\n-\u250a30\u250a  \u250a};\n+\u250a  \u250a26\u250aexport const useSignIn = useSignInMutation;\n \u250a31\u250a27\u250a\n \u250a32\u250a28\u250aexport const useSignOut = () => {\n \u250a33\u250a29\u250a  const client = useApolloClient();\n")),(0,a.kt)("p",null,"To check if we\u2019re authorized to visit a route, not only we would need to check if we have the ",(0,a.kt)("inlineCode",{parentName:"p"},"authToken")," cookie defined, but we would also need to validate it against the server to see that it actually references a real user. For that we will implement ",(0,a.kt)("inlineCode",{parentName:"p"},"Query.me")," which will send us back the current user logged in directly from the context:"),(0,a.kt)("h4",{id:"server-step-105-add-queryme"},(0,a.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/6312c178bc1fc21eab0a8d9a0cca67938837e4df"},(0,a.kt)("strong",{parentName:"a"},"Server")," Step 10.5: Add Query.me")),(0,a.kt)("h5",{id:"changed-schemaresolversts-1"},"Changed schema","/","resolvers.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -73,6 +73,10 @@\n \u250a73\u250a73\u250a  },\n \u250a74\u250a74\u250a\n \u250a75\u250a75\u250a  Query: {\n+\u250a  \u250a76\u250a    me(root, args, { currentUser }) {\n+\u250a  \u250a77\u250a      return currentUser || null;\n+\u250a  \u250a78\u250a    },\n+\u250a  \u250a79\u250a\n \u250a76\u250a80\u250a    chats(root, args, { currentUser }) {\n \u250a77\u250a81\u250a      if (!currentUser) return [];\n \u250a78\u250a82\u250a\n")),(0,a.kt)("h5",{id:"changed-schematypedefsgraphql-1"},"Changed schema","/","typeDefs.graphql"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -27,6 +27,7 @@\n \u250a27\u250a27\u250a}\n \u250a28\u250a28\u250a\n \u250a29\u250a29\u250atype Query {\n+\u250a  \u250a30\u250a  me: User\n \u250a30\u250a31\u250a  chats: [Chat!]!\n \u250a31\u250a32\u250a  chat(chatId: ID!): Chat\n \u250a32\u250a33\u250a  users: [User!]!\n")),(0,a.kt)("h5",{id:"added-testsqueriesgetmetestts"},"Added tests","/","queries","/","getMe.test.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,33 @@\n+\u250a  \u250a 1\u250aimport { createTestClient } from 'apollo-server-testing';\n+\u250a  \u250a 2\u250aimport { ApolloServer, gql } from 'apollo-server-express';\n+\u250a  \u250a 3\u250aimport schema from '../../schema';\n+\u250a  \u250a 4\u250aimport { users } from '../../db';\n+\u250a  \u250a 5\u250a\n+\u250a  \u250a 6\u250adescribe('Query.me', () => {\n+\u250a  \u250a 7\u250a  it('should fetch current user', async () => {\n+\u250a  \u250a 8\u250a    const server = new ApolloServer({\n+\u250a  \u250a 9\u250a      schema,\n+\u250a  \u250a10\u250a      context: () => ({\n+\u250a  \u250a11\u250a        currentUser: users[0],\n+\u250a  \u250a12\u250a      }),\n+\u250a  \u250a13\u250a    });\n+\u250a  \u250a14\u250a\n+\u250a  \u250a15\u250a    const { query } = createTestClient(server);\n+\u250a  \u250a16\u250a\n+\u250a  \u250a17\u250a    const res = await query({\n+\u250a  \u250a18\u250a      query: gql`\n+\u250a  \u250a19\u250a        query GetMe {\n+\u250a  \u250a20\u250a          me {\n+\u250a  \u250a21\u250a            id\n+\u250a  \u250a22\u250a            name\n+\u250a  \u250a23\u250a            picture\n+\u250a  \u250a24\u250a          }\n+\u250a  \u250a25\u250a        }\n+\u250a  \u250a26\u250a      `,\n+\u250a  \u250a27\u250a    });\n+\u250a  \u250a28\u250a\n+\u250a  \u250a29\u250a    expect(res.data).toBeDefined();\n+\u250a  \u250a30\u250a    expect(res.errors).toBeUndefined();\n+\u250a  \u250a31\u250a    expect(res.data).toMatchSnapshot();\n+\u250a  \u250a32\u250a  });\n+\u250a  \u250a33\u250a});\n")),(0,a.kt)("p",null,"Now will use the GraphQL query we\u2019ve just implemented to check if the user actually exists within the DB before we proceed to the restricted route:"),(0,a.kt)("h4",{id:"client-step-133-validate-auth-token-against-the-back-end-on-restricted-route"},(0,a.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/d0a16ebfa580b7b81727a139ec92bfb7ca16ca38"},(0,a.kt)("strong",{parentName:"a"},"Client")," Step 13.3: Validate auth token against the back-end on restricted route")),(0,a.kt)("h5",{id:"added-srcgraphqlqueriesmequeryts"},"Added src","/","graphql","/","queries","/","me.query.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,11 @@\n+\u250a  \u250a 1\u250aimport gql from 'graphql-tag';\n+\u250a  \u250a 2\u250aimport * as fragments from '../fragments';\n+\u250a  \u250a 3\u250a\n+\u250a  \u250a 4\u250aexport default gql`\n+\u250a  \u250a 5\u250a  query Me {\n+\u250a  \u250a 6\u250a    me {\n+\u250a  \u250a 7\u250a      ...User\n+\u250a  \u250a 8\u250a    }\n+\u250a  \u250a 9\u250a  }\n+\u250a  \u250a10\u250a  ${fragments.user}\n+\u250a  \u250a11\u250a`;\n")),(0,a.kt)("h5",{id:"changed-srcservicesauthservicetsx-2"},"Changed src","/","services","/","auth.service.tsx"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,10 +1,16 @@\n \u250a 1\u250a 1\u250aimport React from 'react';\n-\u250a 2\u250a  \u250aimport { useCallback } from 'react';\n+\u250a  \u250a 2\u250aimport { useContext, useCallback } from 'react';\n \u250a 3\u250a 3\u250aimport { useApolloClient } from '@apollo/react-hooks';\n \u250a 4\u250a 4\u250aimport { Redirect } from 'react-router-dom';\n-\u250a 5\u250a  \u250aimport { useSignInMutation } from '../graphql/types';\n+\u250a  \u250a 5\u250aimport { useMeQuery, User, useSignInMutation } from '../graphql/types';\n \u250a 6\u250a 6\u250aimport { useCacheService } from './cache.service';\n \u250a 7\u250a 7\u250a\n+\u250a  \u250a 8\u250aconst MyContext = React.createContext<User | null>(null);\n+\u250a  \u250a 9\u250a\n+\u250a  \u250a10\u250aexport const useMe = () => {\n+\u250a  \u250a11\u250a  return useContext(MyContext);\n+\u250a  \u250a12\u250a};\n+\u250a  \u250a13\u250a\n \u250a 8\u250a14\u250aexport const withAuth = <P extends object>(\n \u250a 9\u250a15\u250a  Component: React.ComponentType<P>\n \u250a10\u250a16\u250a) => {\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},'@@ -17,9 +23,26 @@\n \u250a17\u250a23\u250a      return <Redirect to="/sign-in" />;\n \u250a18\u250a24\u250a    }\n \u250a19\u250a25\u250a\n+\u250a  \u250a26\u250a    const signOut = useSignOut();\n+\u250a  \u250a27\u250a    const { data, error, loading } = useMeQuery();\n+\u250a  \u250a28\u250a\n \u250a20\u250a29\u250a    useCacheService();\n \u250a21\u250a30\u250a\n-\u250a22\u250a  \u250a    return <Component {...(props as P)} />;\n+\u250a  \u250a31\u250a    if (loading) return null;\n+\u250a  \u250a32\u250a\n+\u250a  \u250a33\u250a    if (data === undefined) return null;\n+\u250a  \u250a34\u250a\n+\u250a  \u250a35\u250a    if (error || !data.me) {\n+\u250a  \u250a36\u250a      signOut();\n+\u250a  \u250a37\u250a\n+\u250a  \u250a38\u250a      return <Redirect to="/sign-in" />;\n+\u250a  \u250a39\u250a    }\n+\u250a  \u250a40\u250a\n+\u250a  \u250a41\u250a    return (\n+\u250a  \u250a42\u250a      <MyContext.Provider value={data.me}>\n+\u250a  \u250a43\u250a        <Component {...(props as P)} />\n+\u250a  \u250a44\u250a      </MyContext.Provider>\n+\u250a  \u250a45\u250a    );\n \u250a23\u250a46\u250a  };\n \u250a24\u250a47\u250a};\n')),(0,a.kt)("p",null,"we will use the new query to try and fetch the user directly from the back-end, and we will only proceed if the user was actually found. In addition, we will replace the ",(0,a.kt)("inlineCode",{parentName:"p"},"signIn()")," method to call ",(0,a.kt)("inlineCode",{parentName:"p"},"signIn")," mutation:"),(0,a.kt)("h4",{id:"client-step-134-add-username-and-password-to-authscreen"},(0,a.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/39352e0cce4de8db19594a7b71ef1a542e4938b1"},(0,a.kt)("strong",{parentName:"a"},"Client")," Step 13.4: Add username and password to AuthScreen")),(0,a.kt)("h5",{id:"changed-srccomponentsauthscreenindextsx"},"Changed src","/","components","/","AuthScreen","/","index.tsx"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -3,7 +3,7 @@\n \u250a3\u250a3\u250aimport React from 'react';\n \u250a4\u250a4\u250aimport { useCallback, useState } from 'react';\n \u250a5\u250a5\u250aimport styled from 'styled-components';\n-\u250a6\u250a \u250aimport { signIn } from '../../services/auth.service';\n+\u250a \u250a6\u250aimport { useSignIn } from '../../services/auth.service';\n \u250a7\u250a7\u250aimport { RouteComponentProps } from 'react-router-dom';\n \u250a8\u250a8\u250a\n \u250a9\u250a9\u250aconst Container = styled.div`\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -114,21 +114,35 @@\n \u250a114\u250a114\u250a`;\n \u250a115\u250a115\u250a\n \u250a116\u250a116\u250aconst AuthScreen: React.FC<RouteComponentProps<any>> = ({ history }) => {\n-\u250a117\u250a   \u250a  const [userId, setUserId] = useState('');\n+\u250a   \u250a117\u250a  const [username, setUsername] = useState('');\n+\u250a   \u250a118\u250a  const [password, setPassword] = useState('');\n+\u250a   \u250a119\u250a  // eslint-disable-next-line\n+\u250a   \u250a120\u250a  const [error, setError] = useState('');\n+\u250a   \u250a121\u250a  const [signIn] = useSignIn();\n+\u250a   \u250a122\u250a\n+\u250a   \u250a123\u250a  const onUsernameChange = useCallback(({ target }) => {\n+\u250a   \u250a124\u250a    setError('');\n+\u250a   \u250a125\u250a    setUsername(target.value);\n+\u250a   \u250a126\u250a  }, []);\n \u250a118\u250a127\u250a\n-\u250a119\u250a   \u250a  const onUserIdChange = useCallback(({ target }) => {\n-\u250a120\u250a   \u250a    setUserId(target.value);\n+\u250a   \u250a128\u250a  const onPasswordChange = useCallback(({ target }) => {\n+\u250a   \u250a129\u250a    setError('');\n+\u250a   \u250a130\u250a    setPassword(target.value);\n \u250a121\u250a131\u250a  }, []);\n \u250a122\u250a132\u250a\n \u250a123\u250a133\u250a  const maySignIn = useCallback(() => {\n-\u250a124\u250a   \u250a    return !!userId;\n-\u250a125\u250a   \u250a  }, [userId]);\n+\u250a   \u250a134\u250a    return !!(username && password);\n+\u250a   \u250a135\u250a  }, [username, password]);\n \u250a126\u250a136\u250a\n \u250a127\u250a137\u250a  const handleSignIn = useCallback(() => {\n-\u250a128\u250a   \u250a    signIn(userId).then(() => {\n-\u250a129\u250a   \u250a      history.replace('/chats');\n-\u250a130\u250a   \u250a    });\n-\u250a131\u250a   \u250a  }, [userId, history]);\n+\u250a   \u250a138\u250a    signIn({ variables: { username, password } })\n+\u250a   \u250a139\u250a      .then(() => {\n+\u250a   \u250a140\u250a        history.push('/chats');\n+\u250a   \u250a141\u250a      })\n+\u250a   \u250a142\u250a      .catch((error) => {\n+\u250a   \u250a143\u250a        setError(error.message || error);\n+\u250a   \u250a144\u250a      });\n+\u250a   \u250a145\u250a  }, [username, password, history, signIn]);\n \u250a132\u250a146\u250a\n \u250a133\u250a147\u250a  return (\n \u250a134\u250a148\u250a    <Container>\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},'@@ -141,12 +155,21 @@\n \u250a141\u250a155\u250a          <Legend>Sign in</Legend>\n \u250a142\u250a156\u250a          <Section>\n \u250a143\u250a157\u250a            <TextField\n-\u250a144\u250a   \u250a              data-testid="user-id-input"\n-\u250a145\u250a   \u250a              label="User ID"\n-\u250a146\u250a   \u250a              value={userId}\n-\u250a147\u250a   \u250a              onChange={onUserIdChange}\n+\u250a   \u250a158\u250a              className="AuthScreen-text-field"\n+\u250a   \u250a159\u250a              label="Username"\n+\u250a   \u250a160\u250a              value={username}\n+\u250a   \u250a161\u250a              onChange={onUsernameChange}\n+\u250a   \u250a162\u250a              margin="normal"\n+\u250a   \u250a163\u250a              placeholder="Enter your username"\n+\u250a   \u250a164\u250a            />\n+\u250a   \u250a165\u250a            <TextField\n+\u250a   \u250a166\u250a              className="AuthScreen-text-field"\n+\u250a   \u250a167\u250a              label="Password"\n+\u250a   \u250a168\u250a              type="password"\n+\u250a   \u250a169\u250a              value={password}\n+\u250a   \u250a170\u250a              onChange={onPasswordChange}\n \u250a148\u250a171\u250a              margin="normal"\n-\u250a149\u250a   \u250a              placeholder="Enter current user ID"\n+\u250a   \u250a172\u250a              placeholder="Enter your password"\n \u250a150\u250a173\u250a            />\n \u250a151\u250a174\u250a          </Section>\n \u250a152\u250a175\u250a          <Button\n')),(0,a.kt)("p",null,"The behavior of the updated screen should be identical to what we had so far. To complete the flow we\u2019ll need a way to signUp. When we signing-up we will need the following parameters: ",(0,a.kt)("inlineCode",{parentName:"p"},"name"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"username"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"password")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"passwordConfirm"),". In addition we will need to run certain validations against the parameters:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The name must be at least 3 and at most 50 characters long."),(0,a.kt)("li",{parentName:"ul"},"The username must be at least 3 and at most 18 characters long."),(0,a.kt)("li",{parentName:"ul"},"A password must be at least 8 and at most 30 characters long. In addition, it should contain English letters, numbers, and special characters.")),(0,a.kt)("p",null,"For that we will implement a dedicated validations module:"),(0,a.kt)("h4",{id:"server-step-106-add-signup-mutation"},(0,a.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/2664c67fe68ed1f002aed1c6ffb75ca8b455f3be"},(0,a.kt)("strong",{parentName:"a"},"Server")," Step 10.6: Add signUp mutation")),(0,a.kt)("h5",{id:"added-validatorsts"},"Added validators.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,43 @@\n+\u250a  \u250a 1\u250aexport const validatePassword = (ctx: string, str: string) => {\n+\u250a  \u250a 2\u250a  if (typeof str !== 'string') {\n+\u250a  \u250a 3\u250a    throw TypeError(`${ctx} must be a string`);\n+\u250a  \u250a 4\u250a  }\n+\u250a  \u250a 5\u250a\n+\u250a  \u250a 6\u250a  validateLength(ctx, str, 8, 30);\n+\u250a  \u250a 7\u250a\n+\u250a  \u250a 8\u250a  if (!/[a-zA-Z]+/.test(str)) {\n+\u250a  \u250a 9\u250a    throw TypeError(`${ctx} must contain english letters`);\n+\u250a  \u250a10\u250a  }\n+\u250a  \u250a11\u250a\n+\u250a  \u250a12\u250a  if (!/\\d+/.test(str)) {\n+\u250a  \u250a13\u250a    throw TypeError(`${ctx} must contain numbers`);\n+\u250a  \u250a14\u250a  }\n+\u250a  \u250a15\u250a\n+\u250a  \u250a16\u250a  if (!/[^\\da-zA-Z]+/.test(str)) {\n+\u250a  \u250a17\u250a    throw TypeError(`${ctx} must contain special charachters`);\n+\u250a  \u250a18\u250a  }\n+\u250a  \u250a19\u250a};\n+\u250a  \u250a20\u250a\n+\u250a  \u250a21\u250aexport const validateLength = (ctx: string, str: string, ...args: number[]) => {\n+\u250a  \u250a22\u250a  let min, max;\n+\u250a  \u250a23\u250a\n+\u250a  \u250a24\u250a  if (args.length === 1) {\n+\u250a  \u250a25\u250a    min = 0;\n+\u250a  \u250a26\u250a    max = args[0];\n+\u250a  \u250a27\u250a  } else {\n+\u250a  \u250a28\u250a    min = args[0];\n+\u250a  \u250a29\u250a    max = args[1];\n+\u250a  \u250a30\u250a  }\n+\u250a  \u250a31\u250a\n+\u250a  \u250a32\u250a  if (typeof str !== 'string') {\n+\u250a  \u250a33\u250a    throw TypeError(`${ctx} must be a string`);\n+\u250a  \u250a34\u250a  }\n+\u250a  \u250a35\u250a\n+\u250a  \u250a36\u250a  if (str.length < min) {\n+\u250a  \u250a37\u250a    throw TypeError(`${ctx} must be at least ${min} chars long`);\n+\u250a  \u250a38\u250a  }\n+\u250a  \u250a39\u250a\n+\u250a  \u250a40\u250a  if (str.length > max) {\n+\u250a  \u250a41\u250a    throw TypeError(`${ctx} must contain ${max} chars at most`);\n+\u250a  \u250a42\u250a  }\n+\u250a  \u250a43\u250a};\n")),(0,a.kt)("p",null,"And we will implement the resolver and schema for the ",(0,a.kt)("inlineCode",{parentName:"p"},"signUp")," mutation:"),(0,a.kt)("h4",{id:"server-step-106-add-signup-mutation-1"},(0,a.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/2664c67fe68ed1f002aed1c6ffb75ca8b455f3be"},(0,a.kt)("strong",{parentName:"a"},"Server")," Step 10.6: Add signUp mutation")),(0,a.kt)("h5",{id:"changed-schemaresolversts-2"},"Changed schema","/","resolvers.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -5,6 +5,7 @@\n \u250a 5\u250a 5\u250aimport { secret, expiration } from '../env';\n \u250a 6\u250a 6\u250aimport bcrypt from 'bcrypt';\n \u250a 7\u250a 7\u250aimport jwt from 'jsonwebtoken';\n+\u250a  \u250a 8\u250aimport { validateLength, validatePassword } from '../validators';\n \u250a 8\u250a 9\u250a\n \u250a 9\u250a10\u250aconst resolvers: Resolvers = {\n \u250a10\u250a11\u250a  Date: DateTimeResolver,\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -121,6 +122,34 @@\n \u250a121\u250a122\u250a      return user;\n \u250a122\u250a123\u250a    },\n \u250a123\u250a124\u250a\n+\u250a   \u250a125\u250a    signUp(root, { name, username, password, passwordConfirm }) {\n+\u250a   \u250a126\u250a      validateLength('req.name', name, 3, 50);\n+\u250a   \u250a127\u250a      validateLength('req.username', username, 3, 18);\n+\u250a   \u250a128\u250a      validatePassword('req.password', password);\n+\u250a   \u250a129\u250a\n+\u250a   \u250a130\u250a      if (password !== passwordConfirm) {\n+\u250a   \u250a131\u250a        throw Error(\"req.password and req.passwordConfirm don't match\");\n+\u250a   \u250a132\u250a      }\n+\u250a   \u250a133\u250a\n+\u250a   \u250a134\u250a      if (users.some(u => u.username === username)) {\n+\u250a   \u250a135\u250a        throw Error('username already exists');\n+\u250a   \u250a136\u250a      }\n+\u250a   \u250a137\u250a\n+\u250a   \u250a138\u250a      const passwordHash = bcrypt.hashSync(password, bcrypt.genSaltSync(8));\n+\u250a   \u250a139\u250a\n+\u250a   \u250a140\u250a      const user: User = {\n+\u250a   \u250a141\u250a        id: String(users.length + 1),\n+\u250a   \u250a142\u250a        password: passwordHash,\n+\u250a   \u250a143\u250a        picture: '',\n+\u250a   \u250a144\u250a        username,\n+\u250a   \u250a145\u250a        name,\n+\u250a   \u250a146\u250a      };\n+\u250a   \u250a147\u250a\n+\u250a   \u250a148\u250a      users.push(user);\n+\u250a   \u250a149\u250a\n+\u250a   \u250a150\u250a      return user;\n+\u250a   \u250a151\u250a    },\n+\u250a   \u250a152\u250a\n \u250a124\u250a153\u250a    addMessage(root, { chatId, content }, { currentUser, pubsub }) {\n \u250a125\u250a154\u250a      if (!currentUser) return null;\n \u250a126\u250a155\u250a\n")),(0,a.kt)("h5",{id:"changed-schematypedefsgraphql-2"},"Changed schema","/","typeDefs.graphql"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -35,6 +35,7 @@\n \u250a35\u250a35\u250a\n \u250a36\u250a36\u250atype Mutation {\n \u250a37\u250a37\u250a  signIn(username: String!, password: String!): User\n+\u250a  \u250a38\u250a  signUp(name: String!, username: String!, password: String!, passwordConfirm: String!): User\n \u250a38\u250a39\u250a  addMessage(chatId: ID!, content: String!): Message\n \u250a39\u250a40\u250a  addChat(recipientId: ID!): Chat\n \u250a40\u250a41\u250a  removeChat(chatId: ID!): ID\n")),(0,a.kt)("p",null,"Before encrypting the password we append a string called \u201csalt\u201d to it. Even though the passwords are stored encrypted in the DB, a hacker might use a dictionary of common passwords in their encrypted form to decipher the original password. When adding salt to a password which is essentially a random string, the hacker cannot use a dictionary anymore since he would need to know the salt. Hypothetically, the hacker can get a hold of the salt and re-generate the entire dictionary, however that would take too long because of the way Bcrypt is designed to work."),(0,a.kt)("p",null,"Going back to the client, we will implement a new ",(0,a.kt)("inlineCode",{parentName:"p"},"signUp()")," method in the ",(0,a.kt)("inlineCode",{parentName:"p"},"auth.service")," that will call the ",(0,a.kt)("inlineCode",{parentName:"p"},"signUp")," mutation:"),(0,a.kt)("h4",{id:"client-step-135-add-signup-method-to-authservice"},(0,a.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/b6d97e137ac6c24f663c47943d1f99ffb1f95056"},(0,a.kt)("strong",{parentName:"a"},"Client")," Step 13.5: Add signUp() method to auth.service")),(0,a.kt)("h5",{id:"added-srcgraphqlmutationssignupmutationts"},"Added src","/","graphql","/","mutations","/","signUp.mutation.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,19 @@\n+\u250a  \u250a 1\u250aimport gql from 'graphql-tag';\n+\u250a  \u250a 2\u250a\n+\u250a  \u250a 3\u250aexport default gql`\n+\u250a  \u250a 4\u250a  mutation signUp(\n+\u250a  \u250a 5\u250a    $name: String!\n+\u250a  \u250a 6\u250a    $username: String!\n+\u250a  \u250a 7\u250a    $password: String!\n+\u250a  \u250a 8\u250a    $passwordConfirm: String!\n+\u250a  \u250a 9\u250a  ) {\n+\u250a  \u250a10\u250a    signUp(\n+\u250a  \u250a11\u250a      name: $name\n+\u250a  \u250a12\u250a      username: $username\n+\u250a  \u250a13\u250a      password: $password\n+\u250a  \u250a14\u250a      passwordConfirm: $passwordConfirm\n+\u250a  \u250a15\u250a    ) {\n+\u250a  \u250a16\u250a      id\n+\u250a  \u250a17\u250a    }\n+\u250a  \u250a18\u250a  }\n+\u250a  \u250a19\u250a`;\n")),(0,a.kt)("h5",{id:"changed-srcservicesauthservicetsx-3"},"Changed src","/","services","/","auth.service.tsx"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -2,7 +2,12 @@\n \u250a 2\u250a 2\u250aimport { useContext, useCallback } from 'react';\n \u250a 3\u250a 3\u250aimport { useApolloClient } from '@apollo/react-hooks';\n \u250a 4\u250a 4\u250aimport { Redirect } from 'react-router-dom';\n-\u250a 5\u250a  \u250aimport { useMeQuery, User, useSignInMutation } from '../graphql/types';\n+\u250a  \u250a 5\u250aimport {\n+\u250a  \u250a 6\u250a  useMeQuery,\n+\u250a  \u250a 7\u250a  User,\n+\u250a  \u250a 8\u250a  useSignInMutation,\n+\u250a  \u250a 9\u250a  useSignUpMutation,\n+\u250a  \u250a10\u250a} from '../graphql/types';\n \u250a 6\u250a11\u250aimport { useCacheService } from './cache.service';\n \u250a 7\u250a12\u250a\n \u250a 8\u250a13\u250aconst MyContext = React.createContext<User | null>(null);\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -47,6 +52,7 @@\n \u250a47\u250a52\u250a};\n \u250a48\u250a53\u250a\n \u250a49\u250a54\u250aexport const useSignIn = useSignInMutation;\n+\u250a  \u250a55\u250aexport const useSignUp = useSignUpMutation;\n \u250a50\u250a56\u250a\n \u250a51\u250a57\u250aexport const useSignOut = () => {\n \u250a52\u250a58\u250a  const client = useApolloClient();\n")),(0,a.kt)("p",null,"Now we will implement a dedicated ",(0,a.kt)("inlineCode",{parentName:"p"},"SignUpForm")," that we can use to perform the sign-up. Instead of implementing a new screen, we will use the ",(0,a.kt)("inlineCode",{parentName:"p"},"AuthScreen")," to alternate between the ",(0,a.kt)("inlineCode",{parentName:"p"},"SignInForm")," and the ",(0,a.kt)("inlineCode",{parentName:"p"},"SignUpForm")," using ",(0,a.kt)("inlineCode",{parentName:"p"},"AnimatedSwitch"),". This way we can have a container component that is common for both forms, and we will be able to switch between the two very smoothly. We will first define a new ",(0,a.kt)("inlineCode",{parentName:"p"},"/sign-up")," route in our router:"),(0,a.kt)("h4",{id:"client-step-136-split-authscreen-into-signinform-and-signupform"},(0,a.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/5873de76264d1eb162d596b8069b3ac2a25a856f"},(0,a.kt)("strong",{parentName:"a"},"Client")," Step 13.6: Split AuthScreen into SignInForm and SignUpForm")),(0,a.kt)("h5",{id:"added-srccomponentsauthscreensigninformtesttsx"},"Added src","/","components","/","AuthScreen","/","SignInForm.test.tsx"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,161 @@\n+\u250a   \u250a  1\u250aimport { createMemoryHistory } from 'history';\n+\u250a   \u250a  2\u250aimport React from 'react';\n+\u250a   \u250a  3\u250aimport { ApolloProvider } from '@apollo/react-hooks';\n+\u250a   \u250a  4\u250aimport {\n+\u250a   \u250a  5\u250a  act,\n+\u250a   \u250a  6\u250a  cleanup,\n+\u250a   \u250a  7\u250a  render,\n+\u250a   \u250a  8\u250a  fireEvent,\n+\u250a   \u250a  9\u250a  waitFor,\n+\u250a   \u250a 10\u250a} from '@testing-library/react';\n+\u250a   \u250a 11\u250aimport SignInForm from './SignInForm';\n+\u250a   \u250a 12\u250aimport { SignInDocument } from '../../graphql/types';\n+\u250a   \u250a 13\u250aimport { mockApolloClient } from '../../test-helpers';\n+\u250a   \u250a 14\u250a\n+\u250a   \u250a 15\u250adescribe('SignInForm', () => {\n+\u250a   \u250a 16\u250a  afterEach(cleanup);\n+\u250a   \u250a 17\u250a\n+\u250a   \u250a 18\u250a  it('enables sign-in button when filled in', async () => {\n+\u250a   \u250a 19\u250a    const history = createMemoryHistory();\n+\u250a   \u250a 20\u250a    const client = mockApolloClient();\n+\u250a   \u250a 21\u250a\n+\u250a   \u250a 22\u250a    let getByTestId: any = null;\n+\u250a   \u250a 23\u250a\n+\u250a   \u250a 24\u250a    act(() => {\n+\u250a   \u250a 25\u250a      getByTestId = render(\n+\u250a   \u250a 26\u250a        <ApolloProvider client={client}>\n+\u250a   \u250a 27\u250a          <SignInForm history={history} />\n+\u250a   \u250a 28\u250a        </ApolloProvider>\n+\u250a   \u250a 29\u250a      ).getByTestId;\n+\u250a   \u250a 30\u250a    });\n+\u250a   \u250a 31\u250a\n+\u250a   \u250a 32\u250a    const signInButton = await waitFor(\n+\u250a   \u250a 33\u250a      () => getByTestId('sign-in-button') as HTMLButtonElement\n+\u250a   \u250a 34\u250a    );\n+\u250a   \u250a 35\u250a    const usernameInput = await waitFor(() =>\n+\u250a   \u250a 36\u250a      getByTestId('username-input').querySelector('input')\n+\u250a   \u250a 37\u250a    );\n+\u250a   \u250a 38\u250a    const passwordInput = await waitFor(() =>\n+\u250a   \u250a 39\u250a      getByTestId('password-input').querySelector('input')\n+\u250a   \u250a 40\u250a    );\n+\u250a   \u250a 41\u250a\n+\u250a   \u250a 42\u250a    expect(signInButton.disabled).toEqual(true);\n+\u250a   \u250a 43\u250a\n+\u250a   \u250a 44\u250a    act(() => {\n+\u250a   \u250a 45\u250a      fireEvent.change(usernameInput, { target: { value: 'username' } });\n+\u250a   \u250a 46\u250a      fireEvent.change(passwordInput, { target: { value: 'password' } });\n+\u250a   \u250a 47\u250a    });\n+\u250a   \u250a 48\u250a\n+\u250a   \u250a 49\u250a    await waitFor(() => expect(signInButton.disabled).toEqual(false));\n+\u250a   \u250a 50\u250a  });\n+\u250a   \u250a 51\u250a\n+\u250a   \u250a 52\u250a  it('prints server error if input was wrong', async () => {\n+\u250a   \u250a 53\u250a    const history = createMemoryHistory();\n+\u250a   \u250a 54\u250a\n+\u250a   \u250a 55\u250a    const client = mockApolloClient([\n+\u250a   \u250a 56\u250a      {\n+\u250a   \u250a 57\u250a        request: {\n+\u250a   \u250a 58\u250a          query: SignInDocument,\n+\u250a   \u250a 59\u250a          variables: {\n+\u250a   \u250a 60\u250a            username: 'username',\n+\u250a   \u250a 61\u250a            password: 'password',\n+\u250a   \u250a 62\u250a          },\n+\u250a   \u250a 63\u250a        },\n+\u250a   \u250a 64\u250a        get result() {\n+\u250a   \u250a 65\u250a          throw Error('sign-in failed');\n+\u250a   \u250a 66\u250a        },\n+\u250a   \u250a 67\u250a      },\n+\u250a   \u250a 68\u250a    ]);\n+\u250a   \u250a 69\u250a\n+\u250a   \u250a 70\u250a    let getByTestId: any = null;\n+\u250a   \u250a 71\u250a\n+\u250a   \u250a 72\u250a    act(() => {\n+\u250a   \u250a 73\u250a      getByTestId = render(\n+\u250a   \u250a 74\u250a        <ApolloProvider client={client}>\n+\u250a   \u250a 75\u250a          <SignInForm history={history} />\n+\u250a   \u250a 76\u250a        </ApolloProvider>\n+\u250a   \u250a 77\u250a      ).getByTestId;\n+\u250a   \u250a 78\u250a    });\n+\u250a   \u250a 79\u250a\n+\u250a   \u250a 80\u250a    const signInButton = await waitFor(\n+\u250a   \u250a 81\u250a      () => getByTestId('sign-in-button') as HTMLButtonElement\n+\u250a   \u250a 82\u250a    );\n+\u250a   \u250a 83\u250a    const usernameInput = await waitFor(() =>\n+\u250a   \u250a 84\u250a      getByTestId('username-input').querySelector('input')\n+\u250a   \u250a 85\u250a    );\n+\u250a   \u250a 86\u250a    const passwordInput = await waitFor(() =>\n+\u250a   \u250a 87\u250a      getByTestId('password-input').querySelector('input')\n+\u250a   \u250a 88\u250a    );\n+\u250a   \u250a 89\u250a\n+\u250a   \u250a 90\u250a    act(() => {\n+\u250a   \u250a 91\u250a      fireEvent.change(usernameInput, { target: { value: 'username' } });\n+\u250a   \u250a 92\u250a      fireEvent.change(passwordInput, { target: { value: 'password' } });\n+\u250a   \u250a 93\u250a    });\n+\u250a   \u250a 94\u250a\n+\u250a   \u250a 95\u250a    await waitFor(() => expect(usernameInput.value).toEqual('username'));\n+\u250a   \u250a 96\u250a\n+\u250a   \u250a 97\u250a    await waitFor(() => expect(passwordInput.value).toEqual('password'));\n+\u250a   \u250a 98\u250a\n+\u250a   \u250a 99\u250a    act(() => {\n+\u250a   \u250a100\u250a      fireEvent.click(signInButton);\n+\u250a   \u250a101\u250a    });\n+\u250a   \u250a102\u250a\n+\u250a   \u250a103\u250a    const errorMessage = await waitFor(() => getByTestId('error-message'));\n+\u250a   \u250a104\u250a\n+\u250a   \u250a105\u250a    await waitFor(() =>\n+\u250a   \u250a106\u250a      expect(errorMessage.innerHTML).toContain('sign-in failed')\n+\u250a   \u250a107\u250a    );\n+\u250a   \u250a108\u250a  });\n+\u250a   \u250a109\u250a\n+\u250a   \u250a110\u250a  it('navigates to /chats if everything went right', async () => {\n+\u250a   \u250a111\u250a    const history = createMemoryHistory();\n+\u250a   \u250a112\u250a\n+\u250a   \u250a113\u250a    const client = mockApolloClient([\n+\u250a   \u250a114\u250a      {\n+\u250a   \u250a115\u250a        request: {\n+\u250a   \u250a116\u250a          query: SignInDocument,\n+\u250a   \u250a117\u250a          variables: {\n+\u250a   \u250a118\u250a            username: 'username',\n+\u250a   \u250a119\u250a            password: 'password',\n+\u250a   \u250a120\u250a          },\n+\u250a   \u250a121\u250a        },\n+\u250a   \u250a122\u250a        result: { data: {} },\n+\u250a   \u250a123\u250a      },\n+\u250a   \u250a124\u250a    ]);\n+\u250a   \u250a125\u250a\n+\u250a   \u250a126\u250a    let getByTestId: any = null;\n+\u250a   \u250a127\u250a\n+\u250a   \u250a128\u250a    act(() => {\n+\u250a   \u250a129\u250a      getByTestId = render(\n+\u250a   \u250a130\u250a        <ApolloProvider client={client}>\n+\u250a   \u250a131\u250a          <SignInForm history={history} />\n+\u250a   \u250a132\u250a        </ApolloProvider>\n+\u250a   \u250a133\u250a      ).getByTestId;\n+\u250a   \u250a134\u250a    });\n+\u250a   \u250a135\u250a\n+\u250a   \u250a136\u250a    const usernameInput = await waitFor(() =>\n+\u250a   \u250a137\u250a      getByTestId('username-input').querySelector('input')\n+\u250a   \u250a138\u250a    );\n+\u250a   \u250a139\u250a    const passwordInput = await waitFor(() =>\n+\u250a   \u250a140\u250a      getByTestId('password-input').querySelector('input')\n+\u250a   \u250a141\u250a    );\n+\u250a   \u250a142\u250a    const signInButton = await waitFor(\n+\u250a   \u250a143\u250a      () => getByTestId('sign-in-button') as HTMLButtonElement\n+\u250a   \u250a144\u250a    );\n+\u250a   \u250a145\u250a\n+\u250a   \u250a146\u250a    act(() => {\n+\u250a   \u250a147\u250a      fireEvent.change(usernameInput, { target: { value: 'username' } });\n+\u250a   \u250a148\u250a      fireEvent.change(passwordInput, { target: { value: 'password' } });\n+\u250a   \u250a149\u250a    });\n+\u250a   \u250a150\u250a\n+\u250a   \u250a151\u250a    await waitFor(() => expect(usernameInput.value).toEqual('username'));\n+\u250a   \u250a152\u250a\n+\u250a   \u250a153\u250a    await waitFor(() => expect(passwordInput.value).toEqual('password'));\n+\u250a   \u250a154\u250a\n+\u250a   \u250a155\u250a    act(() => {\n+\u250a   \u250a156\u250a      fireEvent.click(signInButton);\n+\u250a   \u250a157\u250a    });\n+\u250a   \u250a158\u250a\n+\u250a   \u250a159\u250a    await waitFor(() => expect(history.location.pathname).toEqual('/chats'));\n+\u250a   \u250a160\u250a  });\n+\u250a   \u250a161\u250a});\n")),(0,a.kt)("h5",{id:"added-srccomponentsauthscreensigninformtsx"},"Added src","/","components","/","AuthScreen","/","SignInForm.tsx"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},'@@ -0,0 +1,83 @@\n+\u250a  \u250a 1\u250aimport React from \'react\';\n+\u250a  \u250a 2\u250aimport { useCallback, useState } from \'react\';\n+\u250a  \u250a 3\u250aimport { useSignIn } from \'../../services/auth.service\';\n+\u250a  \u250a 4\u250aimport {\n+\u250a  \u250a 5\u250a  SignForm,\n+\u250a  \u250a 6\u250a  ActualForm,\n+\u250a  \u250a 7\u250a  Legend,\n+\u250a  \u250a 8\u250a  Section,\n+\u250a  \u250a 9\u250a  TextField,\n+\u250a  \u250a10\u250a  Button,\n+\u250a  \u250a11\u250a  ErrorMessage,\n+\u250a  \u250a12\u250a} from \'./form-components\';\n+\u250a  \u250a13\u250aimport { RouteComponentProps } from \'react-router-dom\';\n+\u250a  \u250a14\u250a\n+\u250a  \u250a15\u250aconst SignInForm: React.FC<RouteComponentProps<any>> = ({ history }) => {\n+\u250a  \u250a16\u250a  const [username, setUsername] = useState(\'\');\n+\u250a  \u250a17\u250a  const [password, setPassword] = useState(\'\');\n+\u250a  \u250a18\u250a  const [error, setError] = useState(\'\');\n+\u250a  \u250a19\u250a  const [signIn] = useSignIn();\n+\u250a  \u250a20\u250a\n+\u250a  \u250a21\u250a  const onUsernameChange = useCallback(({ target }) => {\n+\u250a  \u250a22\u250a    setError(\'\');\n+\u250a  \u250a23\u250a    setUsername(target.value);\n+\u250a  \u250a24\u250a  }, []);\n+\u250a  \u250a25\u250a\n+\u250a  \u250a26\u250a  const onPasswordChange = useCallback(({ target }) => {\n+\u250a  \u250a27\u250a    setError(\'\');\n+\u250a  \u250a28\u250a    setPassword(target.value);\n+\u250a  \u250a29\u250a  }, []);\n+\u250a  \u250a30\u250a\n+\u250a  \u250a31\u250a  const maySignIn = useCallback(() => {\n+\u250a  \u250a32\u250a    return !!(username && password);\n+\u250a  \u250a33\u250a  }, [username, password]);\n+\u250a  \u250a34\u250a\n+\u250a  \u250a35\u250a  const handleSignIn = useCallback(() => {\n+\u250a  \u250a36\u250a    signIn({ variables: { username, password } })\n+\u250a  \u250a37\u250a      .then(() => {\n+\u250a  \u250a38\u250a        history.replace(\'/chats\');\n+\u250a  \u250a39\u250a      })\n+\u250a  \u250a40\u250a      .catch((error) => {\n+\u250a  \u250a41\u250a        setError(error.message || error);\n+\u250a  \u250a42\u250a      });\n+\u250a  \u250a43\u250a  }, [username, password, history, signIn]);\n+\u250a  \u250a44\u250a\n+\u250a  \u250a45\u250a  return (\n+\u250a  \u250a46\u250a    <SignForm>\n+\u250a  \u250a47\u250a      <ActualForm>\n+\u250a  \u250a48\u250a        <Legend>Sign in</Legend>\n+\u250a  \u250a49\u250a        <Section style={{ width: \'100%\' }}>\n+\u250a  \u250a50\u250a          <TextField\n+\u250a  \u250a51\u250a            data-testid="username-input"\n+\u250a  \u250a52\u250a            label="Username"\n+\u250a  \u250a53\u250a            value={username}\n+\u250a  \u250a54\u250a            onChange={onUsernameChange}\n+\u250a  \u250a55\u250a            margin="normal"\n+\u250a  \u250a56\u250a            placeholder="Enter your username"\n+\u250a  \u250a57\u250a          />\n+\u250a  \u250a58\u250a          <TextField\n+\u250a  \u250a59\u250a            data-testid="password-input"\n+\u250a  \u250a60\u250a            label="Password"\n+\u250a  \u250a61\u250a            type="password"\n+\u250a  \u250a62\u250a            value={password}\n+\u250a  \u250a63\u250a            onChange={onPasswordChange}\n+\u250a  \u250a64\u250a            margin="normal"\n+\u250a  \u250a65\u250a            placeholder="Enter your password"\n+\u250a  \u250a66\u250a          />\n+\u250a  \u250a67\u250a        </Section>\n+\u250a  \u250a68\u250a        <Button\n+\u250a  \u250a69\u250a          data-testid="sign-in-button"\n+\u250a  \u250a70\u250a          type="button"\n+\u250a  \u250a71\u250a          color="secondary"\n+\u250a  \u250a72\u250a          variant="contained"\n+\u250a  \u250a73\u250a          disabled={!maySignIn()}\n+\u250a  \u250a74\u250a          onClick={handleSignIn}>\n+\u250a  \u250a75\u250a          Sign in\n+\u250a  \u250a76\u250a        </Button>\n+\u250a  \u250a77\u250a        <ErrorMessage data-testid="error-message">{error}</ErrorMessage>\n+\u250a  \u250a78\u250a      </ActualForm>\n+\u250a  \u250a79\u250a    </SignForm>\n+\u250a  \u250a80\u250a  );\n+\u250a  \u250a81\u250a};\n+\u250a  \u250a82\u250a\n+\u250a  \u250a83\u250aexport default SignInForm;\n')),(0,a.kt)("h5",{id:"added-srccomponentsauthscreensignupformtesttsx"},"Added src","/","components","/","AuthScreen","/","SignUpForm.test.tsx"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,205 @@\n+\u250a   \u250a  1\u250aimport { createMemoryHistory } from 'history';\n+\u250a   \u250a  2\u250aimport React from 'react';\n+\u250a   \u250a  3\u250aimport { ApolloProvider } from '@apollo/react-hooks';\n+\u250a   \u250a  4\u250aimport {\n+\u250a   \u250a  5\u250a  act,\n+\u250a   \u250a  6\u250a  cleanup,\n+\u250a   \u250a  7\u250a  render,\n+\u250a   \u250a  8\u250a  fireEvent,\n+\u250a   \u250a  9\u250a  waitFor,\n+\u250a   \u250a 10\u250a} from '@testing-library/react';\n+\u250a   \u250a 11\u250aimport SignUpForm from './SignUpForm';\n+\u250a   \u250a 12\u250aimport { SignUpDocument } from '../../graphql/types';\n+\u250a   \u250a 13\u250aimport { mockApolloClient } from '../../test-helpers';\n+\u250a   \u250a 14\u250a\n+\u250a   \u250a 15\u250adescribe('SignUpForm', () => {\n+\u250a   \u250a 16\u250a  afterEach(cleanup);\n+\u250a   \u250a 17\u250a\n+\u250a   \u250a 18\u250a  it('enables sign-up button when filled in', async () => {\n+\u250a   \u250a 19\u250a    const history = createMemoryHistory();\n+\u250a   \u250a 20\u250a    const client = mockApolloClient();\n+\u250a   \u250a 21\u250a\n+\u250a   \u250a 22\u250a    let getByTestId: any = null;\n+\u250a   \u250a 23\u250a\n+\u250a   \u250a 24\u250a    act(() => {\n+\u250a   \u250a 25\u250a      getByTestId = render(\n+\u250a   \u250a 26\u250a        <ApolloProvider client={client}>\n+\u250a   \u250a 27\u250a          <SignUpForm history={history} />\n+\u250a   \u250a 28\u250a        </ApolloProvider>\n+\u250a   \u250a 29\u250a      ).getByTestId;\n+\u250a   \u250a 30\u250a    });\n+\u250a   \u250a 31\u250a\n+\u250a   \u250a 32\u250a    const nameInput = await waitFor(() =>\n+\u250a   \u250a 33\u250a      getByTestId('name-input').querySelector('input')\n+\u250a   \u250a 34\u250a    );\n+\u250a   \u250a 35\u250a    const usernameInput = await waitFor(() =>\n+\u250a   \u250a 36\u250a      getByTestId('username-input').querySelector('input')\n+\u250a   \u250a 37\u250a    );\n+\u250a   \u250a 38\u250a    const passwordInput = await waitFor(() =>\n+\u250a   \u250a 39\u250a      getByTestId('password-input').querySelector('input')\n+\u250a   \u250a 40\u250a    );\n+\u250a   \u250a 41\u250a    const passwordConfirmInput = await waitFor(() =>\n+\u250a   \u250a 42\u250a      getByTestId('password-confirm-input').querySelector('input')\n+\u250a   \u250a 43\u250a    );\n+\u250a   \u250a 44\u250a    const signUpButton = await waitFor(\n+\u250a   \u250a 45\u250a      () => getByTestId('sign-up-button') as HTMLButtonElement\n+\u250a   \u250a 46\u250a    );\n+\u250a   \u250a 47\u250a\n+\u250a   \u250a 48\u250a    expect(signUpButton.disabled).toEqual(true);\n+\u250a   \u250a 49\u250a\n+\u250a   \u250a 50\u250a    act(() => {\n+\u250a   \u250a 51\u250a      fireEvent.change(nameInput, { target: { value: 'User Name' } });\n+\u250a   \u250a 52\u250a      fireEvent.change(usernameInput, { target: { value: 'username' } });\n+\u250a   \u250a 53\u250a      fireEvent.change(passwordInput, { target: { value: 'password' } });\n+\u250a   \u250a 54\u250a      fireEvent.change(passwordConfirmInput, { target: { value: 'password' } });\n+\u250a   \u250a 55\u250a    });\n+\u250a   \u250a 56\u250a\n+\u250a   \u250a 57\u250a    await waitFor(() => expect(nameInput.value).toEqual('User Name'));\n+\u250a   \u250a 58\u250a\n+\u250a   \u250a 59\u250a    await waitFor(() => expect(usernameInput.value).toEqual('username'));\n+\u250a   \u250a 60\u250a\n+\u250a   \u250a 61\u250a    await waitFor(() => expect(passwordInput.value).toEqual('password'));\n+\u250a   \u250a 62\u250a\n+\u250a   \u250a 63\u250a    await waitFor(() => expect(passwordConfirmInput.value).toEqual('password'));\n+\u250a   \u250a 64\u250a\n+\u250a   \u250a 65\u250a    await waitFor(() => expect(signUpButton.disabled).toEqual(false));\n+\u250a   \u250a 66\u250a  });\n+\u250a   \u250a 67\u250a\n+\u250a   \u250a 68\u250a  it('prints server error if input was wrong', async () => {\n+\u250a   \u250a 69\u250a    const history = createMemoryHistory();\n+\u250a   \u250a 70\u250a\n+\u250a   \u250a 71\u250a    const client = mockApolloClient([\n+\u250a   \u250a 72\u250a      {\n+\u250a   \u250a 73\u250a        request: {\n+\u250a   \u250a 74\u250a          query: SignUpDocument,\n+\u250a   \u250a 75\u250a          variables: {\n+\u250a   \u250a 76\u250a            name: 'User Name',\n+\u250a   \u250a 77\u250a            username: 'username',\n+\u250a   \u250a 78\u250a            password: 'password',\n+\u250a   \u250a 79\u250a            passwordConfirm: 'password',\n+\u250a   \u250a 80\u250a          },\n+\u250a   \u250a 81\u250a        },\n+\u250a   \u250a 82\u250a        get result() {\n+\u250a   \u250a 83\u250a          throw Error('sign-up failed');\n+\u250a   \u250a 84\u250a        },\n+\u250a   \u250a 85\u250a      },\n+\u250a   \u250a 86\u250a    ]);\n+\u250a   \u250a 87\u250a\n+\u250a   \u250a 88\u250a    let getByTestId: any = null;\n+\u250a   \u250a 89\u250a\n+\u250a   \u250a 90\u250a    act(() => {\n+\u250a   \u250a 91\u250a      getByTestId = render(\n+\u250a   \u250a 92\u250a        <ApolloProvider client={client}>\n+\u250a   \u250a 93\u250a          <SignUpForm history={history} />\n+\u250a   \u250a 94\u250a        </ApolloProvider>\n+\u250a   \u250a 95\u250a      ).getByTestId;\n+\u250a   \u250a 96\u250a    });\n+\u250a   \u250a 97\u250a\n+\u250a   \u250a 98\u250a    const nameInput = await waitFor(() =>\n+\u250a   \u250a 99\u250a      getByTestId('name-input').querySelector('input')\n+\u250a   \u250a100\u250a    );\n+\u250a   \u250a101\u250a    const usernameInput = await waitFor(() =>\n+\u250a   \u250a102\u250a      getByTestId('username-input').querySelector('input')\n+\u250a   \u250a103\u250a    );\n+\u250a   \u250a104\u250a    const passwordInput = await waitFor(() =>\n+\u250a   \u250a105\u250a      getByTestId('password-input').querySelector('input')\n+\u250a   \u250a106\u250a    );\n+\u250a   \u250a107\u250a    const passwordConfirmInput = await waitFor(() =>\n+\u250a   \u250a108\u250a      getByTestId('password-confirm-input').querySelector('input')\n+\u250a   \u250a109\u250a    );\n+\u250a   \u250a110\u250a    const signUpButton = await waitFor(\n+\u250a   \u250a111\u250a      () => getByTestId('sign-up-button') as HTMLButtonElement\n+\u250a   \u250a112\u250a    );\n+\u250a   \u250a113\u250a\n+\u250a   \u250a114\u250a    act(() => {\n+\u250a   \u250a115\u250a      fireEvent.change(nameInput, { target: { value: 'User Name' } });\n+\u250a   \u250a116\u250a      fireEvent.change(usernameInput, { target: { value: 'username' } });\n+\u250a   \u250a117\u250a      fireEvent.change(passwordInput, { target: { value: 'password' } });\n+\u250a   \u250a118\u250a      fireEvent.change(passwordConfirmInput, { target: { value: 'password' } });\n+\u250a   \u250a119\u250a    });\n+\u250a   \u250a120\u250a\n+\u250a   \u250a121\u250a    await waitFor(() => expect(nameInput.value).toEqual('User Name'));\n+\u250a   \u250a122\u250a\n+\u250a   \u250a123\u250a    await waitFor(() => expect(usernameInput.value).toEqual('username'));\n+\u250a   \u250a124\u250a\n+\u250a   \u250a125\u250a    await waitFor(() => expect(passwordInput.value).toEqual('password'));\n+\u250a   \u250a126\u250a\n+\u250a   \u250a127\u250a    await waitFor(() => expect(passwordConfirmInput.value).toEqual('password'));\n+\u250a   \u250a128\u250a\n+\u250a   \u250a129\u250a    act(() => {\n+\u250a   \u250a130\u250a      fireEvent.click(signUpButton);\n+\u250a   \u250a131\u250a    });\n+\u250a   \u250a132\u250a\n+\u250a   \u250a133\u250a    const errorMessage = await waitFor(() => getByTestId('error-message'));\n+\u250a   \u250a134\u250a\n+\u250a   \u250a135\u250a    await waitFor(() =>\n+\u250a   \u250a136\u250a      expect(errorMessage.innerHTML).toContain('sign-up failed')\n+\u250a   \u250a137\u250a    );\n+\u250a   \u250a138\u250a  });\n+\u250a   \u250a139\u250a\n+\u250a   \u250a140\u250a  it('navigates to /sign-in if everything went right', async () => {\n+\u250a   \u250a141\u250a    const history = createMemoryHistory();\n+\u250a   \u250a142\u250a\n+\u250a   \u250a143\u250a    const client = mockApolloClient([\n+\u250a   \u250a144\u250a      {\n+\u250a   \u250a145\u250a        request: {\n+\u250a   \u250a146\u250a          query: SignUpDocument,\n+\u250a   \u250a147\u250a          variables: {\n+\u250a   \u250a148\u250a            name: 'User Name',\n+\u250a   \u250a149\u250a            username: 'username',\n+\u250a   \u250a150\u250a            password: 'password',\n+\u250a   \u250a151\u250a            passwordConfirm: 'password',\n+\u250a   \u250a152\u250a          },\n+\u250a   \u250a153\u250a        },\n+\u250a   \u250a154\u250a        result: { data: {} },\n+\u250a   \u250a155\u250a      },\n+\u250a   \u250a156\u250a    ]);\n+\u250a   \u250a157\u250a\n+\u250a   \u250a158\u250a    let getByTestId: any = null;\n+\u250a   \u250a159\u250a\n+\u250a   \u250a160\u250a    act(() => {\n+\u250a   \u250a161\u250a      getByTestId = render(\n+\u250a   \u250a162\u250a        <ApolloProvider client={client}>\n+\u250a   \u250a163\u250a          <SignUpForm history={history} />\n+\u250a   \u250a164\u250a        </ApolloProvider>\n+\u250a   \u250a165\u250a      ).getByTestId;\n+\u250a   \u250a166\u250a    });\n+\u250a   \u250a167\u250a\n+\u250a   \u250a168\u250a    const nameInput = await waitFor(() =>\n+\u250a   \u250a169\u250a      getByTestId('name-input').querySelector('input')\n+\u250a   \u250a170\u250a    );\n+\u250a   \u250a171\u250a    const usernameInput = await waitFor(() =>\n+\u250a   \u250a172\u250a      getByTestId('username-input').querySelector('input')\n+\u250a   \u250a173\u250a    );\n+\u250a   \u250a174\u250a    const passwordInput = await waitFor(() =>\n+\u250a   \u250a175\u250a      getByTestId('password-input').querySelector('input')\n+\u250a   \u250a176\u250a    );\n+\u250a   \u250a177\u250a    const passwordConfirmInput = await waitFor(() =>\n+\u250a   \u250a178\u250a      getByTestId('password-confirm-input').querySelector('input')\n+\u250a   \u250a179\u250a    );\n+\u250a   \u250a180\u250a    const signUpButton = await waitFor(\n+\u250a   \u250a181\u250a      () => getByTestId('sign-up-button') as HTMLButtonElement\n+\u250a   \u250a182\u250a    );\n+\u250a   \u250a183\u250a\n+\u250a   \u250a184\u250a    act(() => {\n+\u250a   \u250a185\u250a      fireEvent.change(nameInput, { target: { value: 'User Name' } });\n+\u250a   \u250a186\u250a      fireEvent.change(usernameInput, { target: { value: 'username' } });\n+\u250a   \u250a187\u250a      fireEvent.change(passwordInput, { target: { value: 'password' } });\n+\u250a   \u250a188\u250a      fireEvent.change(passwordConfirmInput, { target: { value: 'password' } });\n+\u250a   \u250a189\u250a    });\n+\u250a   \u250a190\u250a\n+\u250a   \u250a191\u250a    await waitFor(() => expect(nameInput.value).toEqual('User Name'));\n+\u250a   \u250a192\u250a\n+\u250a   \u250a193\u250a    await waitFor(() => expect(usernameInput.value).toEqual('username'));\n+\u250a   \u250a194\u250a\n+\u250a   \u250a195\u250a    await waitFor(() => expect(passwordInput.value).toEqual('password'));\n+\u250a   \u250a196\u250a\n+\u250a   \u250a197\u250a    await waitFor(() => expect(passwordConfirmInput.value).toEqual('password'));\n+\u250a   \u250a198\u250a\n+\u250a   \u250a199\u250a    act(() => {\n+\u250a   \u250a200\u250a      fireEvent.click(signUpButton);\n+\u250a   \u250a201\u250a    });\n+\u250a   \u250a202\u250a\n+\u250a   \u250a203\u250a    await waitFor(() => expect(history.location.pathname).toEqual('/sign-in'));\n+\u250a   \u250a204\u250a  });\n+\u250a   \u250a205\u250a});\n")),(0,a.kt)("h5",{id:"added-srccomponentsauthscreensignupformtsx"},"Added src","/","components","/","AuthScreen","/","SignUpForm.tsx"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},'@@ -0,0 +1,124 @@\n+\u250a   \u250a  1\u250aimport React from \'react\';\n+\u250a   \u250a  2\u250aimport { useCallback, useState } from \'react\';\n+\u250a   \u250a  3\u250aimport { useSignUp } from \'../../services/auth.service\';\n+\u250a   \u250a  4\u250aimport {\n+\u250a   \u250a  5\u250a  SignForm,\n+\u250a   \u250a  6\u250a  ActualForm,\n+\u250a   \u250a  7\u250a  Legend,\n+\u250a   \u250a  8\u250a  Section,\n+\u250a   \u250a  9\u250a  TextField,\n+\u250a   \u250a 10\u250a  Button,\n+\u250a   \u250a 11\u250a  ErrorMessage,\n+\u250a   \u250a 12\u250a} from \'./form-components\';\n+\u250a   \u250a 13\u250aimport { RouteComponentProps } from \'react-router-dom\';\n+\u250a   \u250a 14\u250a\n+\u250a   \u250a 15\u250aconst SignUpForm: React.FC<RouteComponentProps<any>> = ({ history }) => {\n+\u250a   \u250a 16\u250a  const [name, setName] = useState(\'\');\n+\u250a   \u250a 17\u250a  const [username, setUsername] = useState(\'\');\n+\u250a   \u250a 18\u250a  const [password, setPassword] = useState(\'\');\n+\u250a   \u250a 19\u250a  const [passwordConfirm, setPasswordConfirm] = useState(\'\');\n+\u250a   \u250a 20\u250a  const [error, setError] = useState(\'\');\n+\u250a   \u250a 21\u250a  const [signUp] = useSignUp();\n+\u250a   \u250a 22\u250a\n+\u250a   \u250a 23\u250a  const updateName = useCallback(({ target }) => {\n+\u250a   \u250a 24\u250a    setError(\'\');\n+\u250a   \u250a 25\u250a    setName(target.value);\n+\u250a   \u250a 26\u250a  }, []);\n+\u250a   \u250a 27\u250a\n+\u250a   \u250a 28\u250a  const updateUsername = useCallback(({ target }) => {\n+\u250a   \u250a 29\u250a    setError(\'\');\n+\u250a   \u250a 30\u250a    setUsername(target.value);\n+\u250a   \u250a 31\u250a  }, []);\n+\u250a   \u250a 32\u250a\n+\u250a   \u250a 33\u250a  const updatePassword = useCallback(({ target }) => {\n+\u250a   \u250a 34\u250a    setError(\'\');\n+\u250a   \u250a 35\u250a    setPassword(target.value);\n+\u250a   \u250a 36\u250a  }, []);\n+\u250a   \u250a 37\u250a\n+\u250a   \u250a 38\u250a  const updatePasswordConfirm = useCallback(({ target }) => {\n+\u250a   \u250a 39\u250a    setError(\'\');\n+\u250a   \u250a 40\u250a    setPasswordConfirm(target.value);\n+\u250a   \u250a 41\u250a  }, []);\n+\u250a   \u250a 42\u250a\n+\u250a   \u250a 43\u250a  const maySignUp = useCallback(() => {\n+\u250a   \u250a 44\u250a    return !!(name && username && password && password === passwordConfirm);\n+\u250a   \u250a 45\u250a  }, [name, username, password, passwordConfirm]);\n+\u250a   \u250a 46\u250a\n+\u250a   \u250a 47\u250a  const handleSignUp = useCallback(() => {\n+\u250a   \u250a 48\u250a    signUp({ variables: { username, password, passwordConfirm, name } })\n+\u250a   \u250a 49\u250a      .then(() => {\n+\u250a   \u250a 50\u250a        history.replace(\'/sign-in\');\n+\u250a   \u250a 51\u250a      })\n+\u250a   \u250a 52\u250a      .catch((error) => {\n+\u250a   \u250a 53\u250a        setError(error.message || error);\n+\u250a   \u250a 54\u250a      });\n+\u250a   \u250a 55\u250a  }, [name, username, password, passwordConfirm, history, signUp]);\n+\u250a   \u250a 56\u250a\n+\u250a   \u250a 57\u250a  return (\n+\u250a   \u250a 58\u250a    <SignForm>\n+\u250a   \u250a 59\u250a      <ActualForm>\n+\u250a   \u250a 60\u250a        <Legend>Sign up</Legend>\n+\u250a   \u250a 61\u250a        <Section\n+\u250a   \u250a 62\u250a          style={{\n+\u250a   \u250a 63\u250a            float: \'left\',\n+\u250a   \u250a 64\u250a            width: \'calc(50% - 10px)\',\n+\u250a   \u250a 65\u250a            paddingRight: \'10px\',\n+\u250a   \u250a 66\u250a          }}>\n+\u250a   \u250a 67\u250a          <TextField\n+\u250a   \u250a 68\u250a            data-testid="name-input"\n+\u250a   \u250a 69\u250a            label="Name"\n+\u250a   \u250a 70\u250a            value={name}\n+\u250a   \u250a 71\u250a            onChange={updateName}\n+\u250a   \u250a 72\u250a            autoComplete="off"\n+\u250a   \u250a 73\u250a            margin="normal"\n+\u250a   \u250a 74\u250a          />\n+\u250a   \u250a 75\u250a          <TextField\n+\u250a   \u250a 76\u250a            data-testid="username-input"\n+\u250a   \u250a 77\u250a            label="Username"\n+\u250a   \u250a 78\u250a            value={username}\n+\u250a   \u250a 79\u250a            onChange={updateUsername}\n+\u250a   \u250a 80\u250a            autoComplete="off"\n+\u250a   \u250a 81\u250a            margin="normal"\n+\u250a   \u250a 82\u250a          />\n+\u250a   \u250a 83\u250a        </Section>\n+\u250a   \u250a 84\u250a        <Section\n+\u250a   \u250a 85\u250a          style={{\n+\u250a   \u250a 86\u250a            float: \'right\',\n+\u250a   \u250a 87\u250a            width: \'calc(50% - 10px)\',\n+\u250a   \u250a 88\u250a            paddingLeft: \'10px\',\n+\u250a   \u250a 89\u250a          }}>\n+\u250a   \u250a 90\u250a          <TextField\n+\u250a   \u250a 91\u250a            data-testid="password-input"\n+\u250a   \u250a 92\u250a            label="Password"\n+\u250a   \u250a 93\u250a            type="password"\n+\u250a   \u250a 94\u250a            value={password}\n+\u250a   \u250a 95\u250a            onChange={updatePassword}\n+\u250a   \u250a 96\u250a            autoComplete="off"\n+\u250a   \u250a 97\u250a            margin="normal"\n+\u250a   \u250a 98\u250a          />\n+\u250a   \u250a 99\u250a          <TextField\n+\u250a   \u250a100\u250a            data-testid="password-confirm-input"\n+\u250a   \u250a101\u250a            label="Confirm password"\n+\u250a   \u250a102\u250a            type="password"\n+\u250a   \u250a103\u250a            value={passwordConfirm}\n+\u250a   \u250a104\u250a            onChange={updatePasswordConfirm}\n+\u250a   \u250a105\u250a            autoComplete="off"\n+\u250a   \u250a106\u250a            margin="normal"\n+\u250a   \u250a107\u250a          />\n+\u250a   \u250a108\u250a        </Section>\n+\u250a   \u250a109\u250a        <Button\n+\u250a   \u250a110\u250a          data-testid="sign-up-button"\n+\u250a   \u250a111\u250a          type="button"\n+\u250a   \u250a112\u250a          color="secondary"\n+\u250a   \u250a113\u250a          variant="contained"\n+\u250a   \u250a114\u250a          disabled={!maySignUp()}\n+\u250a   \u250a115\u250a          onClick={handleSignUp}>\n+\u250a   \u250a116\u250a          Sign up\n+\u250a   \u250a117\u250a        </Button>\n+\u250a   \u250a118\u250a        <ErrorMessage data-testid="error-message">{error}</ErrorMessage>\n+\u250a   \u250a119\u250a      </ActualForm>\n+\u250a   \u250a120\u250a    </SignForm>\n+\u250a   \u250a121\u250a  );\n+\u250a   \u250a122\u250a};\n+\u250a   \u250a123\u250a\n+\u250a   \u250a124\u250aexport default SignUpForm;\n')),(0,a.kt)("h5",{id:"added-srccomponentsauthscreenform-componentsts"},"Added src","/","components","/","AuthScreen","/","form-components.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,75 @@\n+\u250a  \u250a 1\u250aimport MaterialButton from '@material-ui/core/Button';\n+\u250a  \u250a 2\u250aimport MaterialTextField from '@material-ui/core/TextField';\n+\u250a  \u250a 3\u250aimport styled from 'styled-components';\n+\u250a  \u250a 4\u250a\n+\u250a  \u250a 5\u250aexport const SignForm = styled.div`\n+\u250a  \u250a 6\u250a  height: calc(100% - 265px);\n+\u250a  \u250a 7\u250a`;\n+\u250a  \u250a 8\u250a\n+\u250a  \u250a 9\u250aexport const ActualForm = styled.form`\n+\u250a  \u250a10\u250a  padding: 20px;\n+\u250a  \u250a11\u250a`;\n+\u250a  \u250a12\u250a\n+\u250a  \u250a13\u250aexport const Section = styled.div`\n+\u250a  \u250a14\u250a  padding-bottom: 35px;\n+\u250a  \u250a15\u250a`;\n+\u250a  \u250a16\u250a\n+\u250a  \u250a17\u250aexport const Legend = styled.legend`\n+\u250a  \u250a18\u250a  font-weight: bold;\n+\u250a  \u250a19\u250a  color: white;\n+\u250a  \u250a20\u250a`;\n+\u250a  \u250a21\u250a\n+\u250a  \u250a22\u250aexport const Label = styled.label`\n+\u250a  \u250a23\u250a  color: white !important;\n+\u250a  \u250a24\u250a`;\n+\u250a  \u250a25\u250a\n+\u250a  \u250a26\u250aexport const Input = styled.input`\n+\u250a  \u250a27\u250a  color: white;\n+\u250a  \u250a28\u250a\n+\u250a  \u250a29\u250a  &::placeholder {\n+\u250a  \u250a30\u250a    color: var(--primary-bg);\n+\u250a  \u250a31\u250a  }\n+\u250a  \u250a32\u250a`;\n+\u250a  \u250a33\u250a\n+\u250a  \u250a34\u250aexport const TextField = styled(MaterialTextField)`\n+\u250a  \u250a35\u250a  width: 100%;\n+\u250a  \u250a36\u250a  position: relative;\n+\u250a  \u250a37\u250a\n+\u250a  \u250a38\u250a  > div::before {\n+\u250a  \u250a39\u250a    border-color: white !important;\n+\u250a  \u250a40\u250a  }\n+\u250a  \u250a41\u250a\n+\u250a  \u250a42\u250a  input {\n+\u250a  \u250a43\u250a    color: white !important;\n+\u250a  \u250a44\u250a\n+\u250a  \u250a45\u250a    &::placeholder {\n+\u250a  \u250a46\u250a      color: var(--primary-bg) !important;\n+\u250a  \u250a47\u250a    }\n+\u250a  \u250a48\u250a  }\n+\u250a  \u250a49\u250a\n+\u250a  \u250a50\u250a  label {\n+\u250a  \u250a51\u250a    color: white !important;\n+\u250a  \u250a52\u250a  }\n+\u250a  \u250a53\u250a`;\n+\u250a  \u250a54\u250a\n+\u250a  \u250a55\u250aexport const Button = styled(MaterialButton)`\n+\u250a  \u250a56\u250a  width: 100px;\n+\u250a  \u250a57\u250a  display: block !important;\n+\u250a  \u250a58\u250a  margin: auto !important;\n+\u250a  \u250a59\u250a  background-color: var(--secondary-bg) !important;\n+\u250a  \u250a60\u250a\n+\u250a  \u250a61\u250a  &[disabled] {\n+\u250a  \u250a62\u250a    color: #38a81c;\n+\u250a  \u250a63\u250a  }\n+\u250a  \u250a64\u250a\n+\u250a  \u250a65\u250a  &:not([disabled]) {\n+\u250a  \u250a66\u250a    color: white;\n+\u250a  \u250a67\u250a  }\n+\u250a  \u250a68\u250a`;\n+\u250a  \u250a69\u250a\n+\u250a  \u250a70\u250aexport const ErrorMessage = styled.div`\n+\u250a  \u250a71\u250a  position: fixed;\n+\u250a  \u250a72\u250a  color: red;\n+\u250a  \u250a73\u250a  font-size: 15px;\n+\u250a  \u250a74\u250a  margin-top: 20px;\n+\u250a  \u250a75\u250a`;\n")),(0,a.kt)("h5",{id:"changed-srccomponentsauthscreenindextsx-1"},"Changed src","/","components","/","AuthScreen","/","index.tsx"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,13 +1,13 @@\n-\u250a 1\u250a  \u250aimport MaterialButton from '@material-ui/core/Button';\n-\u250a 2\u250a  \u250aimport MaterialTextField from '@material-ui/core/TextField';\n \u250a 3\u250a 1\u250aimport React from 'react';\n-\u250a 4\u250a  \u250aimport { useCallback, useState } from 'react';\n+\u250a  \u250a 2\u250aimport { useMemo } from 'react';\n+\u250a  \u250a 3\u250aimport { Route } from 'react-router-dom';\n \u250a 5\u250a 4\u250aimport styled from 'styled-components';\n-\u250a 6\u250a  \u250aimport { useSignIn } from '../../services/auth.service';\n+\u250a  \u250a 5\u250aimport AnimatedSwitch from '../AnimatedSwitch';\n+\u250a  \u250a 6\u250aimport SignInForm from './SignInForm';\n+\u250a  \u250a 7\u250aimport SignUpForm from './SignUpForm';\n \u250a 7\u250a 8\u250aimport { RouteComponentProps } from 'react-router-dom';\n \u250a 8\u250a 9\u250a\n \u250a 9\u250a10\u250aconst Container = styled.div`\n-\u250a10\u250a  \u250a  height: 100%;\n \u250a11\u250a11\u250a  background: radial-gradient(rgb(34, 65, 67), rgb(17, 48, 50)),\n \u250a12\u250a12\u250a    url(/assets/chat-background.jpg) no-repeat;\n \u250a13\u250a13\u250a  background-size: cover;\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},'@@ -40,149 +40,51 @@\n \u250a 40\u250a 40\u250a  bottom: 10px;\n \u250a 41\u250a 41\u250a  left: 10px;\n \u250a 42\u250a 42\u250a\n-\u250a 43\u250a   \u250a  a {\n+\u250a   \u250a 43\u250a  label {\n \u250a 44\u250a 44\u250a    color: var(--secondary-bg);\n \u250a 45\u250a 45\u250a  }\n \u250a 46\u250a 46\u250a`;\n \u250a 47\u250a 47\u250a\n-\u250a 48\u250a   \u250aconst SignInForm = styled.div`\n-\u250a 49\u250a   \u250a  height: calc(100% - 265px);\n-\u250a 50\u250a   \u250a`;\n-\u250a 51\u250a   \u250a\n-\u250a 52\u250a   \u250aconst ActualForm = styled.form`\n-\u250a 53\u250a   \u250a  padding: 20px;\n-\u250a 54\u250a   \u250a`;\n-\u250a 55\u250a   \u250a\n-\u250a 56\u250a   \u250aconst Section = styled.div`\n-\u250a 57\u250a   \u250a  width: 100%;\n-\u250a 58\u250a   \u250a  padding-bottom: 35px;\n-\u250a 59\u250a   \u250a`;\n-\u250a 60\u250a   \u250a\n-\u250a 61\u250a   \u250aconst Legend = styled.legend`\n-\u250a 62\u250a   \u250a  font-weight: bold;\n-\u250a 63\u250a   \u250a  color: white;\n-\u250a 64\u250a   \u250a`;\n-\u250a 65\u250a   \u250a\n-\u250a 66\u250a   \u250a// eslint-disable-next-line\n-\u250a 67\u250a   \u250aconst Label = styled.label`\n-\u250a 68\u250a   \u250a  color: white !important;\n-\u250a 69\u250a   \u250a`;\n-\u250a 70\u250a   \u250a\n-\u250a 71\u250a   \u250a// eslint-disable-next-line\n-\u250a 72\u250a   \u250aconst Input = styled.input`\n-\u250a 73\u250a   \u250a  color: white;\n-\u250a 74\u250a   \u250a\n-\u250a 75\u250a   \u250a  &::placeholder {\n-\u250a 76\u250a   \u250a    color: var(--primary-bg);\n-\u250a 77\u250a   \u250a  }\n-\u250a 78\u250a   \u250a`;\n-\u250a 79\u250a   \u250a\n-\u250a 80\u250a   \u250aconst TextField = styled(MaterialTextField)`\n-\u250a 81\u250a   \u250a  width: 100%;\n-\u250a 82\u250a   \u250a  position: relative;\n-\u250a 83\u250a   \u250a\n-\u250a 84\u250a   \u250a  > div::before {\n-\u250a 85\u250a   \u250a    border-color: white !important;\n-\u250a 86\u250a   \u250a  }\n-\u250a 87\u250a   \u250a\n-\u250a 88\u250a   \u250a  input {\n-\u250a 89\u250a   \u250a    color: white !important;\n-\u250a 90\u250a   \u250a\n-\u250a 91\u250a   \u250a    &::placeholder {\n-\u250a 92\u250a   \u250a      color: var(--primary-bg) !important;\n+\u250a   \u250a 48\u250aconst AuthScreen: React.FC<RouteComponentProps<any>> = ({\n+\u250a   \u250a 49\u250a  history,\n+\u250a   \u250a 50\u250a  location,\n+\u250a   \u250a 51\u250a}) => {\n+\u250a   \u250a 52\u250a  const alternative = useMemo(() => {\n+\u250a   \u250a 53\u250a    if (location.pathname === \'/sign-in\') {\n+\u250a   \u250a 54\u250a      const handleSignUp = () => {\n+\u250a   \u250a 55\u250a        history.replace(\'/sign-up\');\n+\u250a   \u250a 56\u250a      };\n+\u250a   \u250a 57\u250a\n+\u250a   \u250a 58\u250a      return (\n+\u250a   \u250a 59\u250a        <Alternative>\n+\u250a   \u250a 60\u250a          Don\'t have an account yet?{\' \'}\n+\u250a   \u250a 61\u250a          <label onClick={handleSignUp}>Sign up!</label>\n+\u250a   \u250a 62\u250a        </Alternative>\n+\u250a   \u250a 63\u250a      );\n+\u250a   \u250a 64\u250a    } else {\n+\u250a   \u250a 65\u250a      const handleSignIn = () => {\n+\u250a   \u250a 66\u250a        history.replace(\'/sign-in\');\n+\u250a   \u250a 67\u250a      };\n+\u250a   \u250a 68\u250a\n+\u250a   \u250a 69\u250a      return (\n+\u250a   \u250a 70\u250a        <Alternative>\n+\u250a   \u250a 71\u250a          Already have an accout? <label onClick={handleSignIn}>Sign in!</label>\n+\u250a   \u250a 72\u250a        </Alternative>\n+\u250a   \u250a 73\u250a      );\n \u250a 93\u250a 74\u250a    }\n-\u250a 94\u250a   \u250a  }\n-\u250a 95\u250a   \u250a\n-\u250a 96\u250a   \u250a  label {\n-\u250a 97\u250a   \u250a    color: white !important;\n-\u250a 98\u250a   \u250a  }\n-\u250a 99\u250a   \u250a`;\n-\u250a100\u250a   \u250a\n-\u250a101\u250a   \u250aconst Button = styled(MaterialButton)`\n-\u250a102\u250a   \u250a  width: 100px;\n-\u250a103\u250a   \u250a  display: block !important;\n-\u250a104\u250a   \u250a  margin: auto !important;\n-\u250a105\u250a   \u250a  background-color: var(--secondary-bg) !important;\n-\u250a106\u250a   \u250a\n-\u250a107\u250a   \u250a  &[disabled] {\n-\u250a108\u250a   \u250a    color: #38a81c;\n-\u250a109\u250a   \u250a  }\n-\u250a110\u250a   \u250a\n-\u250a111\u250a   \u250a  &:not([disabled]) {\n-\u250a112\u250a   \u250a    color: white;\n-\u250a113\u250a   \u250a  }\n-\u250a114\u250a   \u250a`;\n-\u250a115\u250a   \u250a\n-\u250a116\u250a   \u250aconst AuthScreen: React.FC<RouteComponentProps<any>> = ({ history }) => {\n-\u250a117\u250a   \u250a  const [username, setUsername] = useState(\'\');\n-\u250a118\u250a   \u250a  const [password, setPassword] = useState(\'\');\n-\u250a119\u250a   \u250a  // eslint-disable-next-line\n-\u250a120\u250a   \u250a  const [error, setError] = useState(\'\');\n-\u250a121\u250a   \u250a  const [signIn] = useSignIn();\n-\u250a122\u250a   \u250a\n-\u250a123\u250a   \u250a  const onUsernameChange = useCallback(({ target }) => {\n-\u250a124\u250a   \u250a    setError(\'\');\n-\u250a125\u250a   \u250a    setUsername(target.value);\n-\u250a126\u250a   \u250a  }, []);\n-\u250a127\u250a   \u250a\n-\u250a128\u250a   \u250a  const onPasswordChange = useCallback(({ target }) => {\n-\u250a129\u250a   \u250a    setError(\'\');\n-\u250a130\u250a   \u250a    setPassword(target.value);\n-\u250a131\u250a   \u250a  }, []);\n-\u250a132\u250a   \u250a\n-\u250a133\u250a   \u250a  const maySignIn = useCallback(() => {\n-\u250a134\u250a   \u250a    return !!(username && password);\n-\u250a135\u250a   \u250a  }, [username, password]);\n-\u250a136\u250a   \u250a\n-\u250a137\u250a   \u250a  const handleSignIn = useCallback(() => {\n-\u250a138\u250a   \u250a    signIn({ variables: { username, password } })\n-\u250a139\u250a   \u250a      .then(() => {\n-\u250a140\u250a   \u250a        history.push(\'/chats\');\n-\u250a141\u250a   \u250a      })\n-\u250a142\u250a   \u250a      .catch((error) => {\n-\u250a143\u250a   \u250a        setError(error.message || error);\n-\u250a144\u250a   \u250a      });\n-\u250a145\u250a   \u250a  }, [username, password, history, signIn]);\n+\u250a   \u250a 75\u250a  }, [location.pathname, history]);\n \u250a146\u250a 76\u250a\n \u250a147\u250a 77\u250a  return (\n-\u250a148\u250a   \u250a    <Container>\n-\u250a149\u250a   \u250a      <Intro>\n+\u250a   \u250a 78\u250a    <Container className="AuthScreen Screen">\n+\u250a   \u250a 79\u250a      <Intro className="AuthScreen-intro">\n \u250a150\u250a 80\u250a        <Icon src="assets/whatsapp-icon.png" className="AuthScreen-icon" />\n \u250a151\u250a 81\u250a        <Title className="AuthScreen-title">WhatsApp</Title>\n \u250a152\u250a 82\u250a      </Intro>\n-\u250a153\u250a   \u250a      <SignInForm>\n-\u250a154\u250a   \u250a        <ActualForm>\n-\u250a155\u250a   \u250a          <Legend>Sign in</Legend>\n-\u250a156\u250a   \u250a          <Section>\n-\u250a157\u250a   \u250a            <TextField\n-\u250a158\u250a   \u250a              className="AuthScreen-text-field"\n-\u250a159\u250a   \u250a              label="Username"\n-\u250a160\u250a   \u250a              value={username}\n-\u250a161\u250a   \u250a              onChange={onUsernameChange}\n-\u250a162\u250a   \u250a              margin="normal"\n-\u250a163\u250a   \u250a              placeholder="Enter your username"\n-\u250a164\u250a   \u250a            />\n-\u250a165\u250a   \u250a            <TextField\n-\u250a166\u250a   \u250a              className="AuthScreen-text-field"\n-\u250a167\u250a   \u250a              label="Password"\n-\u250a168\u250a   \u250a              type="password"\n-\u250a169\u250a   \u250a              value={password}\n-\u250a170\u250a   \u250a              onChange={onPasswordChange}\n-\u250a171\u250a   \u250a              margin="normal"\n-\u250a172\u250a   \u250a              placeholder="Enter your password"\n-\u250a173\u250a   \u250a            />\n-\u250a174\u250a   \u250a          </Section>\n-\u250a175\u250a   \u250a          <Button\n-\u250a176\u250a   \u250a            data-testid="sign-in-button"\n-\u250a177\u250a   \u250a            type="button"\n-\u250a178\u250a   \u250a            color="secondary"\n-\u250a179\u250a   \u250a            variant="contained"\n-\u250a180\u250a   \u250a            disabled={!maySignIn()}\n-\u250a181\u250a   \u250a            onClick={handleSignIn}>\n-\u250a182\u250a   \u250a            Sign in\n-\u250a183\u250a   \u250a          </Button>\n-\u250a184\u250a   \u250a        </ActualForm>\n-\u250a185\u250a   \u250a      </SignInForm>\n+\u250a   \u250a 83\u250a      <AnimatedSwitch>\n+\u250a   \u250a 84\u250a        <Route exact path="/sign-in" component={SignInForm} />\n+\u250a   \u250a 85\u250a        <Route exact path="/sign-up" component={SignUpForm} />\n+\u250a   \u250a 86\u250a      </AnimatedSwitch>\n+\u250a   \u250a 87\u250a      {alternative}\n \u250a186\u250a 88\u250a    </Container>\n \u250a187\u250a 89\u250a  );\n \u250a188\u250a 90\u250a};\n')),(0,a.kt)("p",null,"And then we will make the necessary changes in the ",(0,a.kt)("inlineCode",{parentName:"p"},"AuthScreen"),":"),(0,a.kt)("h4",{id:"client-step-136-split-authscreen-into-signinform-and-signupform-1"},(0,a.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/5873de76264d1eb162d596b8069b3ac2a25a856f"},(0,a.kt)("strong",{parentName:"a"},"Client")," Step 13.6: Split AuthScreen into SignInForm and SignUpForm")),(0,a.kt)("h5",{id:"added-srccomponentsauthscreensigninformtesttsx-1"},"Added src","/","components","/","AuthScreen","/","SignInForm.test.tsx"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,161 @@\n+\u250a   \u250a  1\u250aimport { createMemoryHistory } from 'history';\n+\u250a   \u250a  2\u250aimport React from 'react';\n+\u250a   \u250a  3\u250aimport { ApolloProvider } from '@apollo/react-hooks';\n+\u250a   \u250a  4\u250aimport {\n+\u250a   \u250a  5\u250a  act,\n+\u250a   \u250a  6\u250a  cleanup,\n+\u250a   \u250a  7\u250a  render,\n+\u250a   \u250a  8\u250a  fireEvent,\n+\u250a   \u250a  9\u250a  waitFor,\n+\u250a   \u250a 10\u250a} from '@testing-library/react';\n+\u250a   \u250a 11\u250aimport SignInForm from './SignInForm';\n+\u250a   \u250a 12\u250aimport { SignInDocument } from '../../graphql/types';\n+\u250a   \u250a 13\u250aimport { mockApolloClient } from '../../test-helpers';\n+\u250a   \u250a 14\u250a\n+\u250a   \u250a 15\u250adescribe('SignInForm', () => {\n+\u250a   \u250a 16\u250a  afterEach(cleanup);\n+\u250a   \u250a 17\u250a\n+\u250a   \u250a 18\u250a  it('enables sign-in button when filled in', async () => {\n+\u250a   \u250a 19\u250a    const history = createMemoryHistory();\n+\u250a   \u250a 20\u250a    const client = mockApolloClient();\n+\u250a   \u250a 21\u250a\n+\u250a   \u250a 22\u250a    let getByTestId: any = null;\n+\u250a   \u250a 23\u250a\n+\u250a   \u250a 24\u250a    act(() => {\n+\u250a   \u250a 25\u250a      getByTestId = render(\n+\u250a   \u250a 26\u250a        <ApolloProvider client={client}>\n+\u250a   \u250a 27\u250a          <SignInForm history={history} />\n+\u250a   \u250a 28\u250a        </ApolloProvider>\n+\u250a   \u250a 29\u250a      ).getByTestId;\n+\u250a   \u250a 30\u250a    });\n+\u250a   \u250a 31\u250a\n+\u250a   \u250a 32\u250a    const signInButton = await waitFor(\n+\u250a   \u250a 33\u250a      () => getByTestId('sign-in-button') as HTMLButtonElement\n+\u250a   \u250a 34\u250a    );\n+\u250a   \u250a 35\u250a    const usernameInput = await waitFor(() =>\n+\u250a   \u250a 36\u250a      getByTestId('username-input').querySelector('input')\n+\u250a   \u250a 37\u250a    );\n+\u250a   \u250a 38\u250a    const passwordInput = await waitFor(() =>\n+\u250a   \u250a 39\u250a      getByTestId('password-input').querySelector('input')\n+\u250a   \u250a 40\u250a    );\n+\u250a   \u250a 41\u250a\n+\u250a   \u250a 42\u250a    expect(signInButton.disabled).toEqual(true);\n+\u250a   \u250a 43\u250a\n+\u250a   \u250a 44\u250a    act(() => {\n+\u250a   \u250a 45\u250a      fireEvent.change(usernameInput, { target: { value: 'username' } });\n+\u250a   \u250a 46\u250a      fireEvent.change(passwordInput, { target: { value: 'password' } });\n+\u250a   \u250a 47\u250a    });\n+\u250a   \u250a 48\u250a\n+\u250a   \u250a 49\u250a    await waitFor(() => expect(signInButton.disabled).toEqual(false));\n+\u250a   \u250a 50\u250a  });\n+\u250a   \u250a 51\u250a\n+\u250a   \u250a 52\u250a  it('prints server error if input was wrong', async () => {\n+\u250a   \u250a 53\u250a    const history = createMemoryHistory();\n+\u250a   \u250a 54\u250a\n+\u250a   \u250a 55\u250a    const client = mockApolloClient([\n+\u250a   \u250a 56\u250a      {\n+\u250a   \u250a 57\u250a        request: {\n+\u250a   \u250a 58\u250a          query: SignInDocument,\n+\u250a   \u250a 59\u250a          variables: {\n+\u250a   \u250a 60\u250a            username: 'username',\n+\u250a   \u250a 61\u250a            password: 'password',\n+\u250a   \u250a 62\u250a          },\n+\u250a   \u250a 63\u250a        },\n+\u250a   \u250a 64\u250a        get result() {\n+\u250a   \u250a 65\u250a          throw Error('sign-in failed');\n+\u250a   \u250a 66\u250a        },\n+\u250a   \u250a 67\u250a      },\n+\u250a   \u250a 68\u250a    ]);\n+\u250a   \u250a 69\u250a\n+\u250a   \u250a 70\u250a    let getByTestId: any = null;\n+\u250a   \u250a 71\u250a\n+\u250a   \u250a 72\u250a    act(() => {\n+\u250a   \u250a 73\u250a      getByTestId = render(\n+\u250a   \u250a 74\u250a        <ApolloProvider client={client}>\n+\u250a   \u250a 75\u250a          <SignInForm history={history} />\n+\u250a   \u250a 76\u250a        </ApolloProvider>\n+\u250a   \u250a 77\u250a      ).getByTestId;\n+\u250a   \u250a 78\u250a    });\n+\u250a   \u250a 79\u250a\n+\u250a   \u250a 80\u250a    const signInButton = await waitFor(\n+\u250a   \u250a 81\u250a      () => getByTestId('sign-in-button') as HTMLButtonElement\n+\u250a   \u250a 82\u250a    );\n+\u250a   \u250a 83\u250a    const usernameInput = await waitFor(() =>\n+\u250a   \u250a 84\u250a      getByTestId('username-input').querySelector('input')\n+\u250a   \u250a 85\u250a    );\n+\u250a   \u250a 86\u250a    const passwordInput = await waitFor(() =>\n+\u250a   \u250a 87\u250a      getByTestId('password-input').querySelector('input')\n+\u250a   \u250a 88\u250a    );\n+\u250a   \u250a 89\u250a\n+\u250a   \u250a 90\u250a    act(() => {\n+\u250a   \u250a 91\u250a      fireEvent.change(usernameInput, { target: { value: 'username' } });\n+\u250a   \u250a 92\u250a      fireEvent.change(passwordInput, { target: { value: 'password' } });\n+\u250a   \u250a 93\u250a    });\n+\u250a   \u250a 94\u250a\n+\u250a   \u250a 95\u250a    await waitFor(() => expect(usernameInput.value).toEqual('username'));\n+\u250a   \u250a 96\u250a\n+\u250a   \u250a 97\u250a    await waitFor(() => expect(passwordInput.value).toEqual('password'));\n+\u250a   \u250a 98\u250a\n+\u250a   \u250a 99\u250a    act(() => {\n+\u250a   \u250a100\u250a      fireEvent.click(signInButton);\n+\u250a   \u250a101\u250a    });\n+\u250a   \u250a102\u250a\n+\u250a   \u250a103\u250a    const errorMessage = await waitFor(() => getByTestId('error-message'));\n+\u250a   \u250a104\u250a\n+\u250a   \u250a105\u250a    await waitFor(() =>\n+\u250a   \u250a106\u250a      expect(errorMessage.innerHTML).toContain('sign-in failed')\n+\u250a   \u250a107\u250a    );\n+\u250a   \u250a108\u250a  });\n+\u250a   \u250a109\u250a\n+\u250a   \u250a110\u250a  it('navigates to /chats if everything went right', async () => {\n+\u250a   \u250a111\u250a    const history = createMemoryHistory();\n+\u250a   \u250a112\u250a\n+\u250a   \u250a113\u250a    const client = mockApolloClient([\n+\u250a   \u250a114\u250a      {\n+\u250a   \u250a115\u250a        request: {\n+\u250a   \u250a116\u250a          query: SignInDocument,\n+\u250a   \u250a117\u250a          variables: {\n+\u250a   \u250a118\u250a            username: 'username',\n+\u250a   \u250a119\u250a            password: 'password',\n+\u250a   \u250a120\u250a          },\n+\u250a   \u250a121\u250a        },\n+\u250a   \u250a122\u250a        result: { data: {} },\n+\u250a   \u250a123\u250a      },\n+\u250a   \u250a124\u250a    ]);\n+\u250a   \u250a125\u250a\n+\u250a   \u250a126\u250a    let getByTestId: any = null;\n+\u250a   \u250a127\u250a\n+\u250a   \u250a128\u250a    act(() => {\n+\u250a   \u250a129\u250a      getByTestId = render(\n+\u250a   \u250a130\u250a        <ApolloProvider client={client}>\n+\u250a   \u250a131\u250a          <SignInForm history={history} />\n+\u250a   \u250a132\u250a        </ApolloProvider>\n+\u250a   \u250a133\u250a      ).getByTestId;\n+\u250a   \u250a134\u250a    });\n+\u250a   \u250a135\u250a\n+\u250a   \u250a136\u250a    const usernameInput = await waitFor(() =>\n+\u250a   \u250a137\u250a      getByTestId('username-input').querySelector('input')\n+\u250a   \u250a138\u250a    );\n+\u250a   \u250a139\u250a    const passwordInput = await waitFor(() =>\n+\u250a   \u250a140\u250a      getByTestId('password-input').querySelector('input')\n+\u250a   \u250a141\u250a    );\n+\u250a   \u250a142\u250a    const signInButton = await waitFor(\n+\u250a   \u250a143\u250a      () => getByTestId('sign-in-button') as HTMLButtonElement\n+\u250a   \u250a144\u250a    );\n+\u250a   \u250a145\u250a\n+\u250a   \u250a146\u250a    act(() => {\n+\u250a   \u250a147\u250a      fireEvent.change(usernameInput, { target: { value: 'username' } });\n+\u250a   \u250a148\u250a      fireEvent.change(passwordInput, { target: { value: 'password' } });\n+\u250a   \u250a149\u250a    });\n+\u250a   \u250a150\u250a\n+\u250a   \u250a151\u250a    await waitFor(() => expect(usernameInput.value).toEqual('username'));\n+\u250a   \u250a152\u250a\n+\u250a   \u250a153\u250a    await waitFor(() => expect(passwordInput.value).toEqual('password'));\n+\u250a   \u250a154\u250a\n+\u250a   \u250a155\u250a    act(() => {\n+\u250a   \u250a156\u250a      fireEvent.click(signInButton);\n+\u250a   \u250a157\u250a    });\n+\u250a   \u250a158\u250a\n+\u250a   \u250a159\u250a    await waitFor(() => expect(history.location.pathname).toEqual('/chats'));\n+\u250a   \u250a160\u250a  });\n+\u250a   \u250a161\u250a});\n")),(0,a.kt)("h5",{id:"added-srccomponentsauthscreensigninformtsx-1"},"Added src","/","components","/","AuthScreen","/","SignInForm.tsx"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},'@@ -0,0 +1,83 @@\n+\u250a  \u250a 1\u250aimport React from \'react\';\n+\u250a  \u250a 2\u250aimport { useCallback, useState } from \'react\';\n+\u250a  \u250a 3\u250aimport { useSignIn } from \'../../services/auth.service\';\n+\u250a  \u250a 4\u250aimport {\n+\u250a  \u250a 5\u250a  SignForm,\n+\u250a  \u250a 6\u250a  ActualForm,\n+\u250a  \u250a 7\u250a  Legend,\n+\u250a  \u250a 8\u250a  Section,\n+\u250a  \u250a 9\u250a  TextField,\n+\u250a  \u250a10\u250a  Button,\n+\u250a  \u250a11\u250a  ErrorMessage,\n+\u250a  \u250a12\u250a} from \'./form-components\';\n+\u250a  \u250a13\u250aimport { RouteComponentProps } from \'react-router-dom\';\n+\u250a  \u250a14\u250a\n+\u250a  \u250a15\u250aconst SignInForm: React.FC<RouteComponentProps<any>> = ({ history }) => {\n+\u250a  \u250a16\u250a  const [username, setUsername] = useState(\'\');\n+\u250a  \u250a17\u250a  const [password, setPassword] = useState(\'\');\n+\u250a  \u250a18\u250a  const [error, setError] = useState(\'\');\n+\u250a  \u250a19\u250a  const [signIn] = useSignIn();\n+\u250a  \u250a20\u250a\n+\u250a  \u250a21\u250a  const onUsernameChange = useCallback(({ target }) => {\n+\u250a  \u250a22\u250a    setError(\'\');\n+\u250a  \u250a23\u250a    setUsername(target.value);\n+\u250a  \u250a24\u250a  }, []);\n+\u250a  \u250a25\u250a\n+\u250a  \u250a26\u250a  const onPasswordChange = useCallback(({ target }) => {\n+\u250a  \u250a27\u250a    setError(\'\');\n+\u250a  \u250a28\u250a    setPassword(target.value);\n+\u250a  \u250a29\u250a  }, []);\n+\u250a  \u250a30\u250a\n+\u250a  \u250a31\u250a  const maySignIn = useCallback(() => {\n+\u250a  \u250a32\u250a    return !!(username && password);\n+\u250a  \u250a33\u250a  }, [username, password]);\n+\u250a  \u250a34\u250a\n+\u250a  \u250a35\u250a  const handleSignIn = useCallback(() => {\n+\u250a  \u250a36\u250a    signIn({ variables: { username, password } })\n+\u250a  \u250a37\u250a      .then(() => {\n+\u250a  \u250a38\u250a        history.replace(\'/chats\');\n+\u250a  \u250a39\u250a      })\n+\u250a  \u250a40\u250a      .catch((error) => {\n+\u250a  \u250a41\u250a        setError(error.message || error);\n+\u250a  \u250a42\u250a      });\n+\u250a  \u250a43\u250a  }, [username, password, history, signIn]);\n+\u250a  \u250a44\u250a\n+\u250a  \u250a45\u250a  return (\n+\u250a  \u250a46\u250a    <SignForm>\n+\u250a  \u250a47\u250a      <ActualForm>\n+\u250a  \u250a48\u250a        <Legend>Sign in</Legend>\n+\u250a  \u250a49\u250a        <Section style={{ width: \'100%\' }}>\n+\u250a  \u250a50\u250a          <TextField\n+\u250a  \u250a51\u250a            data-testid="username-input"\n+\u250a  \u250a52\u250a            label="Username"\n+\u250a  \u250a53\u250a            value={username}\n+\u250a  \u250a54\u250a            onChange={onUsernameChange}\n+\u250a  \u250a55\u250a            margin="normal"\n+\u250a  \u250a56\u250a            placeholder="Enter your username"\n+\u250a  \u250a57\u250a          />\n+\u250a  \u250a58\u250a          <TextField\n+\u250a  \u250a59\u250a            data-testid="password-input"\n+\u250a  \u250a60\u250a            label="Password"\n+\u250a  \u250a61\u250a            type="password"\n+\u250a  \u250a62\u250a            value={password}\n+\u250a  \u250a63\u250a            onChange={onPasswordChange}\n+\u250a  \u250a64\u250a            margin="normal"\n+\u250a  \u250a65\u250a            placeholder="Enter your password"\n+\u250a  \u250a66\u250a          />\n+\u250a  \u250a67\u250a        </Section>\n+\u250a  \u250a68\u250a        <Button\n+\u250a  \u250a69\u250a          data-testid="sign-in-button"\n+\u250a  \u250a70\u250a          type="button"\n+\u250a  \u250a71\u250a          color="secondary"\n+\u250a  \u250a72\u250a          variant="contained"\n+\u250a  \u250a73\u250a          disabled={!maySignIn()}\n+\u250a  \u250a74\u250a          onClick={handleSignIn}>\n+\u250a  \u250a75\u250a          Sign in\n+\u250a  \u250a76\u250a        </Button>\n+\u250a  \u250a77\u250a        <ErrorMessage data-testid="error-message">{error}</ErrorMessage>\n+\u250a  \u250a78\u250a      </ActualForm>\n+\u250a  \u250a79\u250a    </SignForm>\n+\u250a  \u250a80\u250a  );\n+\u250a  \u250a81\u250a};\n+\u250a  \u250a82\u250a\n+\u250a  \u250a83\u250aexport default SignInForm;\n')),(0,a.kt)("h5",{id:"added-srccomponentsauthscreensignupformtesttsx-1"},"Added src","/","components","/","AuthScreen","/","SignUpForm.test.tsx"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,205 @@\n+\u250a   \u250a  1\u250aimport { createMemoryHistory } from 'history';\n+\u250a   \u250a  2\u250aimport React from 'react';\n+\u250a   \u250a  3\u250aimport { ApolloProvider } from '@apollo/react-hooks';\n+\u250a   \u250a  4\u250aimport {\n+\u250a   \u250a  5\u250a  act,\n+\u250a   \u250a  6\u250a  cleanup,\n+\u250a   \u250a  7\u250a  render,\n+\u250a   \u250a  8\u250a  fireEvent,\n+\u250a   \u250a  9\u250a  waitFor,\n+\u250a   \u250a 10\u250a} from '@testing-library/react';\n+\u250a   \u250a 11\u250aimport SignUpForm from './SignUpForm';\n+\u250a   \u250a 12\u250aimport { SignUpDocument } from '../../graphql/types';\n+\u250a   \u250a 13\u250aimport { mockApolloClient } from '../../test-helpers';\n+\u250a   \u250a 14\u250a\n+\u250a   \u250a 15\u250adescribe('SignUpForm', () => {\n+\u250a   \u250a 16\u250a  afterEach(cleanup);\n+\u250a   \u250a 17\u250a\n+\u250a   \u250a 18\u250a  it('enables sign-up button when filled in', async () => {\n+\u250a   \u250a 19\u250a    const history = createMemoryHistory();\n+\u250a   \u250a 20\u250a    const client = mockApolloClient();\n+\u250a   \u250a 21\u250a\n+\u250a   \u250a 22\u250a    let getByTestId: any = null;\n+\u250a   \u250a 23\u250a\n+\u250a   \u250a 24\u250a    act(() => {\n+\u250a   \u250a 25\u250a      getByTestId = render(\n+\u250a   \u250a 26\u250a        <ApolloProvider client={client}>\n+\u250a   \u250a 27\u250a          <SignUpForm history={history} />\n+\u250a   \u250a 28\u250a        </ApolloProvider>\n+\u250a   \u250a 29\u250a      ).getByTestId;\n+\u250a   \u250a 30\u250a    });\n+\u250a   \u250a 31\u250a\n+\u250a   \u250a 32\u250a    const nameInput = await waitFor(() =>\n+\u250a   \u250a 33\u250a      getByTestId('name-input').querySelector('input')\n+\u250a   \u250a 34\u250a    );\n+\u250a   \u250a 35\u250a    const usernameInput = await waitFor(() =>\n+\u250a   \u250a 36\u250a      getByTestId('username-input').querySelector('input')\n+\u250a   \u250a 37\u250a    );\n+\u250a   \u250a 38\u250a    const passwordInput = await waitFor(() =>\n+\u250a   \u250a 39\u250a      getByTestId('password-input').querySelector('input')\n+\u250a   \u250a 40\u250a    );\n+\u250a   \u250a 41\u250a    const passwordConfirmInput = await waitFor(() =>\n+\u250a   \u250a 42\u250a      getByTestId('password-confirm-input').querySelector('input')\n+\u250a   \u250a 43\u250a    );\n+\u250a   \u250a 44\u250a    const signUpButton = await waitFor(\n+\u250a   \u250a 45\u250a      () => getByTestId('sign-up-button') as HTMLButtonElement\n+\u250a   \u250a 46\u250a    );\n+\u250a   \u250a 47\u250a\n+\u250a   \u250a 48\u250a    expect(signUpButton.disabled).toEqual(true);\n+\u250a   \u250a 49\u250a\n+\u250a   \u250a 50\u250a    act(() => {\n+\u250a   \u250a 51\u250a      fireEvent.change(nameInput, { target: { value: 'User Name' } });\n+\u250a   \u250a 52\u250a      fireEvent.change(usernameInput, { target: { value: 'username' } });\n+\u250a   \u250a 53\u250a      fireEvent.change(passwordInput, { target: { value: 'password' } });\n+\u250a   \u250a 54\u250a      fireEvent.change(passwordConfirmInput, { target: { value: 'password' } });\n+\u250a   \u250a 55\u250a    });\n+\u250a   \u250a 56\u250a\n+\u250a   \u250a 57\u250a    await waitFor(() => expect(nameInput.value).toEqual('User Name'));\n+\u250a   \u250a 58\u250a\n+\u250a   \u250a 59\u250a    await waitFor(() => expect(usernameInput.value).toEqual('username'));\n+\u250a   \u250a 60\u250a\n+\u250a   \u250a 61\u250a    await waitFor(() => expect(passwordInput.value).toEqual('password'));\n+\u250a   \u250a 62\u250a\n+\u250a   \u250a 63\u250a    await waitFor(() => expect(passwordConfirmInput.value).toEqual('password'));\n+\u250a   \u250a 64\u250a\n+\u250a   \u250a 65\u250a    await waitFor(() => expect(signUpButton.disabled).toEqual(false));\n+\u250a   \u250a 66\u250a  });\n+\u250a   \u250a 67\u250a\n+\u250a   \u250a 68\u250a  it('prints server error if input was wrong', async () => {\n+\u250a   \u250a 69\u250a    const history = createMemoryHistory();\n+\u250a   \u250a 70\u250a\n+\u250a   \u250a 71\u250a    const client = mockApolloClient([\n+\u250a   \u250a 72\u250a      {\n+\u250a   \u250a 73\u250a        request: {\n+\u250a   \u250a 74\u250a          query: SignUpDocument,\n+\u250a   \u250a 75\u250a          variables: {\n+\u250a   \u250a 76\u250a            name: 'User Name',\n+\u250a   \u250a 77\u250a            username: 'username',\n+\u250a   \u250a 78\u250a            password: 'password',\n+\u250a   \u250a 79\u250a            passwordConfirm: 'password',\n+\u250a   \u250a 80\u250a          },\n+\u250a   \u250a 81\u250a        },\n+\u250a   \u250a 82\u250a        get result() {\n+\u250a   \u250a 83\u250a          throw Error('sign-up failed');\n+\u250a   \u250a 84\u250a        },\n+\u250a   \u250a 85\u250a      },\n+\u250a   \u250a 86\u250a    ]);\n+\u250a   \u250a 87\u250a\n+\u250a   \u250a 88\u250a    let getByTestId: any = null;\n+\u250a   \u250a 89\u250a\n+\u250a   \u250a 90\u250a    act(() => {\n+\u250a   \u250a 91\u250a      getByTestId = render(\n+\u250a   \u250a 92\u250a        <ApolloProvider client={client}>\n+\u250a   \u250a 93\u250a          <SignUpForm history={history} />\n+\u250a   \u250a 94\u250a        </ApolloProvider>\n+\u250a   \u250a 95\u250a      ).getByTestId;\n+\u250a   \u250a 96\u250a    });\n+\u250a   \u250a 97\u250a\n+\u250a   \u250a 98\u250a    const nameInput = await waitFor(() =>\n+\u250a   \u250a 99\u250a      getByTestId('name-input').querySelector('input')\n+\u250a   \u250a100\u250a    );\n+\u250a   \u250a101\u250a    const usernameInput = await waitFor(() =>\n+\u250a   \u250a102\u250a      getByTestId('username-input').querySelector('input')\n+\u250a   \u250a103\u250a    );\n+\u250a   \u250a104\u250a    const passwordInput = await waitFor(() =>\n+\u250a   \u250a105\u250a      getByTestId('password-input').querySelector('input')\n+\u250a   \u250a106\u250a    );\n+\u250a   \u250a107\u250a    const passwordConfirmInput = await waitFor(() =>\n+\u250a   \u250a108\u250a      getByTestId('password-confirm-input').querySelector('input')\n+\u250a   \u250a109\u250a    );\n+\u250a   \u250a110\u250a    const signUpButton = await waitFor(\n+\u250a   \u250a111\u250a      () => getByTestId('sign-up-button') as HTMLButtonElement\n+\u250a   \u250a112\u250a    );\n+\u250a   \u250a113\u250a\n+\u250a   \u250a114\u250a    act(() => {\n+\u250a   \u250a115\u250a      fireEvent.change(nameInput, { target: { value: 'User Name' } });\n+\u250a   \u250a116\u250a      fireEvent.change(usernameInput, { target: { value: 'username' } });\n+\u250a   \u250a117\u250a      fireEvent.change(passwordInput, { target: { value: 'password' } });\n+\u250a   \u250a118\u250a      fireEvent.change(passwordConfirmInput, { target: { value: 'password' } });\n+\u250a   \u250a119\u250a    });\n+\u250a   \u250a120\u250a\n+\u250a   \u250a121\u250a    await waitFor(() => expect(nameInput.value).toEqual('User Name'));\n+\u250a   \u250a122\u250a\n+\u250a   \u250a123\u250a    await waitFor(() => expect(usernameInput.value).toEqual('username'));\n+\u250a   \u250a124\u250a\n+\u250a   \u250a125\u250a    await waitFor(() => expect(passwordInput.value).toEqual('password'));\n+\u250a   \u250a126\u250a\n+\u250a   \u250a127\u250a    await waitFor(() => expect(passwordConfirmInput.value).toEqual('password'));\n+\u250a   \u250a128\u250a\n+\u250a   \u250a129\u250a    act(() => {\n+\u250a   \u250a130\u250a      fireEvent.click(signUpButton);\n+\u250a   \u250a131\u250a    });\n+\u250a   \u250a132\u250a\n+\u250a   \u250a133\u250a    const errorMessage = await waitFor(() => getByTestId('error-message'));\n+\u250a   \u250a134\u250a\n+\u250a   \u250a135\u250a    await waitFor(() =>\n+\u250a   \u250a136\u250a      expect(errorMessage.innerHTML).toContain('sign-up failed')\n+\u250a   \u250a137\u250a    );\n+\u250a   \u250a138\u250a  });\n+\u250a   \u250a139\u250a\n+\u250a   \u250a140\u250a  it('navigates to /sign-in if everything went right', async () => {\n+\u250a   \u250a141\u250a    const history = createMemoryHistory();\n+\u250a   \u250a142\u250a\n+\u250a   \u250a143\u250a    const client = mockApolloClient([\n+\u250a   \u250a144\u250a      {\n+\u250a   \u250a145\u250a        request: {\n+\u250a   \u250a146\u250a          query: SignUpDocument,\n+\u250a   \u250a147\u250a          variables: {\n+\u250a   \u250a148\u250a            name: 'User Name',\n+\u250a   \u250a149\u250a            username: 'username',\n+\u250a   \u250a150\u250a            password: 'password',\n+\u250a   \u250a151\u250a            passwordConfirm: 'password',\n+\u250a   \u250a152\u250a          },\n+\u250a   \u250a153\u250a        },\n+\u250a   \u250a154\u250a        result: { data: {} },\n+\u250a   \u250a155\u250a      },\n+\u250a   \u250a156\u250a    ]);\n+\u250a   \u250a157\u250a\n+\u250a   \u250a158\u250a    let getByTestId: any = null;\n+\u250a   \u250a159\u250a\n+\u250a   \u250a160\u250a    act(() => {\n+\u250a   \u250a161\u250a      getByTestId = render(\n+\u250a   \u250a162\u250a        <ApolloProvider client={client}>\n+\u250a   \u250a163\u250a          <SignUpForm history={history} />\n+\u250a   \u250a164\u250a        </ApolloProvider>\n+\u250a   \u250a165\u250a      ).getByTestId;\n+\u250a   \u250a166\u250a    });\n+\u250a   \u250a167\u250a\n+\u250a   \u250a168\u250a    const nameInput = await waitFor(() =>\n+\u250a   \u250a169\u250a      getByTestId('name-input').querySelector('input')\n+\u250a   \u250a170\u250a    );\n+\u250a   \u250a171\u250a    const usernameInput = await waitFor(() =>\n+\u250a   \u250a172\u250a      getByTestId('username-input').querySelector('input')\n+\u250a   \u250a173\u250a    );\n+\u250a   \u250a174\u250a    const passwordInput = await waitFor(() =>\n+\u250a   \u250a175\u250a      getByTestId('password-input').querySelector('input')\n+\u250a   \u250a176\u250a    );\n+\u250a   \u250a177\u250a    const passwordConfirmInput = await waitFor(() =>\n+\u250a   \u250a178\u250a      getByTestId('password-confirm-input').querySelector('input')\n+\u250a   \u250a179\u250a    );\n+\u250a   \u250a180\u250a    const signUpButton = await waitFor(\n+\u250a   \u250a181\u250a      () => getByTestId('sign-up-button') as HTMLButtonElement\n+\u250a   \u250a182\u250a    );\n+\u250a   \u250a183\u250a\n+\u250a   \u250a184\u250a    act(() => {\n+\u250a   \u250a185\u250a      fireEvent.change(nameInput, { target: { value: 'User Name' } });\n+\u250a   \u250a186\u250a      fireEvent.change(usernameInput, { target: { value: 'username' } });\n+\u250a   \u250a187\u250a      fireEvent.change(passwordInput, { target: { value: 'password' } });\n+\u250a   \u250a188\u250a      fireEvent.change(passwordConfirmInput, { target: { value: 'password' } });\n+\u250a   \u250a189\u250a    });\n+\u250a   \u250a190\u250a\n+\u250a   \u250a191\u250a    await waitFor(() => expect(nameInput.value).toEqual('User Name'));\n+\u250a   \u250a192\u250a\n+\u250a   \u250a193\u250a    await waitFor(() => expect(usernameInput.value).toEqual('username'));\n+\u250a   \u250a194\u250a\n+\u250a   \u250a195\u250a    await waitFor(() => expect(passwordInput.value).toEqual('password'));\n+\u250a   \u250a196\u250a\n+\u250a   \u250a197\u250a    await waitFor(() => expect(passwordConfirmInput.value).toEqual('password'));\n+\u250a   \u250a198\u250a\n+\u250a   \u250a199\u250a    act(() => {\n+\u250a   \u250a200\u250a      fireEvent.click(signUpButton);\n+\u250a   \u250a201\u250a    });\n+\u250a   \u250a202\u250a\n+\u250a   \u250a203\u250a    await waitFor(() => expect(history.location.pathname).toEqual('/sign-in'));\n+\u250a   \u250a204\u250a  });\n+\u250a   \u250a205\u250a});\n")),(0,a.kt)("h5",{id:"added-srccomponentsauthscreensignupformtsx-1"},"Added src","/","components","/","AuthScreen","/","SignUpForm.tsx"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},'@@ -0,0 +1,124 @@\n+\u250a   \u250a  1\u250aimport React from \'react\';\n+\u250a   \u250a  2\u250aimport { useCallback, useState } from \'react\';\n+\u250a   \u250a  3\u250aimport { useSignUp } from \'../../services/auth.service\';\n+\u250a   \u250a  4\u250aimport {\n+\u250a   \u250a  5\u250a  SignForm,\n+\u250a   \u250a  6\u250a  ActualForm,\n+\u250a   \u250a  7\u250a  Legend,\n+\u250a   \u250a  8\u250a  Section,\n+\u250a   \u250a  9\u250a  TextField,\n+\u250a   \u250a 10\u250a  Button,\n+\u250a   \u250a 11\u250a  ErrorMessage,\n+\u250a   \u250a 12\u250a} from \'./form-components\';\n+\u250a   \u250a 13\u250aimport { RouteComponentProps } from \'react-router-dom\';\n+\u250a   \u250a 14\u250a\n+\u250a   \u250a 15\u250aconst SignUpForm: React.FC<RouteComponentProps<any>> = ({ history }) => {\n+\u250a   \u250a 16\u250a  const [name, setName] = useState(\'\');\n+\u250a   \u250a 17\u250a  const [username, setUsername] = useState(\'\');\n+\u250a   \u250a 18\u250a  const [password, setPassword] = useState(\'\');\n+\u250a   \u250a 19\u250a  const [passwordConfirm, setPasswordConfirm] = useState(\'\');\n+\u250a   \u250a 20\u250a  const [error, setError] = useState(\'\');\n+\u250a   \u250a 21\u250a  const [signUp] = useSignUp();\n+\u250a   \u250a 22\u250a\n+\u250a   \u250a 23\u250a  const updateName = useCallback(({ target }) => {\n+\u250a   \u250a 24\u250a    setError(\'\');\n+\u250a   \u250a 25\u250a    setName(target.value);\n+\u250a   \u250a 26\u250a  }, []);\n+\u250a   \u250a 27\u250a\n+\u250a   \u250a 28\u250a  const updateUsername = useCallback(({ target }) => {\n+\u250a   \u250a 29\u250a    setError(\'\');\n+\u250a   \u250a 30\u250a    setUsername(target.value);\n+\u250a   \u250a 31\u250a  }, []);\n+\u250a   \u250a 32\u250a\n+\u250a   \u250a 33\u250a  const updatePassword = useCallback(({ target }) => {\n+\u250a   \u250a 34\u250a    setError(\'\');\n+\u250a   \u250a 35\u250a    setPassword(target.value);\n+\u250a   \u250a 36\u250a  }, []);\n+\u250a   \u250a 37\u250a\n+\u250a   \u250a 38\u250a  const updatePasswordConfirm = useCallback(({ target }) => {\n+\u250a   \u250a 39\u250a    setError(\'\');\n+\u250a   \u250a 40\u250a    setPasswordConfirm(target.value);\n+\u250a   \u250a 41\u250a  }, []);\n+\u250a   \u250a 42\u250a\n+\u250a   \u250a 43\u250a  const maySignUp = useCallback(() => {\n+\u250a   \u250a 44\u250a    return !!(name && username && password && password === passwordConfirm);\n+\u250a   \u250a 45\u250a  }, [name, username, password, passwordConfirm]);\n+\u250a   \u250a 46\u250a\n+\u250a   \u250a 47\u250a  const handleSignUp = useCallback(() => {\n+\u250a   \u250a 48\u250a    signUp({ variables: { username, password, passwordConfirm, name } })\n+\u250a   \u250a 49\u250a      .then(() => {\n+\u250a   \u250a 50\u250a        history.replace(\'/sign-in\');\n+\u250a   \u250a 51\u250a      })\n+\u250a   \u250a 52\u250a      .catch((error) => {\n+\u250a   \u250a 53\u250a        setError(error.message || error);\n+\u250a   \u250a 54\u250a      });\n+\u250a   \u250a 55\u250a  }, [name, username, password, passwordConfirm, history, signUp]);\n+\u250a   \u250a 56\u250a\n+\u250a   \u250a 57\u250a  return (\n+\u250a   \u250a 58\u250a    <SignForm>\n+\u250a   \u250a 59\u250a      <ActualForm>\n+\u250a   \u250a 60\u250a        <Legend>Sign up</Legend>\n+\u250a   \u250a 61\u250a        <Section\n+\u250a   \u250a 62\u250a          style={{\n+\u250a   \u250a 63\u250a            float: \'left\',\n+\u250a   \u250a 64\u250a            width: \'calc(50% - 10px)\',\n+\u250a   \u250a 65\u250a            paddingRight: \'10px\',\n+\u250a   \u250a 66\u250a          }}>\n+\u250a   \u250a 67\u250a          <TextField\n+\u250a   \u250a 68\u250a            data-testid="name-input"\n+\u250a   \u250a 69\u250a            label="Name"\n+\u250a   \u250a 70\u250a            value={name}\n+\u250a   \u250a 71\u250a            onChange={updateName}\n+\u250a   \u250a 72\u250a            autoComplete="off"\n+\u250a   \u250a 73\u250a            margin="normal"\n+\u250a   \u250a 74\u250a          />\n+\u250a   \u250a 75\u250a          <TextField\n+\u250a   \u250a 76\u250a            data-testid="username-input"\n+\u250a   \u250a 77\u250a            label="Username"\n+\u250a   \u250a 78\u250a            value={username}\n+\u250a   \u250a 79\u250a            onChange={updateUsername}\n+\u250a   \u250a 80\u250a            autoComplete="off"\n+\u250a   \u250a 81\u250a            margin="normal"\n+\u250a   \u250a 82\u250a          />\n+\u250a   \u250a 83\u250a        </Section>\n+\u250a   \u250a 84\u250a        <Section\n+\u250a   \u250a 85\u250a          style={{\n+\u250a   \u250a 86\u250a            float: \'right\',\n+\u250a   \u250a 87\u250a            width: \'calc(50% - 10px)\',\n+\u250a   \u250a 88\u250a            paddingLeft: \'10px\',\n+\u250a   \u250a 89\u250a          }}>\n+\u250a   \u250a 90\u250a          <TextField\n+\u250a   \u250a 91\u250a            data-testid="password-input"\n+\u250a   \u250a 92\u250a            label="Password"\n+\u250a   \u250a 93\u250a            type="password"\n+\u250a   \u250a 94\u250a            value={password}\n+\u250a   \u250a 95\u250a            onChange={updatePassword}\n+\u250a   \u250a 96\u250a            autoComplete="off"\n+\u250a   \u250a 97\u250a            margin="normal"\n+\u250a   \u250a 98\u250a          />\n+\u250a   \u250a 99\u250a          <TextField\n+\u250a   \u250a100\u250a            data-testid="password-confirm-input"\n+\u250a   \u250a101\u250a            label="Confirm password"\n+\u250a   \u250a102\u250a            type="password"\n+\u250a   \u250a103\u250a            value={passwordConfirm}\n+\u250a   \u250a104\u250a            onChange={updatePasswordConfirm}\n+\u250a   \u250a105\u250a            autoComplete="off"\n+\u250a   \u250a106\u250a            margin="normal"\n+\u250a   \u250a107\u250a          />\n+\u250a   \u250a108\u250a        </Section>\n+\u250a   \u250a109\u250a        <Button\n+\u250a   \u250a110\u250a          data-testid="sign-up-button"\n+\u250a   \u250a111\u250a          type="button"\n+\u250a   \u250a112\u250a          color="secondary"\n+\u250a   \u250a113\u250a          variant="contained"\n+\u250a   \u250a114\u250a          disabled={!maySignUp()}\n+\u250a   \u250a115\u250a          onClick={handleSignUp}>\n+\u250a   \u250a116\u250a          Sign up\n+\u250a   \u250a117\u250a        </Button>\n+\u250a   \u250a118\u250a        <ErrorMessage data-testid="error-message">{error}</ErrorMessage>\n+\u250a   \u250a119\u250a      </ActualForm>\n+\u250a   \u250a120\u250a    </SignForm>\n+\u250a   \u250a121\u250a  );\n+\u250a   \u250a122\u250a};\n+\u250a   \u250a123\u250a\n+\u250a   \u250a124\u250aexport default SignUpForm;\n')),(0,a.kt)("h5",{id:"added-srccomponentsauthscreenform-componentsts-1"},"Added src","/","components","/","AuthScreen","/","form-components.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,75 @@\n+\u250a  \u250a 1\u250aimport MaterialButton from '@material-ui/core/Button';\n+\u250a  \u250a 2\u250aimport MaterialTextField from '@material-ui/core/TextField';\n+\u250a  \u250a 3\u250aimport styled from 'styled-components';\n+\u250a  \u250a 4\u250a\n+\u250a  \u250a 5\u250aexport const SignForm = styled.div`\n+\u250a  \u250a 6\u250a  height: calc(100% - 265px);\n+\u250a  \u250a 7\u250a`;\n+\u250a  \u250a 8\u250a\n+\u250a  \u250a 9\u250aexport const ActualForm = styled.form`\n+\u250a  \u250a10\u250a  padding: 20px;\n+\u250a  \u250a11\u250a`;\n+\u250a  \u250a12\u250a\n+\u250a  \u250a13\u250aexport const Section = styled.div`\n+\u250a  \u250a14\u250a  padding-bottom: 35px;\n+\u250a  \u250a15\u250a`;\n+\u250a  \u250a16\u250a\n+\u250a  \u250a17\u250aexport const Legend = styled.legend`\n+\u250a  \u250a18\u250a  font-weight: bold;\n+\u250a  \u250a19\u250a  color: white;\n+\u250a  \u250a20\u250a`;\n+\u250a  \u250a21\u250a\n+\u250a  \u250a22\u250aexport const Label = styled.label`\n+\u250a  \u250a23\u250a  color: white !important;\n+\u250a  \u250a24\u250a`;\n+\u250a  \u250a25\u250a\n+\u250a  \u250a26\u250aexport const Input = styled.input`\n+\u250a  \u250a27\u250a  color: white;\n+\u250a  \u250a28\u250a\n+\u250a  \u250a29\u250a  &::placeholder {\n+\u250a  \u250a30\u250a    color: var(--primary-bg);\n+\u250a  \u250a31\u250a  }\n+\u250a  \u250a32\u250a`;\n+\u250a  \u250a33\u250a\n+\u250a  \u250a34\u250aexport const TextField = styled(MaterialTextField)`\n+\u250a  \u250a35\u250a  width: 100%;\n+\u250a  \u250a36\u250a  position: relative;\n+\u250a  \u250a37\u250a\n+\u250a  \u250a38\u250a  > div::before {\n+\u250a  \u250a39\u250a    border-color: white !important;\n+\u250a  \u250a40\u250a  }\n+\u250a  \u250a41\u250a\n+\u250a  \u250a42\u250a  input {\n+\u250a  \u250a43\u250a    color: white !important;\n+\u250a  \u250a44\u250a\n+\u250a  \u250a45\u250a    &::placeholder {\n+\u250a  \u250a46\u250a      color: var(--primary-bg) !important;\n+\u250a  \u250a47\u250a    }\n+\u250a  \u250a48\u250a  }\n+\u250a  \u250a49\u250a\n+\u250a  \u250a50\u250a  label {\n+\u250a  \u250a51\u250a    color: white !important;\n+\u250a  \u250a52\u250a  }\n+\u250a  \u250a53\u250a`;\n+\u250a  \u250a54\u250a\n+\u250a  \u250a55\u250aexport const Button = styled(MaterialButton)`\n+\u250a  \u250a56\u250a  width: 100px;\n+\u250a  \u250a57\u250a  display: block !important;\n+\u250a  \u250a58\u250a  margin: auto !important;\n+\u250a  \u250a59\u250a  background-color: var(--secondary-bg) !important;\n+\u250a  \u250a60\u250a\n+\u250a  \u250a61\u250a  &[disabled] {\n+\u250a  \u250a62\u250a    color: #38a81c;\n+\u250a  \u250a63\u250a  }\n+\u250a  \u250a64\u250a\n+\u250a  \u250a65\u250a  &:not([disabled]) {\n+\u250a  \u250a66\u250a    color: white;\n+\u250a  \u250a67\u250a  }\n+\u250a  \u250a68\u250a`;\n+\u250a  \u250a69\u250a\n+\u250a  \u250a70\u250aexport const ErrorMessage = styled.div`\n+\u250a  \u250a71\u250a  position: fixed;\n+\u250a  \u250a72\u250a  color: red;\n+\u250a  \u250a73\u250a  font-size: 15px;\n+\u250a  \u250a74\u250a  margin-top: 20px;\n+\u250a  \u250a75\u250a`;\n")),(0,a.kt)("h5",{id:"changed-srccomponentsauthscreenindextsx-2"},"Changed src","/","components","/","AuthScreen","/","index.tsx"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,13 +1,13 @@\n-\u250a 1\u250a  \u250aimport MaterialButton from '@material-ui/core/Button';\n-\u250a 2\u250a  \u250aimport MaterialTextField from '@material-ui/core/TextField';\n \u250a 3\u250a 1\u250aimport React from 'react';\n-\u250a 4\u250a  \u250aimport { useCallback, useState } from 'react';\n+\u250a  \u250a 2\u250aimport { useMemo } from 'react';\n+\u250a  \u250a 3\u250aimport { Route } from 'react-router-dom';\n \u250a 5\u250a 4\u250aimport styled from 'styled-components';\n-\u250a 6\u250a  \u250aimport { useSignIn } from '../../services/auth.service';\n+\u250a  \u250a 5\u250aimport AnimatedSwitch from '../AnimatedSwitch';\n+\u250a  \u250a 6\u250aimport SignInForm from './SignInForm';\n+\u250a  \u250a 7\u250aimport SignUpForm from './SignUpForm';\n \u250a 7\u250a 8\u250aimport { RouteComponentProps } from 'react-router-dom';\n \u250a 8\u250a 9\u250a\n \u250a 9\u250a10\u250aconst Container = styled.div`\n-\u250a10\u250a  \u250a  height: 100%;\n \u250a11\u250a11\u250a  background: radial-gradient(rgb(34, 65, 67), rgb(17, 48, 50)),\n \u250a12\u250a12\u250a    url(/assets/chat-background.jpg) no-repeat;\n \u250a13\u250a13\u250a  background-size: cover;\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},'@@ -40,149 +40,51 @@\n \u250a 40\u250a 40\u250a  bottom: 10px;\n \u250a 41\u250a 41\u250a  left: 10px;\n \u250a 42\u250a 42\u250a\n-\u250a 43\u250a   \u250a  a {\n+\u250a   \u250a 43\u250a  label {\n \u250a 44\u250a 44\u250a    color: var(--secondary-bg);\n \u250a 45\u250a 45\u250a  }\n \u250a 46\u250a 46\u250a`;\n \u250a 47\u250a 47\u250a\n-\u250a 48\u250a   \u250aconst SignInForm = styled.div`\n-\u250a 49\u250a   \u250a  height: calc(100% - 265px);\n-\u250a 50\u250a   \u250a`;\n-\u250a 51\u250a   \u250a\n-\u250a 52\u250a   \u250aconst ActualForm = styled.form`\n-\u250a 53\u250a   \u250a  padding: 20px;\n-\u250a 54\u250a   \u250a`;\n-\u250a 55\u250a   \u250a\n-\u250a 56\u250a   \u250aconst Section = styled.div`\n-\u250a 57\u250a   \u250a  width: 100%;\n-\u250a 58\u250a   \u250a  padding-bottom: 35px;\n-\u250a 59\u250a   \u250a`;\n-\u250a 60\u250a   \u250a\n-\u250a 61\u250a   \u250aconst Legend = styled.legend`\n-\u250a 62\u250a   \u250a  font-weight: bold;\n-\u250a 63\u250a   \u250a  color: white;\n-\u250a 64\u250a   \u250a`;\n-\u250a 65\u250a   \u250a\n-\u250a 66\u250a   \u250a// eslint-disable-next-line\n-\u250a 67\u250a   \u250aconst Label = styled.label`\n-\u250a 68\u250a   \u250a  color: white !important;\n-\u250a 69\u250a   \u250a`;\n-\u250a 70\u250a   \u250a\n-\u250a 71\u250a   \u250a// eslint-disable-next-line\n-\u250a 72\u250a   \u250aconst Input = styled.input`\n-\u250a 73\u250a   \u250a  color: white;\n-\u250a 74\u250a   \u250a\n-\u250a 75\u250a   \u250a  &::placeholder {\n-\u250a 76\u250a   \u250a    color: var(--primary-bg);\n-\u250a 77\u250a   \u250a  }\n-\u250a 78\u250a   \u250a`;\n-\u250a 79\u250a   \u250a\n-\u250a 80\u250a   \u250aconst TextField = styled(MaterialTextField)`\n-\u250a 81\u250a   \u250a  width: 100%;\n-\u250a 82\u250a   \u250a  position: relative;\n-\u250a 83\u250a   \u250a\n-\u250a 84\u250a   \u250a  > div::before {\n-\u250a 85\u250a   \u250a    border-color: white !important;\n-\u250a 86\u250a   \u250a  }\n-\u250a 87\u250a   \u250a\n-\u250a 88\u250a   \u250a  input {\n-\u250a 89\u250a   \u250a    color: white !important;\n-\u250a 90\u250a   \u250a\n-\u250a 91\u250a   \u250a    &::placeholder {\n-\u250a 92\u250a   \u250a      color: var(--primary-bg) !important;\n+\u250a   \u250a 48\u250aconst AuthScreen: React.FC<RouteComponentProps<any>> = ({\n+\u250a   \u250a 49\u250a  history,\n+\u250a   \u250a 50\u250a  location,\n+\u250a   \u250a 51\u250a}) => {\n+\u250a   \u250a 52\u250a  const alternative = useMemo(() => {\n+\u250a   \u250a 53\u250a    if (location.pathname === \'/sign-in\') {\n+\u250a   \u250a 54\u250a      const handleSignUp = () => {\n+\u250a   \u250a 55\u250a        history.replace(\'/sign-up\');\n+\u250a   \u250a 56\u250a      };\n+\u250a   \u250a 57\u250a\n+\u250a   \u250a 58\u250a      return (\n+\u250a   \u250a 59\u250a        <Alternative>\n+\u250a   \u250a 60\u250a          Don\'t have an account yet?{\' \'}\n+\u250a   \u250a 61\u250a          <label onClick={handleSignUp}>Sign up!</label>\n+\u250a   \u250a 62\u250a        </Alternative>\n+\u250a   \u250a 63\u250a      );\n+\u250a   \u250a 64\u250a    } else {\n+\u250a   \u250a 65\u250a      const handleSignIn = () => {\n+\u250a   \u250a 66\u250a        history.replace(\'/sign-in\');\n+\u250a   \u250a 67\u250a      };\n+\u250a   \u250a 68\u250a\n+\u250a   \u250a 69\u250a      return (\n+\u250a   \u250a 70\u250a        <Alternative>\n+\u250a   \u250a 71\u250a          Already have an accout? <label onClick={handleSignIn}>Sign in!</label>\n+\u250a   \u250a 72\u250a        </Alternative>\n+\u250a   \u250a 73\u250a      );\n \u250a 93\u250a 74\u250a    }\n-\u250a 94\u250a   \u250a  }\n-\u250a 95\u250a   \u250a\n-\u250a 96\u250a   \u250a  label {\n-\u250a 97\u250a   \u250a    color: white !important;\n-\u250a 98\u250a   \u250a  }\n-\u250a 99\u250a   \u250a`;\n-\u250a100\u250a   \u250a\n-\u250a101\u250a   \u250aconst Button = styled(MaterialButton)`\n-\u250a102\u250a   \u250a  width: 100px;\n-\u250a103\u250a   \u250a  display: block !important;\n-\u250a104\u250a   \u250a  margin: auto !important;\n-\u250a105\u250a   \u250a  background-color: var(--secondary-bg) !important;\n-\u250a106\u250a   \u250a\n-\u250a107\u250a   \u250a  &[disabled] {\n-\u250a108\u250a   \u250a    color: #38a81c;\n-\u250a109\u250a   \u250a  }\n-\u250a110\u250a   \u250a\n-\u250a111\u250a   \u250a  &:not([disabled]) {\n-\u250a112\u250a   \u250a    color: white;\n-\u250a113\u250a   \u250a  }\n-\u250a114\u250a   \u250a`;\n-\u250a115\u250a   \u250a\n-\u250a116\u250a   \u250aconst AuthScreen: React.FC<RouteComponentProps<any>> = ({ history }) => {\n-\u250a117\u250a   \u250a  const [username, setUsername] = useState(\'\');\n-\u250a118\u250a   \u250a  const [password, setPassword] = useState(\'\');\n-\u250a119\u250a   \u250a  // eslint-disable-next-line\n-\u250a120\u250a   \u250a  const [error, setError] = useState(\'\');\n-\u250a121\u250a   \u250a  const [signIn] = useSignIn();\n-\u250a122\u250a   \u250a\n-\u250a123\u250a   \u250a  const onUsernameChange = useCallback(({ target }) => {\n-\u250a124\u250a   \u250a    setError(\'\');\n-\u250a125\u250a   \u250a    setUsername(target.value);\n-\u250a126\u250a   \u250a  }, []);\n-\u250a127\u250a   \u250a\n-\u250a128\u250a   \u250a  const onPasswordChange = useCallback(({ target }) => {\n-\u250a129\u250a   \u250a    setError(\'\');\n-\u250a130\u250a   \u250a    setPassword(target.value);\n-\u250a131\u250a   \u250a  }, []);\n-\u250a132\u250a   \u250a\n-\u250a133\u250a   \u250a  const maySignIn = useCallback(() => {\n-\u250a134\u250a   \u250a    return !!(username && password);\n-\u250a135\u250a   \u250a  }, [username, password]);\n-\u250a136\u250a   \u250a\n-\u250a137\u250a   \u250a  const handleSignIn = useCallback(() => {\n-\u250a138\u250a   \u250a    signIn({ variables: { username, password } })\n-\u250a139\u250a   \u250a      .then(() => {\n-\u250a140\u250a   \u250a        history.push(\'/chats\');\n-\u250a141\u250a   \u250a      })\n-\u250a142\u250a   \u250a      .catch((error) => {\n-\u250a143\u250a   \u250a        setError(error.message || error);\n-\u250a144\u250a   \u250a      });\n-\u250a145\u250a   \u250a  }, [username, password, history, signIn]);\n+\u250a   \u250a 75\u250a  }, [location.pathname, history]);\n \u250a146\u250a 76\u250a\n \u250a147\u250a 77\u250a  return (\n-\u250a148\u250a   \u250a    <Container>\n-\u250a149\u250a   \u250a      <Intro>\n+\u250a   \u250a 78\u250a    <Container className="AuthScreen Screen">\n+\u250a   \u250a 79\u250a      <Intro className="AuthScreen-intro">\n \u250a150\u250a 80\u250a        <Icon src="assets/whatsapp-icon.png" className="AuthScreen-icon" />\n \u250a151\u250a 81\u250a        <Title className="AuthScreen-title">WhatsApp</Title>\n \u250a152\u250a 82\u250a      </Intro>\n-\u250a153\u250a   \u250a      <SignInForm>\n-\u250a154\u250a   \u250a        <ActualForm>\n-\u250a155\u250a   \u250a          <Legend>Sign in</Legend>\n-\u250a156\u250a   \u250a          <Section>\n-\u250a157\u250a   \u250a            <TextField\n-\u250a158\u250a   \u250a              className="AuthScreen-text-field"\n-\u250a159\u250a   \u250a              label="Username"\n-\u250a160\u250a   \u250a              value={username}\n-\u250a161\u250a   \u250a              onChange={onUsernameChange}\n-\u250a162\u250a   \u250a              margin="normal"\n-\u250a163\u250a   \u250a              placeholder="Enter your username"\n-\u250a164\u250a   \u250a            />\n-\u250a165\u250a   \u250a            <TextField\n-\u250a166\u250a   \u250a              className="AuthScreen-text-field"\n-\u250a167\u250a   \u250a              label="Password"\n-\u250a168\u250a   \u250a              type="password"\n-\u250a169\u250a   \u250a              value={password}\n-\u250a170\u250a   \u250a              onChange={onPasswordChange}\n-\u250a171\u250a   \u250a              margin="normal"\n-\u250a172\u250a   \u250a              placeholder="Enter your password"\n-\u250a173\u250a   \u250a            />\n-\u250a174\u250a   \u250a          </Section>\n-\u250a175\u250a   \u250a          <Button\n-\u250a176\u250a   \u250a            data-testid="sign-in-button"\n-\u250a177\u250a   \u250a            type="button"\n-\u250a178\u250a   \u250a            color="secondary"\n-\u250a179\u250a   \u250a            variant="contained"\n-\u250a180\u250a   \u250a            disabled={!maySignIn()}\n-\u250a181\u250a   \u250a            onClick={handleSignIn}>\n-\u250a182\u250a   \u250a            Sign in\n-\u250a183\u250a   \u250a          </Button>\n-\u250a184\u250a   \u250a        </ActualForm>\n-\u250a185\u250a   \u250a      </SignInForm>\n+\u250a   \u250a 83\u250a      <AnimatedSwitch>\n+\u250a   \u250a 84\u250a        <Route exact path="/sign-in" component={SignInForm} />\n+\u250a   \u250a 85\u250a        <Route exact path="/sign-up" component={SignUpForm} />\n+\u250a   \u250a 86\u250a      </AnimatedSwitch>\n+\u250a   \u250a 87\u250a      {alternative}\n \u250a186\u250a 88\u250a    </Container>\n \u250a187\u250a 89\u250a  );\n \u250a188\u250a 90\u250a};\n')),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Note how we used the ",(0,a.kt)("inlineCode",{parentName:"p"},"/sign-(in|up)")," pattern to define the ",(0,a.kt)("inlineCode",{parentName:"p"},"signUp")," mutation. This is because the request will be further redirected in the ",(0,a.kt)("inlineCode",{parentName:"p"},"AuthScreen"),".")),(0,a.kt)("p",null,"The authentication flow is complete! To test it out, you can create a new user, log in with it and start chatting with other users."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"left"},(0,a.kt)("a",{parentName:"th",href:"https://github.com/Urigo/WhatsApp-Clone-Tutorial/tree/master@next/.tortilla/manuals/views/step12.md"},"< Previous Step")),(0,a.kt)("th",{parentName:"tr",align:"right"},(0,a.kt)("a",{parentName:"th",href:"https://github.com/Urigo/WhatsApp-Clone-Tutorial/tree/master@next/.tortilla/manuals/views/step14.md"},"Next Step >"))))))}d.isMDXComponent=!0}}]);