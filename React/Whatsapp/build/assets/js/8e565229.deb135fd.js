"use strict";(self.webpackChunkovrsea_whatsapp_tuto=self.webpackChunkovrsea_whatsapp_tuto||[]).push([[1802],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=c(n),u=s,m=p["".concat(l,".").concat(u)]||p[u]||h[u]||r;return n?a.createElement(m,o(o({ref:t},d),{},{components:n})):a.createElement(m,o({ref:t},d))}));function u(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,o=new Array(r);o[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:s,o[1]=i;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},3530:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var a=n(7462),s=(n(7294),n(3905));const r={sidebar_label:"Step 17: Performance",sidebar_position:17},o="Step 17: Performance",i={unversionedId:"tuto-whatsapp/step17",id:"version-1.0.0/tuto-whatsapp/step17",title:"Step 17: Performance",description:"[//]: # (head-end)",source:"@site/versioned_docs/version-1.0.0/tuto-whatsapp/step17.md",sourceDirName:"tuto-whatsapp",slug:"/tuto-whatsapp/step17",permalink:"/docs/1.0.0/tuto-whatsapp/step17",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/versioned_docs/version-1.0.0/tuto-whatsapp/step17.md",tags:[],version:"1.0.0",sidebarPosition:17,frontMatter:{sidebar_label:"Step 17: Performance",sidebar_position:17},sidebar:"tutorialSidebar",previous:{title:"Step 16: Modularity",permalink:"/docs/1.0.0/tuto-whatsapp/step16"}},l={},c=[{value:"API Performance",id:"api-performance",level:2},{value:"Finding bottlenecks",id:"finding-bottlenecks",level:3},{value:"<strong>Server</strong> Step 14.1: Deduplicate SQL queries",id:"server-step-141-deduplicate-sql-queries",level:4},{value:"Changed modules/common/database.provider.ts",id:"changed-modulescommondatabaseproviderts",level:5},{value:"<strong>Server</strong> Step 14.1: Deduplicate SQL queries",id:"server-step-141-deduplicate-sql-queries-1",level:4},{value:"Changed modules/chats/chats.provider.ts",id:"changed-moduleschatschatsproviderts",level:5},{value:"Changed modules/users/users.provider.ts",id:"changed-modulesusersusersproviderts",level:5},{value:"<strong>Server</strong> Step 14.2: Cache current user object",id:"server-step-142-cache-current-user-object",level:4},{value:"Changed modules/users/auth.provider.ts",id:"changed-modulesusersauthproviderts",level:5},{value:"<strong>Server</strong> Step 14.3: Separate db query from public API",id:"server-step-143-separate-db-query-from-public-api",level:4},{value:"Changed modules/chats/chats.provider.ts",id:"changed-moduleschatschatsproviderts-1",level:5},{value:"<strong>Server</strong> Step 14.4: Separate findChatByUser",id:"server-step-144-separate-findchatbyuser",level:4},{value:"Changed modules/chats/chats.provider.ts",id:"changed-moduleschatschatsproviderts-2",level:5},{value:"<strong>Server</strong> Step 14.5: Separate findChatById",id:"server-step-145-separate-findchatbyid",level:4},{value:"Changed modules/chats/chats.provider.ts",id:"changed-moduleschatschatsproviderts-3",level:5},{value:"<strong>Server</strong> Step 14.6: Use Dataloader in Chats",id:"server-step-146-use-dataloader-in-chats",level:4},{value:"Changed modules/chats/chats.provider.ts",id:"changed-moduleschatschatsproviderts-4",level:5},{value:"Changed package.json",id:"changed-packagejson",level:5},{value:"<strong>Server</strong> Step 14.7: Implement caching for Chats",id:"server-step-147-implement-caching-for-chats",level:4},{value:"Changed modules/chats/chats.provider.ts",id:"changed-moduleschatschatsproviderts-5",level:5},{value:"<strong>Server</strong> Step 14.8: Write chats to the cache",id:"server-step-148-write-chats-to-the-cache",level:4},{value:"Changed modules/chats/chats.provider.ts",id:"changed-moduleschatschatsproviderts-6",level:5},{value:"Preventing issues",id:"preventing-issues",level:3},{value:"UI Performance",id:"ui-performance",level:2},{value:"Metrics",id:"metrics",level:3},{value:"Rendering improvements",id:"rendering-improvements",level:3},{value:"Server-Side Rendering",id:"server-side-rendering",level:4},{value:"Store Rehydration",id:"store-rehydration",level:4},{value:"Service Worker",id:"service-worker",level:4},{value:"Tooling",id:"tooling",level:3},{value:"Making the app feels instant",id:"making-the-app-feels-instant",level:2},{value:"Optimistic UI",id:"optimistic-ui",level:3},{value:"Prefetching data",id:"prefetching-data",level:3},{value:"<strong>Client</strong> Step 15.1: Implement prefetching",id:"client-step-151-implement-prefetching",level:4},{value:"Changed src/components/ChatRoomScreen/index.tsx",id:"changed-srccomponentschatroomscreenindextsx",level:5},{value:"<strong>Client</strong> Step 15.1: Implement prefetching",id:"client-step-151-implement-prefetching-1",level:4},{value:"Changed src/components/ChatsListScreen/ChatsList.tsx",id:"changed-srccomponentschatslistscreenchatslisttsx",level:5},{value:"<strong>Client</strong> Step 15.1: Implement prefetching",id:"client-step-151-implement-prefetching-2",level:4},{value:"Changed src/components/ChatsListScreen/AddChatButton.tsx",id:"changed-srccomponentschatslistscreenaddchatbuttontsx",level:5},{value:"<strong>Client</strong> Step 15.1: Implement prefetching",id:"client-step-151-implement-prefetching-3",level:4},{value:"Changed src/components/ChatsListScreen/ChatsList.tsx",id:"changed-srccomponentschatslistscreenchatslisttsx-1",level:5},{value:"Splitting and Deferring Queries",id:"splitting-and-deferring-queries",level:3},{value:"Dealing with rendering issues",id:"dealing-with-rendering-issues",level:3},{value:"<strong>Server</strong> Step 14.9: Add fake data",id:"server-step-149-add-fake-data",level:4},{value:"Changed db.ts",id:"changed-dbts",level:5},{value:"Changed env.ts",id:"changed-envts",level:5},{value:"Changed modules/chats/chats.provider.ts",id:"changed-moduleschatschatsproviderts-7",level:5},{value:"Changed modules/common/database.provider.ts",id:"changed-modulescommondatabaseproviderts-1",level:5},{value:"Changed package.json",id:"changed-packagejson-1",level:5},{value:"Pagination",id:"pagination",level:3},{value:"<strong>Server</strong> Step 14.10: Prepare schema for cursor-based pagination",id:"server-step-1410-prepare-schema-for-cursor-based-pagination",level:4},{value:"Changed modules/chats/index.ts",id:"changed-moduleschatsindexts",level:5},{value:"<strong>Server</strong> Step 14.11: Implement cursor-based pagination in messages",id:"server-step-1411-implement-cursor-based-pagination-in-messages",level:4},{value:"Changed modules/chats/chats.provider.ts",id:"changed-moduleschatschatsproviderts-8",level:5},{value:"Changed modules/chats/index.ts",id:"changed-moduleschatsindexts-1",level:5},{value:"Apply schema changes",id:"apply-schema-changes",level:3},{value:"<strong>Client</strong> Step 15.6: Apply MessagesResult type",id:"client-step-156-apply-messagesresult-type",level:4},{value:"Changed src/components/ChatRoomScreen/index.tsx",id:"changed-srccomponentschatroomscreenindextsx-1",level:5},{value:"Changed src/graphql/fragments/fullChat.fragment.ts",id:"changed-srcgraphqlfragmentsfullchatfragmentts",level:5},{value:"Added src/graphql/fragments/messagesResult.fragment.ts",id:"added-srcgraphqlfragmentsmessagesresultfragmentts",level:5},{value:"Changed src/services/cache.service.ts",id:"changed-srcservicescacheservicets",level:5},{value:"Infinite Scrolling",id:"infinite-scrolling",level:3},{value:"<strong>Client</strong> Step 15.2: Basics for infinite scroll",id:"client-step-152-basics-for-infinite-scroll",level:4},{value:"Added src/hooks/use-infinite-scroll.ts",id:"added-srchooksuse-infinite-scrollts",level:5},{value:"<strong>Client</strong> Step 15.3: Prevent calling back once fetching is in progress",id:"client-step-153-prevent-calling-back-once-fetching-is-in-progress",level:4},{value:"Changed src/hooks/use-infinite-scroll.ts",id:"changed-srchooksuse-infinite-scrollts",level:5},{value:"<strong>Client</strong> Step 15.4: Allow to notify when finished",id:"client-step-154-allow-to-notify-when-finished",level:4},{value:"Changed src/hooks/use-infinite-scroll.ts",id:"changed-srchooksuse-infinite-scrollts-1",level:5},{value:"<strong>Client</strong> Step 15.5: Fetch only if there is more data",id:"client-step-155-fetch-only-if-there-is-more-data",level:4},{value:"Changed src/hooks/use-infinite-scroll.ts",id:"changed-srchooksuse-infinite-scrollts-2",level:5},{value:"Pagination",id:"pagination-1",level:3},{value:"<strong>Client</strong> Step 15.7: Implement pagination with context and hooks",id:"client-step-157-implement-pagination-with-context-and-hooks",level:4},{value:"Changed src/components/ChatRoomScreen/index.tsx",id:"changed-srccomponentschatroomscreenindextsx-2",level:5},{value:"<strong>Client</strong> Step 15.8: Use pagination limit and after props",id:"client-step-158-use-pagination-limit-and-after-props",level:4},{value:"Changed src/components/ChatRoomScreen/index.tsx",id:"changed-srccomponentschatroomscreenindextsx-3",level:5},{value:"<strong>Client</strong> Step 15.9: Use ChatPaginationProvider",id:"client-step-159-use-chatpaginationprovider",level:4},{value:"Changed src/components/ChatRoomScreen/index.tsx",id:"changed-srccomponentschatroomscreenindextsx-4",level:5},{value:"Fetching more messages",id:"fetching-more-messages",level:3},{value:"<strong>Client</strong> Step 15.10: Make use of infinite scroll in MessagesList component",id:"client-step-1510-make-use-of-infinite-scroll-in-messageslist-component",level:4},{value:"Changed src/components/ChatRoomScreen/MessagesList.tsx",id:"changed-srccomponentschatroomscreenmessageslisttsx",level:5},{value:"<strong>Client</strong> Step 15.11: Implement a hook responsible for scrolling",id:"client-step-1511-implement-a-hook-responsible-for-scrolling",level:4},{value:"Changed src/components/ChatRoomScreen/MessagesList.tsx",id:"changed-srccomponentschatroomscreenmessageslisttsx-1",level:5},{value:"Added src/hooks/use-adjusted-scroll.ts",id:"added-srchooksuse-adjusted-scrollts",level:5},{value:"<strong>Client</strong> Step 15.12: Implement pagination in ChatRoom component",id:"client-step-1512-implement-pagination-in-chatroom-component",level:4},{value:"Changed src/components/ChatRoomScreen/index.tsx",id:"changed-srccomponentschatroomscreenindextsx-5",level:5},{value:"<strong>Client</strong> Step 15.13: Use fetchMore to load more messages",id:"client-step-1513-use-fetchmore-to-load-more-messages",level:4},{value:"Changed src/components/ChatRoomScreen/index.tsx",id:"changed-srccomponentschatroomscreenindextsx-6",level:5},{value:"Looking at the bundle size",id:"looking-at-the-bundle-size",level:3},{value:"<strong>Client</strong> Step 15.14: Explore bundle size",id:"client-step-1514-explore-bundle-size",level:4},{value:"Changed package.json",id:"changed-packagejson-2",level:5},{value:"<strong>Client</strong> Step 15.15: Replace moment with date-fns",id:"client-step-1515-replace-moment-with-date-fns",level:4},{value:"Changed package.json",id:"changed-packagejson-3",level:5},{value:"Changed src/components/ChatRoomScreen/MessagesList.tsx",id:"changed-srccomponentschatroomscreenmessageslisttsx-2",level:5},{value:"Changed src/components/ChatsListScreen/ChatsList.tsx",id:"changed-srccomponentschatslistscreenchatslisttsx-2",level:5},{value:"Load testing",id:"load-testing",level:2},{value:"<strong>Server</strong> Step 14.12: Produce transpiled code",id:"server-step-1412-produce-transpiled-code",level:4},{value:"Changed .gitignore",id:"changed-gitignore",level:5},{value:"Changed modules/chats/chats.provider.ts",id:"changed-moduleschatschatsproviderts-9",level:5},{value:"Changed package.json",id:"changed-packagejson-4",level:5},{value:"Changed tsconfig.json",id:"changed-tsconfigjson",level:5},{value:"<strong>Server</strong> Step 14.13: Prepare for production",id:"server-step-1413-prepare-for-production",level:4},{value:"Changed package.json",id:"changed-packagejson-5",level:5},{value:"Artillery",id:"artillery",level:3},{value:"<strong>Server</strong> Step 14.15: Add artillery config",id:"server-step-1415-add-artillery-config",level:4},{value:"Added artillery.yml",id:"added-artilleryyml",level:5},{value:"<strong>Server</strong> Step 14.16: Artillery config to find a limit",id:"server-step-1416-artillery-config-to-find-a-limit",level:4},{value:"Added artillery-limit.yml",id:"added-artillery-limityml",level:5},{value:"<strong>Server</strong> Step 14.17: Add loadtest scripts",id:"server-step-1417-add-loadtest-scripts",level:4},{value:"Changed package.json",id:"changed-packagejson-6",level:5},{value:"Apollo Engine",id:"apollo-engine",level:3}],d={toc:c};function h(e){let{components:t,...r}=e;return(0,s.kt)("wrapper",(0,a.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"step-17-performance"},"Step 17: Performance"),(0,s.kt)("p",null,"In this part of the tutorial we're going to do a bit different work than in previous chapters. We'll analyze the code instead of writing it, including both the API and the web application."),(0,s.kt)("h2",{id:"api-performance"},"API Performance"),(0,s.kt)("p",null,"First, let's start with the GraphQL API."),(0,s.kt)("h3",{id:"finding-bottlenecks"},"Finding bottlenecks"),(0,s.kt)("p",null,"In order to implement fixes and do improvements we need to understand which part of the API needs help. There's still not many tools around GraphQL in terms of analytics and inspection but there's one highly useful, it's called ",(0,s.kt)("strong",{parentName:"p"},"Apollo Engine"),"."),(0,s.kt)("p",null,"Since we're going to use it, you need to register an account at ",(0,s.kt)("a",{parentName:"p",href:"https://engine.apollographql.com/"},"engine.apollographql.com")," and create a service. Please then follow ",(0,s.kt)("a",{parentName:"p",href:"https://www.apollographql.com/docs/platform/schema-registry/#using-the-schema-registry"},'the "How to configure an Apollo project" instructions'),"."),(0,s.kt)("p",null,"Once you're ready, please start the server and run this command:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"$ apollo service:push\n")),(0,s.kt)("p",null,"To collect the data, let's play with the client app for some time. After that, go to Engine's website."),(0,s.kt)("p",null,"Here's one of graphs with timing of an operation. We can understand when each resolver takes place and how much time it consumes. Some resolvers happen in parallel.\nThe ",(0,s.kt)("inlineCode",{parentName:"p"},"< 1ms")," says it was a very simple computation or an element resolved immediately."),(0,s.kt)("p",null,"We find it very useful to understand how operation behaves."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Resolvers",src:n(1677).Z,title:"Resolvers",width:"2278",height:"1390"})),(0,s.kt)("p",null,"Let's go through an entire query to find fields fetched multiple times. The most obvious field is ",(0,s.kt)("inlineCode",{parentName:"p"},"isMine"),". We see it's computed twice for almost 4 and 5 milliseconds.\nIn order to find out what does it mean, we need to look at the code. The resolver gets the currently logged in user from the ",(0,s.kt)("inlineCode",{parentName:"p"},"Auth")," service and its ",(0,s.kt)("inlineCode",{parentName:"p"},"currentUser"),". Each time the method is invoked, a query to PostgreSQL is made. We ask for that data multiple times, once in ",(0,s.kt)("inlineCode",{parentName:"p"},"lastMessage")," and also in every message from the list."),(0,s.kt)("p",null,"We could deduplicate the SQL queries! In order to do that the most obvious library that pops to my mind is Dataloader."),(0,s.kt)("p",null,"Let's install the package and discuss it afterwards:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"yarn add dataloader\n")),(0,s.kt)("p",null,"The Dataloader is a library created and maintained by Facebook. It's main purpose is to turn equivalent requests into a single execution. Sounds like a perfect solution, right? It actually is."),(0,s.kt)("p",null,"A short explaination of how Dataloader works."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"async function fetchUser(id: number): Promise<User> {\n  // Resolves asynchronously, after less than 1s.\n  return db.users.findOne(id);\n}\n\nasync function fetchUsers(ids: number[]): Promise<User[]> {\n  const users = ids.map(id => fetchUser(id));\n  return Promise.all(users);\n}\n\nconst loader = new Dataloader(keys => fetchUsers(keys));\n\nasync function main() {\n  const user1 = await loader.load(1);\n  const user2 = await loader.load(2);\n\n  // Later on user #1 is fetched again.\n  // It resolves immediately.\n  const member1 = await loader.load(1);\n}\n")),(0,s.kt)("p",null,"Think of the Dataloader as a class that has a ",(0,s.kt)("inlineCode",{parentName:"p"},"Map")," object in it, its keys are of course unique and each value is a ",(0,s.kt)("inlineCode",{parentName:"p"},"Promise"),".\nEvery time you ask for something, Dataloader looks for it in the ",(0,s.kt)("inlineCode",{parentName:"p"},"Map"),". When there's already something, the ",(0,s.kt)("inlineCode",{parentName:"p"},"Promise")," is returned but if there's none the provided function is invoked and a new ",(0,s.kt)("inlineCode",{parentName:"p"},"Promise")," is created. This way equivalent requests share the same ",(0,s.kt)("inlineCode",{parentName:"p"},"Promise"),"."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"It's important to know that the ",(0,s.kt)("inlineCode",{parentName:"p"},"Map")," object grows until the DataLoader is released, that's why it's recommended to keep ",(0,s.kt)("inlineCode",{parentName:"p"},"Dataloader")," in GraphQL's context.")),(0,s.kt)("p",null,"Let's implement ",(0,s.kt)("inlineCode",{parentName:"p"},"Dataloader")," in our ",(0,s.kt)("inlineCode",{parentName:"p"},"Database")," service:"),(0,s.kt)("h4",{id:"server-step-141-deduplicate-sql-queries"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/105b89287a172a374ef2a312edc6136f95f80668"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 14.1: Deduplicate SQL queries")),(0,s.kt)("h5",{id:"changed-modulescommondatabaseproviderts"},"Changed modules","/","common","/","database.provider.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,14 +1,41 @@\n \u250a 1\u250a 1\u250aimport { Injectable, ProviderScope } from '@graphql-modules/di';\n \u250a 2\u250a 2\u250aimport { OnResponse } from '@graphql-modules/core';\n-\u250a 3\u250a  \u250aimport { Pool, PoolClient } from 'pg';\n+\u250a  \u250a 3\u250aimport { Pool, PoolClient, QueryResult } from 'pg';\n+\u250a  \u250a 4\u250aimport { SQLStatement } from 'sql-template-strings';\n+\u250a  \u250a 5\u250aimport Dataloader from 'dataloader';\n \u250a 4\u250a 6\u250a\n \u250a 5\u250a 7\u250a@Injectable({\n \u250a 6\u250a 8\u250a  scope: ProviderScope.Session,\n \u250a 7\u250a 9\u250a})\n \u250a 8\u250a10\u250aexport class Database implements OnResponse {\n \u250a 9\u250a11\u250a  private instance: PoolClient;\n+\u250a  \u250a12\u250a  private loader: Dataloader<string | SQLStatement, QueryResult>;\n \u250a10\u250a13\u250a\n-\u250a11\u250a  \u250a  constructor(private pool: Pool) {}\n+\u250a  \u250a14\u250a  constructor(private pool: Pool) {\n+\u250a  \u250a15\u250a    this.loader = new Dataloader(\n+\u250a  \u250a16\u250a      queries =>\n+\u250a  \u250a17\u250a        Promise.all(\n+\u250a  \u250a18\u250a          queries.map(async query => {\n+\u250a  \u250a19\u250a            const db = await this.getClient();\n+\u250a  \u250a20\u250a            return db.query(query);\n+\u250a  \u250a21\u250a          })\n+\u250a  \u250a22\u250a        ),\n+\u250a  \u250a23\u250a      {\n+\u250a  \u250a24\u250a        cacheKeyFn: (key: string | SQLStatement) => {\n+\u250a  \u250a25\u250a          let id: string;\n+\u250a  \u250a26\u250a\n+\u250a  \u250a27\u250a          if (typeof key === 'string') {\n+\u250a  \u250a28\u250a            id = key;\n+\u250a  \u250a29\u250a          } else {\n+\u250a  \u250a30\u250a            id = key.text + ' - ' + JSON.stringify(key.values);\n+\u250a  \u250a31\u250a          }\n+\u250a  \u250a32\u250a\n+\u250a  \u250a33\u250a          return id;\n+\u250a  \u250a34\u250a        },\n+\u250a  \u250a35\u250a        batch: false,\n+\u250a  \u250a36\u250a      }\n+\u250a  \u250a37\u250a    );\n+\u250a  \u250a38\u250a  }\n \u250a12\u250a39\u250a\n \u250a13\u250a40\u250a  async onRequest() {\n \u250a14\u250a41\u250a    this.instance = await this.pool.connect();\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -20,7 +47,11 @@\n \u250a20\u250a47\u250a    }\n \u250a21\u250a48\u250a  }\n \u250a22\u250a49\u250a\n-\u250a23\u250a  \u250a  async getClient() {\n+\u250a  \u250a50\u250a  private getClient() {\n \u250a24\u250a51\u250a    return this.instance;\n \u250a25\u250a52\u250a  }\n+\u250a  \u250a53\u250a\n+\u250a  \u250a54\u250a  query(query: SQLStatement | string) {\n+\u250a  \u250a55\u250a    return this.loader.load(query);\n+\u250a  \u250a56\u250a  }\n \u250a26\u250a57\u250a}\n")),(0,s.kt)("p",null,"The key is created based on SQL statement and its values and we also turned off batching because it's important to execute SQL operations sequentially.\nThere's also a new method called ",(0,s.kt)("inlineCode",{parentName:"p"},"query"),", to execute SQL statements through Dataloader. It also reduces a boilerplate of asking for db client and executing a query every time we do SQL in resolvers and providers."),(0,s.kt)("p",null,"Now we need to apply that change in all providers:"),(0,s.kt)("h4",{id:"server-step-141-deduplicate-sql-queries-1"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/105b89287a172a374ef2a312edc6136f95f80668"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 14.1: Deduplicate SQL queries")),(0,s.kt)("h5",{id:"changed-moduleschatschatsproviderts"},"Changed modules","/","chats","/","chats.provider.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -11,9 +11,7 @@\n \u250a11\u250a11\u250a  @Inject() private pubsub: PubSub;\n \u250a12\u250a12\u250a\n \u250a13\u250a13\u250a  async findChatsByUser(userId: string) {\n-\u250a14\u250a  \u250a    const db = await this.db.getClient();\n-\u250a15\u250a  \u250a\n-\u250a16\u250a  \u250a    const { rows } = await db.query(sql`\n+\u250a  \u250a14\u250a    const { rows } = await this.db.query(sql`\n \u250a17\u250a15\u250a      SELECT chats.* FROM chats, chats_users\n \u250a18\u250a16\u250a      WHERE chats.id = chats_users.chat_id\n \u250a19\u250a17\u250a      AND chats_users.user_id = ${userId}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -23,8 +21,7 @@\n \u250a23\u250a21\u250a  }\n \u250a24\u250a22\u250a\n \u250a25\u250a23\u250a  async findChatByUser({ chatId, userId }: { chatId: string; userId: string }) {\n-\u250a26\u250a  \u250a    const db = await this.db.getClient();\n-\u250a27\u250a  \u250a    const { rows } = await db.query(sql`\n+\u250a  \u250a24\u250a    const { rows } = await this.db.query(sql`\n \u250a28\u250a25\u250a      SELECT chats.* FROM chats, chats_users\n \u250a29\u250a26\u250a      WHERE chats_users.chat_id = ${chatId}\n \u250a30\u250a27\u250a      AND chats.id = chats_users.chat_id\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -35,16 +32,14 @@\n \u250a35\u250a32\u250a  }\n \u250a36\u250a33\u250a\n \u250a37\u250a34\u250a  async findChatById(chatId: string) {\n-\u250a38\u250a  \u250a    const db = await this.db.getClient();\n-\u250a39\u250a  \u250a    const { rows } = await db.query(sql`\n+\u250a  \u250a35\u250a    const { rows } = await this.db.query(sql`\n \u250a40\u250a36\u250a      SELECT * FROM chats WHERE id = ${chatId}\n \u250a41\u250a37\u250a    `);\n \u250a42\u250a38\u250a    return rows[0] || null;\n \u250a43\u250a39\u250a  }\n \u250a44\u250a40\u250a\n \u250a45\u250a41\u250a  async findMessagesByChat(chatId: string) {\n-\u250a46\u250a  \u250a    const db = await this.db.getClient();\n-\u250a47\u250a  \u250a    const { rows } = await db.query(\n+\u250a  \u250a42\u250a    const { rows } = await this.db.query(\n \u250a48\u250a43\u250a      sql`SELECT * FROM messages WHERE chat_id = ${chatId}`\n \u250a49\u250a44\u250a    );\n \u250a50\u250a45\u250a\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -52,8 +47,7 @@\n \u250a52\u250a47\u250a  }\n \u250a53\u250a48\u250a\n \u250a54\u250a49\u250a  async lastMessage(chatId: string) {\n-\u250a55\u250a  \u250a    const db = await this.db.getClient();\n-\u250a56\u250a  \u250a    const { rows } = await db.query(sql`\n+\u250a  \u250a50\u250a    const { rows } = await this.db.query(sql`\n \u250a57\u250a51\u250a      SELECT * FROM messages\n \u250a58\u250a52\u250a      WHERE chat_id = ${chatId}\n \u250a59\u250a53\u250a      ORDER BY created_at DESC\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -64,8 +58,7 @@\n \u250a64\u250a58\u250a  }\n \u250a65\u250a59\u250a\n \u250a66\u250a60\u250a  async firstRecipient({ chatId, userId }: { chatId: string; userId: string }) {\n-\u250a67\u250a  \u250a    const db = await this.db.getClient();\n-\u250a68\u250a  \u250a    const { rows } = await db.query(sql`\n+\u250a  \u250a61\u250a    const { rows } = await this.db.query(sql`\n \u250a69\u250a62\u250a      SELECT users.* FROM users, chats_users\n \u250a70\u250a63\u250a      WHERE users.id != ${userId}\n \u250a71\u250a64\u250a      AND users.id = chats_users.user_id\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -76,8 +69,7 @@\n \u250a76\u250a69\u250a  }\n \u250a77\u250a70\u250a\n \u250a78\u250a71\u250a  async participants(chatId: string) {\n-\u250a79\u250a  \u250a    const db = await this.db.getClient();\n-\u250a80\u250a  \u250a    const { rows } = await db.query(sql`\n+\u250a  \u250a72\u250a    const { rows } = await this.db.query(sql`\n \u250a81\u250a73\u250a      SELECT users.* FROM users, chats_users\n \u250a82\u250a74\u250a      WHERE chats_users.chat_id = ${chatId}\n \u250a83\u250a75\u250a      AND chats_users.user_id = users.id\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -87,8 +79,7 @@\n \u250a87\u250a79\u250a  }\n \u250a88\u250a80\u250a\n \u250a89\u250a81\u250a  async isParticipant({ chatId, userId }: { chatId: string; userId: string }) {\n-\u250a90\u250a  \u250a    const db = await this.db.getClient();\n-\u250a91\u250a  \u250a    const { rows } = await db.query(sql`\n+\u250a  \u250a82\u250a    const { rows } = await this.db.query(sql`\n \u250a92\u250a83\u250a      SELECT * FROM chats_users\n \u250a93\u250a84\u250a      WHERE chat_id = ${chatId}\n \u250a94\u250a85\u250a      AND user_id = ${userId}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -106,8 +97,7 @@\n \u250a106\u250a 97\u250a    userId: string;\n \u250a107\u250a 98\u250a    content: string;\n \u250a108\u250a 99\u250a  }) {\n-\u250a109\u250a   \u250a    const db = await this.db.getClient();\n-\u250a110\u250a   \u250a    const { rows } = await db.query(sql`\n+\u250a   \u250a100\u250a    const { rows } = await this.db.query(sql`\n \u250a111\u250a101\u250a      INSERT INTO messages(chat_id, sender_user_id, content)\n \u250a112\u250a102\u250a      VALUES(${chatId}, ${userId}, ${content})\n \u250a113\u250a103\u250a      RETURNING *\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -129,8 +119,7 @@\n \u250a129\u250a119\u250a    userId: string;\n \u250a130\u250a120\u250a    recipientId: string;\n \u250a131\u250a121\u250a  }) {\n-\u250a132\u250a   \u250a    const db = await this.db.getClient();\n-\u250a133\u250a   \u250a    const { rows } = await db.query(sql`\n+\u250a   \u250a122\u250a    const { rows } = await this.db.query(sql`\n \u250a134\u250a123\u250a      SELECT chats.* FROM chats, (SELECT * FROM chats_users WHERE user_id = ${userId}) AS chats_of_current_user, chats_users\n \u250a135\u250a124\u250a      WHERE chats_users.chat_id = chats_of_current_user.chat_id\n \u250a136\u250a125\u250a      AND chats.id = chats_users.chat_id\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -143,9 +132,9 @@\n \u250a143\u250a132\u250a    }\n \u250a144\u250a133\u250a\n \u250a145\u250a134\u250a    try {\n-\u250a146\u250a   \u250a      await db.query('BEGIN');\n+\u250a   \u250a135\u250a      await this.db.query('BEGIN');\n \u250a147\u250a136\u250a\n-\u250a148\u250a   \u250a      const { rows } = await db.query(sql`\n+\u250a   \u250a137\u250a      const { rows } = await this.db.query(sql`\n \u250a149\u250a138\u250a        INSERT INTO chats\n \u250a150\u250a139\u250a        DEFAULT VALUES\n \u250a151\u250a140\u250a        RETURNING *\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -153,17 +142,17 @@\n \u250a153\u250a142\u250a\n \u250a154\u250a143\u250a      const chatAdded = rows[0];\n \u250a155\u250a144\u250a\n-\u250a156\u250a   \u250a      await db.query(sql`\n+\u250a   \u250a145\u250a      await this.db.query(sql`\n \u250a157\u250a146\u250a        INSERT INTO chats_users(chat_id, user_id)\n \u250a158\u250a147\u250a        VALUES(${chatAdded.id}, ${userId})\n \u250a159\u250a148\u250a      `);\n \u250a160\u250a149\u250a\n-\u250a161\u250a   \u250a      await db.query(sql`\n+\u250a   \u250a150\u250a      await this.db.query(sql`\n \u250a162\u250a151\u250a        INSERT INTO chats_users(chat_id, user_id)\n \u250a163\u250a152\u250a        VALUES(${chatAdded.id}, ${recipientId})\n \u250a164\u250a153\u250a      `);\n \u250a165\u250a154\u250a\n-\u250a166\u250a   \u250a      await db.query('COMMIT');\n+\u250a   \u250a155\u250a      await this.db.query('COMMIT');\n \u250a167\u250a156\u250a\n \u250a168\u250a157\u250a      this.pubsub.publish('chatAdded', {\n \u250a169\u250a158\u250a        chatAdded,\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -171,18 +160,16 @@\n \u250a171\u250a160\u250a\n \u250a172\u250a161\u250a      return chatAdded;\n \u250a173\u250a162\u250a    } catch (e) {\n-\u250a174\u250a   \u250a      await db.query('ROLLBACK');\n+\u250a   \u250a163\u250a      await this.db.query('ROLLBACK');\n \u250a175\u250a164\u250a      throw e;\n \u250a176\u250a165\u250a    }\n \u250a177\u250a166\u250a  }\n \u250a178\u250a167\u250a\n \u250a179\u250a168\u250a  async removeChat({ chatId, userId }: { chatId: string; userId: string }) {\n-\u250a180\u250a   \u250a    const db = await this.db.getClient();\n-\u250a181\u250a   \u250a\n \u250a182\u250a169\u250a    try {\n-\u250a183\u250a   \u250a      await db.query('BEGIN');\n+\u250a   \u250a170\u250a      await this.db.query('BEGIN');\n \u250a184\u250a171\u250a\n-\u250a185\u250a   \u250a      const { rows } = await db.query(sql`\n+\u250a   \u250a172\u250a      const { rows } = await this.db.query(sql`\n \u250a186\u250a173\u250a        SELECT chats.* FROM chats, chats_users\n \u250a187\u250a174\u250a        WHERE id = ${chatId}\n \u250a188\u250a175\u250a        AND chats.id = chats_users.chat_id\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -192,11 +179,11 @@\n \u250a192\u250a179\u250a      const chat = rows[0];\n \u250a193\u250a180\u250a\n \u250a194\u250a181\u250a      if (!chat) {\n-\u250a195\u250a   \u250a        await db.query('ROLLBACK');\n+\u250a   \u250a182\u250a        await this.db.query('ROLLBACK');\n \u250a196\u250a183\u250a        return null;\n \u250a197\u250a184\u250a      }\n \u250a198\u250a185\u250a\n-\u250a199\u250a   \u250a      await db.query(sql`\n+\u250a   \u250a186\u250a      await this.db.query(sql`\n \u250a200\u250a187\u250a        DELETE FROM chats WHERE chats.id = ${chatId}\n \u250a201\u250a188\u250a      `);\n \u250a202\u250a189\u250a\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -205,11 +192,11 @@\n \u250a205\u250a192\u250a        targetChat: chat,\n \u250a206\u250a193\u250a      });\n \u250a207\u250a194\u250a\n-\u250a208\u250a   \u250a      await db.query('COMMIT');\n+\u250a   \u250a195\u250a      await this.db.query('COMMIT');\n \u250a209\u250a196\u250a\n \u250a210\u250a197\u250a      return chatId;\n \u250a211\u250a198\u250a    } catch (e) {\n-\u250a212\u250a   \u250a      await db.query('ROLLBACK');\n+\u250a   \u250a199\u250a      await this.db.query('ROLLBACK');\n \u250a213\u250a200\u250a      throw e;\n \u250a214\u250a201\u250a    }\n \u250a215\u250a202\u250a  }\n")),(0,s.kt)("h5",{id:"changed-modulesusersusersproviderts"},"Changed modules","/","users","/","users.provider.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -13,8 +13,7 @@\n \u250a13\u250a13\u250a  @Inject() private db: Database;\n \u250a14\u250a14\u250a\n \u250a15\u250a15\u250a  async findById(userId: string) {\n-\u250a16\u250a  \u250a    const db = await this.db.getClient();\n-\u250a17\u250a  \u250a    const { rows } = await db.query(\n+\u250a  \u250a16\u250a    const { rows } = await this.db.query(\n \u250a18\u250a17\u250a      sql`SELECT * FROM users WHERE id = ${userId}`\n \u250a19\u250a18\u250a    );\n \u250a20\u250a19\u250a\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -22,8 +21,7 @@\n \u250a22\u250a21\u250a  }\n \u250a23\u250a22\u250a\n \u250a24\u250a23\u250a  async findAllExcept(userId: string) {\n-\u250a25\u250a  \u250a    const db = await this.db.getClient();\n-\u250a26\u250a  \u250a    const { rows } = await db.query(\n+\u250a  \u250a24\u250a    const { rows } = await this.db.query(\n \u250a27\u250a25\u250a      sql`SELECT * FROM users WHERE id != ${userId}`\n \u250a28\u250a26\u250a    );\n \u250a29\u250a27\u250a\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -31,8 +29,7 @@\n \u250a31\u250a29\u250a  }\n \u250a32\u250a30\u250a\n \u250a33\u250a31\u250a  async findByUsername(username: string) {\n-\u250a34\u250a  \u250a    const db = await this.db.getClient();\n-\u250a35\u250a  \u250a    const { rows } = await db.query(\n+\u250a  \u250a32\u250a    const { rows } = await this.db.query(\n \u250a36\u250a33\u250a      sql`SELECT * FROM users WHERE username = ${username}`\n \u250a37\u250a34\u250a    );\n \u250a38\u250a35\u250a\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -48,9 +45,8 @@\n \u250a48\u250a45\u250a    name: string;\n \u250a49\u250a46\u250a    password: string;\n \u250a50\u250a47\u250a  }) {\n-\u250a51\u250a  \u250a    const db = await this.db.getClient();\n \u250a52\u250a48\u250a    const passwordHash = bcrypt.hashSync(password, bcrypt.genSaltSync(8));\n-\u250a53\u250a  \u250a    const createdUserQuery = await db.query(sql`\n+\u250a  \u250a49\u250a    const createdUserQuery = await this.db.query(sql`\n \u250a54\u250a50\u250a        INSERT INTO users(password, picture, username, name)\n \u250a55\u250a51\u250a        VALUES(${passwordHash}, ${DEFAULT_PROFILE_PIC}, ${username}, ${name})\n \u250a56\u250a52\u250a        RETURNING *\n")),(0,s.kt)("p",null,"Deduplication is done but the ",(0,s.kt)("inlineCode",{parentName:"p"},"currentUser")," method does more than just that. It verifies the auth token extracted from a request's cookie. This could be avoided by an assignment to a private prop and a simple if statement."),(0,s.kt)("h4",{id:"server-step-142-cache-current-user-object"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/ccfaed50ae9e7e06cb49d7be0435e752746a8707"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 14.2: Cache current user object")),(0,s.kt)("h5",{id:"changed-modulesusersauthproviderts"},"Changed modules","/","users","/","auth.provider.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -14,6 +14,7 @@\n \u250a14\u250a14\u250aexport class Auth {\n \u250a15\u250a15\u250a  @Inject() private users: Users;\n \u250a16\u250a16\u250a  @Inject() private module: ModuleSessionInfo;\n+\u250a  \u250a17\u250a  private _currentUser: User;\n \u250a17\u250a18\u250a\n \u250a18\u250a19\u250a  private get req() {\n \u250a19\u250a20\u250a    return this.module.session.req || this.module.session.request;\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -76,11 +77,16 @@\n \u250a76\u250a77\u250a  }\n \u250a77\u250a78\u250a\n \u250a78\u250a79\u250a  async currentUser(): Promise<User | null> {\n+\u250a  \u250a80\u250a    if (this._currentUser) {\n+\u250a  \u250a81\u250a      return this._currentUser;\n+\u250a  \u250a82\u250a    }\n+\u250a  \u250a83\u250a\n \u250a79\u250a84\u250a    if (this.req.cookies.authToken) {\n \u250a80\u250a85\u250a      const username = jwt.verify(this.req.cookies.authToken, secret) as string;\n \u250a81\u250a86\u250a\n \u250a82\u250a87\u250a      if (username) {\n-\u250a83\u250a  \u250a        return this.users.findByUsername(username);\n+\u250a  \u250a88\u250a        this._currentUser = await this.users.findByUsername(username);\n+\u250a  \u250a89\u250a        return this._currentUser;\n \u250a84\u250a90\u250a      }\n \u250a85\u250a91\u250a    }\n")),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Resolvers",src:n(3508).Z,title:"Resolvers",width:"2278",height:"1390"})),(0,s.kt)("p",null,"As you can see at the graph above, we reduced an execution time of ",(0,s.kt)("inlineCode",{parentName:"p"},"isMine")," field from 4ms and 5ms to less than 1. That applies for all calls, all messages so it scales well and won't grow as list of messages increases."),(0,s.kt)("p",null,"But there's more... We see ",(0,s.kt)("inlineCode",{parentName:"p"},"chat")," field being computed over and over again. So again, let's repeat the same steps.\nThe ",(0,s.kt)("inlineCode",{parentName:"p"},"Message.chat")," resolver asks ",(0,s.kt)("inlineCode",{parentName:"p"},"Chats")," service and its ",(0,s.kt)("inlineCode",{parentName:"p"},"findChatById")," method which makes a SQL call."),(0,s.kt)("p",null,"The deduplication logic, we introduced in the previous step, helps to immediately resolve all ",(0,s.kt)("inlineCode",{parentName:"p"},"Message.chat")," fields except the first occurrence but there's still a space for improvements."),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"Query.chats")," resolver is invoked before the ",(0,s.kt)("inlineCode",{parentName:"p"},"Message.chat")," which means at this point, we already have knowledge about the chats."),(0,s.kt)("p",null,"Let's implement a caching logic for chats so we could reuse them. We will do it in few steps."),(0,s.kt)("p",null,"First, because we're going to use ",(0,s.kt)("inlineCode",{parentName:"p"},"Dataloader"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"Chats")," class should have private and public API."),(0,s.kt)("h4",{id:"server-step-143-separate-db-query-from-public-api"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/afb9c75d313a027229b3e8e88b0f166e3fc04151"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 14.3: Separate db query from public API")),(0,s.kt)("h5",{id:"changed-moduleschatschatsproviderts-1"},"Changed modules","/","chats","/","chats.provider.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -11,6 +11,10 @@\n \u250a11\u250a11\u250a  @Inject() private pubsub: PubSub;\n \u250a12\u250a12\u250a\n \u250a13\u250a13\u250a  async findChatsByUser(userId: string) {\n+\u250a  \u250a14\u250a    return this._findChatsByUser(userId);\n+\u250a  \u250a15\u250a  }\n+\u250a  \u250a16\u250a\n+\u250a  \u250a17\u250a  private async _findChatsByUser(userId: string) {\n \u250a14\u250a18\u250a    const { rows } = await this.db.query(sql`\n \u250a15\u250a19\u250a      SELECT chats.* FROM chats, chats_users\n \u250a16\u250a20\u250a      WHERE chats.id = chats_users.chat_id\n")),(0,s.kt)("p",null,"The private method is responsible for quering data from the database but the public one is to allow communication between the service and its consumers.\nIt's also there so we could switch to using Dataloader later on."),(0,s.kt)("p",null,"We did that to ",(0,s.kt)("inlineCode",{parentName:"p"},"findChatsByUser")," but there are more:"),(0,s.kt)("h4",{id:"server-step-144-separate-findchatbyuser"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/0f662868fe241390463cc60aa80414170f6d7460"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 14.4: Separate findChatByUser")),(0,s.kt)("h5",{id:"changed-moduleschatschatsproviderts-2"},"Changed modules","/","chats","/","chats.provider.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -25,6 +25,18 @@\n \u250a25\u250a25\u250a  }\n \u250a26\u250a26\u250a\n \u250a27\u250a27\u250a  async findChatByUser({ chatId, userId }: { chatId: string; userId: string }) {\n+\u250a  \u250a28\u250a    const rows = await this._findChatByUser({ chatId, userId });\n+\u250a  \u250a29\u250a\n+\u250a  \u250a30\u250a    return rows[0] || null;\n+\u250a  \u250a31\u250a  }\n+\u250a  \u250a32\u250a\n+\u250a  \u250a33\u250a  private async _findChatByUser({\n+\u250a  \u250a34\u250a    chatId,\n+\u250a  \u250a35\u250a    userId,\n+\u250a  \u250a36\u250a  }: {\n+\u250a  \u250a37\u250a    chatId: string;\n+\u250a  \u250a38\u250a    userId: string;\n+\u250a  \u250a39\u250a  }) {\n \u250a28\u250a40\u250a    const { rows } = await this.db.query(sql`\n \u250a29\u250a41\u250a      SELECT chats.* FROM chats, chats_users\n \u250a30\u250a42\u250a      WHERE chats_users.chat_id = ${chatId}\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -32,7 +44,7 @@\n \u250a32\u250a44\u250a      AND chats_users.user_id = ${userId}\n \u250a33\u250a45\u250a    `);\n \u250a34\u250a46\u250a\n-\u250a35\u250a  \u250a    return rows[0] || null;\n+\u250a  \u250a47\u250a    return rows;\n \u250a36\u250a48\u250a  }\n \u250a37\u250a49\u250a\n \u250a38\u250a50\u250a  async findChatById(chatId: string) {\n")),(0,s.kt)("h4",{id:"server-step-145-separate-findchatbyid"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/49ac379554ffe25b27985a8904159c6ee091e217"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 14.5: Separate findChatById")),(0,s.kt)("h5",{id:"changed-moduleschatschatsproviderts-3"},"Changed modules","/","chats","/","chats.provider.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -48,10 +48,15 @@\n \u250a48\u250a48\u250a  }\n \u250a49\u250a49\u250a\n \u250a50\u250a50\u250a  async findChatById(chatId: string) {\n+\u250a  \u250a51\u250a    const rows = await this._findChatById(chatId);\n+\u250a  \u250a52\u250a    return rows[0] || null;\n+\u250a  \u250a53\u250a  }\n+\u250a  \u250a54\u250a\n+\u250a  \u250a55\u250a  private async _findChatById(chatId: string) {\n \u250a51\u250a56\u250a    const { rows } = await this.db.query(sql`\n \u250a52\u250a57\u250a      SELECT * FROM chats WHERE id = ${chatId}\n \u250a53\u250a58\u250a    `);\n-\u250a54\u250a  \u250a    return rows[0] || null;\n+\u250a  \u250a59\u250a    return rows;\n \u250a55\u250a60\u250a  }\n \u250a56\u250a61\u250a\n \u250a57\u250a62\u250a  async findMessagesByChat(chatId: string) {\n")),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Because those private methods are just to query data, make sure they all return untouched ",(0,s.kt)("inlineCode",{parentName:"p"},"row")," object.")),(0,s.kt)("p",null,"Now's the most interesting part, Dataloader."),(0,s.kt)("h4",{id:"server-step-146-use-dataloader-in-chats"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/b28d914f4d5fc0f49a6a96570b84c3bcb0fd72ff"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 14.6: Use Dataloader in Chats")),(0,s.kt)("h5",{id:"changed-moduleschatschatsproviderts-4"},"Changed modules","/","chats","/","chats.provider.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,8 +1,23 @@\n \u250a 1\u250a 1\u250aimport { Injectable, Inject, ProviderScope } from '@graphql-modules/di';\n+\u250a  \u250a 2\u250aimport { QueryResult } from 'pg';\n \u250a 2\u250a 3\u250aimport sql from 'sql-template-strings';\n+\u250a  \u250a 4\u250aimport DataLoader from 'dataloader';\n \u250a 3\u250a 5\u250aimport { Database } from '../common/database.provider';\n \u250a 4\u250a 6\u250aimport { PubSub } from '../common/pubsub.provider';\n \u250a 5\u250a 7\u250a\n+\u250a  \u250a 8\u250atype ChatsByUser = { userId: string };\n+\u250a  \u250a 9\u250atype ChatByUser = { userId: string; chatId: string };\n+\u250a  \u250a10\u250atype ChatById = { chatId: string };\n+\u250a  \u250a11\u250atype ChatsKey = ChatById | ChatByUser | ChatsByUser;\n+\u250a  \u250a12\u250a\n+\u250a  \u250a13\u250afunction isChatsByUser(query: any): query is ChatsByUser {\n+\u250a  \u250a14\u250a  return query.userId && !query.chatId;\n+\u250a  \u250a15\u250a}\n+\u250a  \u250a16\u250a\n+\u250a  \u250a17\u250afunction isChatByUser(query: any): query is ChatByUser {\n+\u250a  \u250a18\u250a  return query.userId && query.chatId;\n+\u250a  \u250a19\u250a}\n+\u250a  \u250a20\u250a\n \u250a 6\u250a21\u250a@Injectable({\n \u250a 7\u250a22\u250a  scope: ProviderScope.Session,\n \u250a 8\u250a23\u250a})\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -10,8 +25,26 @@\n \u250a10\u250a25\u250a  @Inject() private db: Database;\n \u250a11\u250a26\u250a  @Inject() private pubsub: PubSub;\n \u250a12\u250a27\u250a\n+\u250a  \u250a28\u250a  private loaders = {\n+\u250a  \u250a29\u250a    chats: new DataLoader<ChatsKey, QueryResult['rows']>(keys => {\n+\u250a  \u250a30\u250a      return Promise.all(\n+\u250a  \u250a31\u250a        keys.map(async query => {\n+\u250a  \u250a32\u250a          if (isChatsByUser(query)) {\n+\u250a  \u250a33\u250a            return this._findChatsByUser(query.userId);\n+\u250a  \u250a34\u250a          }\n+\u250a  \u250a35\u250a\n+\u250a  \u250a36\u250a          if (isChatByUser(query)) {\n+\u250a  \u250a37\u250a            return this._findChatByUser(query);\n+\u250a  \u250a38\u250a          }\n+\u250a  \u250a39\u250a\n+\u250a  \u250a40\u250a          return this._findChatById(query.chatId);\n+\u250a  \u250a41\u250a        })\n+\u250a  \u250a42\u250a      );\n+\u250a  \u250a43\u250a    }),\n+\u250a  \u250a44\u250a  };\n+\u250a  \u250a45\u250a\n \u250a13\u250a46\u250a  async findChatsByUser(userId: string) {\n-\u250a14\u250a  \u250a    return this._findChatsByUser(userId);\n+\u250a  \u250a47\u250a    return this.loaders.chats.load({ userId });\n \u250a15\u250a48\u250a  }\n \u250a16\u250a49\u250a\n \u250a17\u250a50\u250a  private async _findChatsByUser(userId: string) {\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -25,7 +58,7 @@\n \u250a25\u250a58\u250a  }\n \u250a26\u250a59\u250a\n \u250a27\u250a60\u250a  async findChatByUser({ chatId, userId }: { chatId: string; userId: string }) {\n-\u250a28\u250a  \u250a    const rows = await this._findChatByUser({ chatId, userId });\n+\u250a  \u250a61\u250a    const rows = await this.loaders.chats.load({ chatId, userId });\n \u250a29\u250a62\u250a\n \u250a30\u250a63\u250a    return rows[0] || null;\n \u250a31\u250a64\u250a  }\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -48,7 +81,7 @@\n \u250a48\u250a81\u250a  }\n \u250a49\u250a82\u250a\n \u250a50\u250a83\u250a  async findChatById(chatId: string) {\n-\u250a51\u250a  \u250a    const rows = await this._findChatById(chatId);\n+\u250a  \u250a84\u250a    const rows = await this.loaders.chats.load({ chatId });\n \u250a52\u250a85\u250a    return rows[0] || null;\n \u250a53\u250a86\u250a  }\n \u250a54\u250a87\u250a\n")),(0,s.kt)("h5",{id:"changed-packagejson"},"Changed package.json"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},'@@ -50,6 +50,7 @@\n \u250a50\u250a50\u250a    "cookie": "0.4.1",\n \u250a51\u250a51\u250a    "cors": "2.8.5",\n \u250a52\u250a52\u250a    "cookie-parser": "1.4.5",\n+\u250a  \u250a53\u250a    "dataloader": "2.0.0",\n \u250a53\u250a54\u250a    "express": "4.17.1",\n \u250a54\u250a55\u250a    "graphql": "15.0.0",\n \u250a55\u250a56\u250a    "graphql-import": "1.0.2",\n')),(0,s.kt)("p",null,"We introduced ",(0,s.kt)("inlineCode",{parentName:"p"},"ChatsKey")," that is a union type, to standarize the input value. Those helper methods like ",(0,s.kt)("inlineCode",{parentName:"p"},"isChatsByUser")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"isChatByUser")," are there to decide what should be fetched."),(0,s.kt)("p",null,"In every public method that we previously changed, there's now Dataloader in use but that's not entirely what we're trying to achieve."),(0,s.kt)("p",null,"The caching mechanism is not yet completed. We deduplicate requests but in some cases, we ask for chats that are already there, so we need to intercept our dataloader logic and introduce caching."),(0,s.kt)("h4",{id:"server-step-147-implement-caching-for-chats"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/452657dc24a46fffba7ab2bee10c2c8b4ef30067"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 14.7: Implement caching for Chats")),(0,s.kt)("h5",{id:"changed-moduleschatschatsproviderts-5"},"Changed modules","/","chats","/","chats.provider.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -4,6 +4,7 @@\n \u250a 4\u250a 4\u250aimport DataLoader from 'dataloader';\n \u250a 5\u250a 5\u250aimport { Database } from '../common/database.provider';\n \u250a 6\u250a 6\u250aimport { PubSub } from '../common/pubsub.provider';\n+\u250a  \u250a 7\u250aimport { Chat } from '../../db';\n \u250a 7\u250a 8\u250a\n \u250a 8\u250a 9\u250atype ChatsByUser = { userId: string };\n \u250a 9\u250a10\u250atype ChatByUser = { userId: string; chatId: string };\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -25,6 +26,7 @@\n \u250a25\u250a26\u250a  @Inject() private db: Database;\n \u250a26\u250a27\u250a  @Inject() private pubsub: PubSub;\n \u250a27\u250a28\u250a\n+\u250a  \u250a29\u250a  private chatsCache = new Map<string, Chat>();\n \u250a28\u250a30\u250a  private loaders = {\n \u250a29\u250a31\u250a    chats: new DataLoader<ChatsKey, QueryResult['rows']>(keys => {\n \u250a30\u250a32\u250a      return Promise.all(\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -33,6 +35,10 @@\n \u250a33\u250a35\u250a            return this._findChatsByUser(query.userId);\n \u250a34\u250a36\u250a          }\n \u250a35\u250a37\u250a\n+\u250a  \u250a38\u250a          if (this.chatsCache.has(query.chatId)) {\n+\u250a  \u250a39\u250a            return [this._readChatFromCache(query.chatId)];\n+\u250a  \u250a40\u250a          }\n+\u250a  \u250a41\u250a\n \u250a36\u250a42\u250a          if (isChatByUser(query)) {\n \u250a37\u250a43\u250a            return this._findChatByUser(query);\n \u250a38\u250a44\u250a          }\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -254,4 +260,14 @@\n \u250a254\u250a260\u250a      throw e;\n \u250a255\u250a261\u250a    }\n \u250a256\u250a262\u250a  }\n+\u250a   \u250a263\u250a\n+\u250a   \u250a264\u250a  private _readChatFromCache(chatId: string) {\n+\u250a   \u250a265\u250a    return this.chatsCache.get(chatId);\n+\u250a   \u250a266\u250a  }\n+\u250a   \u250a267\u250a\n+\u250a   \u250a268\u250a  private _writeChatToCache(chat?: Chat) {\n+\u250a   \u250a269\u250a    if (chat) {\n+\u250a   \u250a270\u250a      this.chatsCache.set(chat.id, chat);\n+\u250a   \u250a271\u250a    }\n+\u250a   \u250a272\u250a  }\n \u250a257\u250a273\u250a}\n")),(0,s.kt)("p",null,"Whenever we ask for a single chat that is available, it's being resolved right away but we still need to write data to the cache."),(0,s.kt)("h4",{id:"server-step-148-write-chats-to-the-cache"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/63904bdceac639e6a5fb7a5456fb9d4afff4abb5"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 14.8: Write chats to the cache")),(0,s.kt)("h5",{id:"changed-moduleschatschatsproviderts-6"},"Changed modules","/","chats","/","chats.provider.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -60,6 +60,10 @@\n \u250a60\u250a60\u250a      AND chats_users.user_id = ${userId}\n \u250a61\u250a61\u250a    `);\n \u250a62\u250a62\u250a\n+\u250a  \u250a63\u250a    rows.forEach(row => {\n+\u250a  \u250a64\u250a      this._writeChatToCache(row);\n+\u250a  \u250a65\u250a    });\n+\u250a  \u250a66\u250a\n \u250a63\u250a67\u250a    return rows;\n \u250a64\u250a68\u250a  }\n \u250a65\u250a69\u250a\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -83,6 +87,8 @@\n \u250a83\u250a87\u250a      AND chats_users.user_id = ${userId}\n \u250a84\u250a88\u250a    `);\n \u250a85\u250a89\u250a\n+\u250a  \u250a90\u250a    this._writeChatToCache(rows[0]);\n+\u250a  \u250a91\u250a\n \u250a86\u250a92\u250a    return rows;\n \u250a87\u250a93\u250a  }\n \u250a88\u250a94\u250a\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -95,6 +101,9 @@\n \u250a 95\u250a101\u250a    const { rows } = await this.db.query(sql`\n \u250a 96\u250a102\u250a      SELECT * FROM chats WHERE id = ${chatId}\n \u250a 97\u250a103\u250a    `);\n+\u250a   \u250a104\u250a\n+\u250a   \u250a105\u250a    this._writeChatToCache(rows[0]);\n+\u250a   \u250a106\u250a\n \u250a 98\u250a107\u250a    return rows;\n \u250a 99\u250a108\u250a  }\n")),(0,s.kt)("p",null,"Let's look at charts in Apollo Engine."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Resolvers",src:n(8345).Z,title:"Resolvers",width:"2278",height:"1390"})),(0,s.kt)("p",null,"We cut off ",(0,s.kt)("inlineCode",{parentName:"p"},"Message.chat")," to less than 1ms."),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"Chat.name")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"Chat.picture")," resolvers share the same logic and since Database service is wrapped with DataLoader, we make a single SQL query. Unfortunately, it's not visible on the graph."),(0,s.kt)("p",null,"Let's summarize our work. ",(0,s.kt)("strong",{parentName:"p"},"We made the GetChat operation almost 60% faster on average")," and it's just based on one chat with one message. The number would be much much higher on a bigger scale."),(0,s.kt)("h3",{id:"preventing-issues"},"Preventing issues"),(0,s.kt)("p",null,"The Apollo Engine has another interesting feature. It\u2019s called Alerts. You set a threshold for all operations or a specific one and whenever it takes longer, you get a notification on Slack. But there\u2019s a catch, you need to pay in order to unlock it."),(0,s.kt)("p",null,"We\u2019re working on something similar but entirely open-sourced. It\u2019s an extension of ApolloServer that lets you track operations and get exactly what you would get from the engine but self-hosted."),(0,s.kt)("h2",{id:"ui-performance"},"UI Performance"),(0,s.kt)("p",null,"The part would be the User Interface and the web app in general."),(0,s.kt)("h3",{id:"metrics"},"Metrics"),(0,s.kt)("p",null,"There's a highly recommended and very comprehensive publication written by Philip Walton (Engineer at Google) called ",(0,s.kt)("a",{parentName:"p",href:"https://developers.google.com/web/fundamentals/performance/user-centric-performance-metrics"},'"User-centric Performance Metrics"')," that was an inspiration for this chapter. We\u2019re going to talk in short about measuring render performance of a web application."),(0,s.kt)("p",null,"Let\u2019s base this chapter on real data. First, open the app and go to Performance tab of Chrome DevTools."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Record",src:n(7739).Z,title:"Record",width:"326",height:"164"})),(0,s.kt)("p",null,"Now click on \u201cStart profiling and reload page\u201d. After it\u2019s done you should see the following:"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"All panels",src:n(8858).Z,title:"All panels",width:"2100",height:"1422"})),(0,s.kt)("p",null,"Right now it may not make a lot of sense, so we\u2019re going to start with something basic."),(0,s.kt)("p",null,"There\u2019s many different kinds of charts but we will cover only few of them: Network, Frames, Timings and Main."),(0,s.kt)("p",null,"Let\u2019s check out the Timings section and explain few important performance metrics."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"DCL - DOMContentLoaded Event"),(0,s.kt)("li",{parentName:"ul"},"L - Onload Event"),(0,s.kt)("li",{parentName:"ul"},"FP - First Paint"),(0,s.kt)("li",{parentName:"ul"},"FCP - First Contentful Paint"),(0,s.kt)("li",{parentName:"ul"},"FMP - First Meaningful Paint")),(0,s.kt)("p",null,"There\u2019s also another one that is not visible on the timeline but also not less important, TTI - Time to Interactive."),(0,s.kt)("p",null,"We will focus on FP, FCP, FMP and TTI."),(0,s.kt)("p",null,"The primary difference between the two metrics is ",(0,s.kt)("strong",{parentName:"p"},"First Paint")," marks the point when the browser renders anything that is visually different from what was on the screen prior to navigation. By contrast, ",(0,s.kt)("strong",{parentName:"p"},"First Contentful Paint")," is the point when the browser renders the first bit of content from the DOM, which may be text, an image, SVG, or even a ",(0,s.kt)("inlineCode",{parentName:"p"},"<canvas>")," element."),(0,s.kt)("p",null,"The ",(0,s.kt)("strong",{parentName:"p"},"First Meaningful Paint")," should mark the point when something useful was rendered. It might mean an input box on Google, video player on YouTube or in our case, a list of chats."),(0,s.kt)("p",null,"The ",(0,s.kt)("strong",{parentName:"p"},"Time To Interactive")," metric marks the point at which the application is both visually rendered and capable of reliably responding to user input."),(0,s.kt)("p",null,"Now with all that knowledge we can move on to something more practical, the ",(0,s.kt)("strong",{parentName:"p"},"Frames panel"),". The main purpose here is to see what\u2019s rendered at given time. In our case, the first paint was made after over 200ms, which is not a bad result at all but see that huge blank space next to it."),(0,s.kt)("p",null,"The ",(0,s.kt)("strong",{parentName:"p"},"Network section"),", is going to help us out here and give some pointers of what might be a reason of it. It\u2019s a timeline that explains when each request was made and how long it took to resolve."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Network section",src:n(5426).Z,title:"Network section",width:"2069",height:"523"})),(0,s.kt)("p",null,"What do we see here? One of the first requests are js files and we need those to bootstrap and render the app. That\u2019s the reason of the blank page."),(0,s.kt)("p",null,"We could improve that by either Server-Side Rendering or using a Service Worker."),(0,s.kt)("h3",{id:"rendering-improvements"},"Rendering improvements"),(0,s.kt)("h4",{id:"server-side-rendering"},"Server-Side Rendering"),(0,s.kt)("p",null,"Implementing SSR means you run the app on server, before it\u2019s being shipped to the client and the document\u2019s content is not just ",(0,s.kt)("inlineCode",{parentName:"p"},"<html><body><app></app></body></html>")," but an actual markup with all the components in it. Because it\u2019s a part of the document, the browser can already display something meaningful and after js files are loaded, the app bootstraps on the client and it becomes interactive. There is one caveat. Wherever you ship the app it has to be able to run node js."),(0,s.kt)("h4",{id:"store-rehydration"},"Store Rehydration"),(0,s.kt)("p",null,"When talking SSR it\u2019s worth to mention GraphQL and related technique called Store Rehydration. API calls are an important part of an application and plays a huge role in SSR."),(0,s.kt)("p",null,"GraphQL operations are called once components are mounted which means the cache is filled up and why not reuse it on client."),(0,s.kt)("p",null,"How would it work? Data is extracted from the apollo\u2019s cache and passed within a document. After it\u2019s received by the browser, the app runs and so does the Apollo Client. While it happens we look for the data and fill up the cache. Now whenever a component calls a GraphQL operation, the result is already in the cache and resolves immediately."),(0,s.kt)("h4",{id:"service-worker"},"Service Worker"),(0,s.kt)("p",null,"Another approach is a bit different. By using a Service Worker, we\u2019re able to control and cache requests, including js files, images etc. On the first visit, the app loads exactly the same as without SSR but the next visits are a bit faster. It\u2019s because the Service Worker is registered after you close the app and of course we can\u2019t cache things that weren\u2019t fetched yet."),(0,s.kt)("p",null,"Both techniques are not mutually exclusive and we highly recommend to use both."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Main section",src:n(4452).Z,title:"Main section",width:"2069",height:"252"})),(0,s.kt)("p",null,"The next section we\u2019re going to talk about is the ",(0,s.kt)("strong",{parentName:"p"},"Main panel"),", a flame chart of activity on the main thread. You see those blocks? They represent an event, the wider it is the longer it took. One of the most important things to remember is to avoid long events since they block the thread.\nThe longest event on our timeline is the Evaluate Script event that involves ",(0,s.kt)("inlineCode",{parentName:"p"},"main.js"),". The file contains all the libraries and the core functionality, those are needed to run the app. By making it lighter we would decrease the time of the first render.\nWe already do something to reduce the bundle size, This technique we use is called code-splitting and it allows to split one piece of code into multiple files which are lazy loaded.\nIt cuts off the size of the main bundle and the rest is loaded on demand, let\u2019s say login page is in a different chunk than list of chats."),(0,s.kt)("h3",{id:"tooling"},"Tooling"),(0,s.kt)("p",null,"There\u2019s one tool built into Chrome DevTools called Lighthouse that allows to measure, collect metrics and get helpful tips on how to improve the performance and where are the pain points."),(0,s.kt)("p",null,"Here\u2019s the example:"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Lighthouse results",src:n(1805).Z,title:"Lighthouse results",width:"1460",height:"1236"})),(0,s.kt)("p",null,"Once your app is optimized you want to prevent regressions. Lighthouse has you covered! It may run as part of Continuous Integration and prevents deployment when key metrics regress or drop below a certain threshold."),(0,s.kt)("h2",{id:"making-the-app-feels-instant"},"Making the app feels instant"),(0,s.kt)("p",null,"Dealing with slow network can be hard so let's simulate that situation. After all, running the application on local host will always result in low response times."),(0,s.kt)("p",null,"Luckily most browser come with a built in solution for that - we can simulate a slow network by defining the throttle level:"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Throttling",src:n(6626).Z,title:"Throttling",width:"1200",height:"345"})),(0,s.kt)("p",null,"If we will refresh the application, we should notice a significant slow down the first time we load each screen; about few seconds to load each of them. To ensure that this is really caused by a slow network and not by anything else, we can open the dev-tools of our browser (let\u2019s assume you use Chrome) and under the ",(0,s.kt)("inlineCode",{parentName:"p"},"network")," tab we should notice the network activity times."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"More information about monitoring network activity and throttling it using the Chrome\u2019s dev-tools can be found in ",(0,s.kt)("a",{parentName:"p",href:"https://developers.google.com/web/tools/chrome-devtools/network/"},"the official dev-tools docs page"),".")),(0,s.kt)("p",null,"To solve these issues there are a couple of changes we\u2019re gonna make in the way we fetch and manage data."),(0,s.kt)("h3",{id:"optimistic-ui"},"Optimistic UI"),(0,s.kt)("p",null,"As you know, pretty much in all cases, everything in Apollo flows through its cache. If a requested data is in there, a query is resolved right away. Mutations are a bit different, they have to reach the server every single time. Seems like nothing we can do about it but fortunately we can simulate the mutation, predict the result and make Apollo treat it as a temporary data. Which means, the app\u2019s state and all components are updated and the change is visible instantly after it\u2019s made."),(0,s.kt)("p",null,"In case of the WhatsApp clone, whenever a new message is sent, we will see it right away, on the screen, doesn\u2019t matter if the network is low or even super fast. You may experience the similar behavior on Facebook\u2019s Messenger."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-graphql"},"  mutation AddMessage($chatId: ID!, $content: String!) {\n    addMessage(chatId: $chatId, content: $content) {\n      ...Message\n    }\n  }\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-graphql"},"  addMessage({\n    variables: { chatId, content },\n    optimisticResponse: {\n      __typename: 'Mutation',\n      addMessage: {\n        __typename: 'Message',\n        id: Math.random().toString(36).substr(2, 9),\n        createdAt: new Date(),\n        isMine: true,\n        chat: {\n          __typename: 'Chat',\n          id: chatId,\n        },\n        content,\n      }\n    },\n    update: (client, { data: { addMessage } }) => {\n      writeMessage(client, addMessage);\n    },\n  })\n")),(0,s.kt)("p",null,"We used words \u201cpredict\u201d and \u201csimulate\u201d, what if the mutation behaves differently or what\u2019s more interesting, it fails. Apollo handles that as well. The \u201creal\u201d response overwrites the fake one and the store is reverted back to the original state."),(0,s.kt)("h3",{id:"prefetching-data"},"Prefetching data"),(0,s.kt)("p",null,"Another technique but with a bit different purpose is about fetching data in advance. In some situations, you might be able to predict which page/component is going to be entered next."),(0,s.kt)("p",null,"Let\u2019s base it on a real example. The WhatsApp clone has a page with a list of chats. The component that represents the page, calls a GraphQL operation to fetch that list. Right now, when user clicks on one of the chats, he\u2019s redirected to a partially empty page because of the ongoing GraphQL request. What if we could fetch that data in advance? That\u2019s what this technique is about. We could predict user\u2019s next move based on a simple mouse event or even by using Artificial Intelligence and data collected by Google Analytics, so whenever the move actually happens, the data is already in the cache."),(0,s.kt)("h4",{id:"client-step-151-implement-prefetching"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/fe6d3a45a19a934d28cb676afdfe749426cc44b1"},(0,s.kt)("strong",{parentName:"a"},"Client")," Step 15.1: Implement prefetching")),(0,s.kt)("h5",{id:"changed-srccomponentschatroomscreenindextsx"},"Changed src","/","components","/","ChatRoomScreen","/","index.tsx"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -2,12 +2,19 @@\n \u250a 2\u250a 2\u250aimport React from 'react';\n \u250a 3\u250a 3\u250aimport { useCallback } from 'react';\n \u250a 4\u250a 4\u250aimport { Redirect } from 'react-router-dom';\n+\u250a  \u250a 5\u250aimport { useApolloClient } from '@apollo/react-hooks';\n \u250a 5\u250a 6\u250aimport styled from 'styled-components';\n \u250a 6\u250a 7\u250aimport ChatNavbar from './ChatNavbar';\n \u250a 7\u250a 8\u250aimport MessageInput from './MessageInput';\n \u250a 8\u250a 9\u250aimport MessagesList from './MessagesList';\n \u250a 9\u250a10\u250aimport { History } from 'history';\n-\u250a10\u250a  \u250aimport { useGetChatQuery, useAddMessageMutation } from '../../graphql/types';\n+\u250a  \u250a11\u250aimport {\n+\u250a  \u250a12\u250a  useGetChatQuery,\n+\u250a  \u250a13\u250a  useAddMessageMutation,\n+\u250a  \u250a14\u250a  GetChatQuery,\n+\u250a  \u250a15\u250a  GetChatQueryVariables,\n+\u250a  \u250a16\u250a  GetChatDocument,\n+\u250a  \u250a17\u250a} from '../../graphql/types';\n \u250a11\u250a18\u250aimport * as fragments from '../../graphql/fragments';\n \u250a12\u250a19\u250aimport { writeMessage } from '../../services/cache.service';\n \u250a13\u250a20\u250a\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -38,6 +45,19 @@\n \u250a38\u250a45\u250a  ${fragments.message}\n \u250a39\u250a46\u250a`;\n \u250a40\u250a47\u250a\n+\u250a  \u250a48\u250aexport const useGetChatPrefetch = () => {\n+\u250a  \u250a49\u250a  const client = useApolloClient();\n+\u250a  \u250a50\u250a\n+\u250a  \u250a51\u250a  return (chatId: string) => {\n+\u250a  \u250a52\u250a    client.query<GetChatQuery, GetChatQueryVariables>({\n+\u250a  \u250a53\u250a      query: GetChatDocument,\n+\u250a  \u250a54\u250a      variables: {\n+\u250a  \u250a55\u250a        chatId,\n+\u250a  \u250a56\u250a      },\n+\u250a  \u250a57\u250a    });\n+\u250a  \u250a58\u250a  };\n+\u250a  \u250a59\u250a};\n+\u250a  \u250a60\u250a\n \u250a41\u250a61\u250ainterface ChatRoomScreenParams {\n \u250a42\u250a62\u250a  chatId: string;\n \u250a43\u250a63\u250a  history: History;\n")),(0,s.kt)("p",null,"We created the ",(0,s.kt)("inlineCode",{parentName:"p"},"useGetChatPrefetch")," hook that gets ApolloClient instance through ",(0,s.kt)("inlineCode",{parentName:"p"},"useApolloClient")," and returns a function to prefetch data. In this case we request ",(0,s.kt)("inlineCode",{parentName:"p"},"GetChat")," operation. Because Apollo deduplicates queries, we won't make multiple http calls, we're safe."),(0,s.kt)("p",null,"The actual usage of ",(0,s.kt)("inlineCode",{parentName:"p"},"useGetChatPrefetch"),", happens on ",(0,s.kt)("inlineCode",{parentName:"p"},"mouse entered")," event:"),(0,s.kt)("h4",{id:"client-step-151-implement-prefetching-1"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/fe6d3a45a19a934d28cb676afdfe749426cc44b1"},(0,s.kt)("strong",{parentName:"a"},"Client")," Step 15.1: Implement prefetching")),(0,s.kt)("h5",{id:"changed-srccomponentschatslistscreenchatslisttsx"},"Changed src","/","components","/","ChatsListScreen","/","ChatsList.tsx"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -5,6 +5,7 @@\n \u250a 5\u250a 5\u250aimport { useCallback } from 'react';\n \u250a 6\u250a 6\u250aimport { History } from 'history';\n \u250a 7\u250a 7\u250aimport { useChatsQuery } from '../../graphql/types';\n+\u250a  \u250a 8\u250aimport { useGetChatPrefetch } from '../ChatRoomScreen';\n \u250a 8\u250a 9\u250a\n \u250a 9\u250a10\u250aconst Container = styled.div`\n \u250a10\u250a11\u250a  height: calc(100% - 56px);\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -69,6 +70,7 @@\n \u250a69\u250a70\u250a    },\n \u250a70\u250a71\u250a    [history]\n \u250a71\u250a72\u250a  );\n+\u250a  \u250a73\u250a  const prefetchChat = useGetChatPrefetch();\n \u250a72\u250a74\u250a\n \u250a73\u250a75\u250a  const { data } = useChatsQuery();\n \u250a74\u250a76\u250a\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},'@@ -85,7 +87,10 @@\n \u250a85\u250a87\u250a            key={chat.id}\n \u250a86\u250a88\u250a            data-testid="chat"\n \u250a87\u250a89\u250a            button\n-\u250a88\u250a  \u250a            onClick={navToChat.bind(null, chat)}>\n+\u250a  \u250a90\u250a            onClick={navToChat.bind(null, chat)}\n+\u250a  \u250a91\u250a            onMouseEnter={() => {\n+\u250a  \u250a92\u250a              prefetchChat(chat.id);\n+\u250a  \u250a93\u250a            }}>\n \u250a89\u250a94\u250a            <ChatPicture\n \u250a90\u250a95\u250a              data-testid="picture"\n \u250a91\u250a96\u250a              src={chat.picture}\n')),(0,s.kt)("p",null,"Now, the same but with the list of users:"),(0,s.kt)("h4",{id:"client-step-151-implement-prefetching-2"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/fe6d3a45a19a934d28cb676afdfe749426cc44b1"},(0,s.kt)("strong",{parentName:"a"},"Client")," Step 15.1: Implement prefetching")),(0,s.kt)("h5",{id:"changed-srccomponentschatslistscreenaddchatbuttontsx"},"Changed src","/","components","/","ChatsListScreen","/","AddChatButton.tsx"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -3,6 +3,7 @@\n \u250a3\u250a3\u250aimport React from 'react';\n \u250a4\u250a4\u250aimport styled from 'styled-components';\n \u250a5\u250a5\u250aimport { History } from 'history';\n+\u250a \u250a6\u250aimport { useUsersPrefetch } from '../UsersList';\n \u250a6\u250a7\u250a\n \u250a7\u250a8\u250aconst Container = styled.div`\n \u250a8\u250a9\u250a  position: fixed;\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},'@@ -18,17 +19,19 @@\n \u250a18\u250a19\u250a    color: white;\n \u250a19\u250a20\u250a  }\n \u250a20\u250a21\u250a`;\n+\u250a  \u250a22\u250a\n \u250a21\u250a23\u250ainterface ChildComponentProps {\n \u250a22\u250a24\u250a  history: History;\n \u250a23\u250a25\u250a}\n \u250a24\u250a26\u250a\n \u250a25\u250a27\u250aconst AddChatButton: React.FC<ChildComponentProps> = ({ history }) => {\n+\u250a  \u250a28\u250a  const prefetchUsers = useUsersPrefetch();\n \u250a26\u250a29\u250a  const onClick = () => {\n \u250a27\u250a30\u250a    history.push(\'/new-chat\');\n \u250a28\u250a31\u250a  };\n \u250a29\u250a32\u250a\n \u250a30\u250a33\u250a  return (\n-\u250a31\u250a  \u250a    <Container>\n+\u250a  \u250a34\u250a    <Container onMouseEnter={() => prefetchUsers()}>\n \u250a32\u250a35\u250a      <Button\n \u250a33\u250a36\u250a        data-testid="new-chat-button"\n \u250a34\u250a37\u250a        variant="contained"\n')),(0,s.kt)("h4",{id:"client-step-151-implement-prefetching-3"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/fe6d3a45a19a934d28cb676afdfe749426cc44b1"},(0,s.kt)("strong",{parentName:"a"},"Client")," Step 15.1: Implement prefetching")),(0,s.kt)("h5",{id:"changed-srccomponentschatslistscreenchatslisttsx-1"},"Changed src","/","components","/","ChatsListScreen","/","ChatsList.tsx"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -5,6 +5,7 @@\n \u250a 5\u250a 5\u250aimport { useCallback } from 'react';\n \u250a 6\u250a 6\u250aimport { History } from 'history';\n \u250a 7\u250a 7\u250aimport { useChatsQuery } from '../../graphql/types';\n+\u250a  \u250a 8\u250aimport { useGetChatPrefetch } from '../ChatRoomScreen';\n \u250a 8\u250a 9\u250a\n \u250a 9\u250a10\u250aconst Container = styled.div`\n \u250a10\u250a11\u250a  height: calc(100% - 56px);\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -69,6 +70,7 @@\n \u250a69\u250a70\u250a    },\n \u250a70\u250a71\u250a    [history]\n \u250a71\u250a72\u250a  );\n+\u250a  \u250a73\u250a  const prefetchChat = useGetChatPrefetch();\n \u250a72\u250a74\u250a\n \u250a73\u250a75\u250a  const { data } = useChatsQuery();\n \u250a74\u250a76\u250a\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},'@@ -85,7 +87,10 @@\n \u250a85\u250a87\u250a            key={chat.id}\n \u250a86\u250a88\u250a            data-testid="chat"\n \u250a87\u250a89\u250a            button\n-\u250a88\u250a  \u250a            onClick={navToChat.bind(null, chat)}>\n+\u250a  \u250a90\u250a            onClick={navToChat.bind(null, chat)}\n+\u250a  \u250a91\u250a            onMouseEnter={() => {\n+\u250a  \u250a92\u250a              prefetchChat(chat.id);\n+\u250a  \u250a93\u250a            }}>\n \u250a89\u250a94\u250a            <ChatPicture\n \u250a90\u250a95\u250a              data-testid="picture"\n \u250a91\u250a96\u250a              src={chat.picture}\n')),(0,s.kt)("h3",{id:"splitting-and-deferring-queries"},"Splitting and Deferring Queries"),(0,s.kt)("p",null,"Prefetching is an easy way to make your applications UI feel faster. You can use mouse events to predict the data that could be needed. This is powerful and works perfectly on the browser, but can not be applied to a mobile device."),(0,s.kt)("p",null,"One solution for improving the UI experience would be the usage of fragments to preload more data in a query, but loading huge amounts of data (that you probably never show to the user) is expensive."),(0,s.kt)("p",null,"Another solution would be to ",(0,s.kt)("strong",{parentName:"p"},"split huge queries into two smaller queries"),":"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"The first one could load data which is already in the store. This means that it can be displayed instantly."),(0,s.kt)("li",{parentName:"ul"},"The second query could load data which is not in the store yet and must be fetched from the server first.")),(0,s.kt)("p",null,"This solution gives you the benefit of not fetching too much data, as well as the possibility to show some part of the views data before the server responds."),(0,s.kt)("p",null,"This could be used in our messaging app to load chat\u2019s information and messages separately. This way we will see the title and the image instantly, because it\u2019s already in the cache but messages will be loaded afterwards. UX will benefit a lot."),(0,s.kt)("p",null,"There\u2019s also something very similar conceptually to Query Splitting but instead of separating queries we keep everything in one operation and annotate the parts that should be deferred. The annotation is, of course a directive and it\u2019s called ",(0,s.kt)("strong",{parentName:"p"},(0,s.kt)("inlineCode",{parentName:"strong"},"@defer")),"."),(0,s.kt)("p",null,"Once the ",(0,s.kt)("inlineCode",{parentName:"p"},"@defer")," is used, the server returns an initial response without waiting for deferred fields to resolve, using null as placeholders for them. Then, it streams patches for each deferred field asynchronously as they resolve. Thanks to that, we maintain one operation but decide how it behaves."),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"Right now, this feature is not well supported in Apollo Server so we don\u2019t recommend to use it yet. Keep it on mind though.")),(0,s.kt)("h3",{id:"dealing-with-rendering-issues"},"Dealing with rendering issues"),(0,s.kt)("p",null,"The most naive thing we can do to start noticing performance issues would be loading TONS of data to our app, and make sure that each view is absolutely overwhelmed with information.\nThis way performance issues will start rising above the surface pretty quickly.\nTo do that, we will edit the ",(0,s.kt)("inlineCode",{parentName:"p"},"resetDb()")," method on the server so it can generate large quantities of data.\nThe most comfortable way of controlling that behavior would be through an environment variable that will tell the reset method how much iterations it should run.\nThe more iterations, the more data would be fabricated:"),(0,s.kt)("h4",{id:"server-step-149-add-fake-data"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/1478cf67f599bb469152a9be64bdf3d9cbc010b7"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 14.9: Add fake data")),(0,s.kt)("h5",{id:"changed-dbts"},"Changed db.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,6 +1,8 @@\n \u250a1\u250a1\u250aimport { Pool } from 'pg';\n \u250a2\u250a2\u250aimport sql from 'sql-template-strings';\n-\u250a3\u250a \u250aimport { resetDb as envResetDb } from './env';\n+\u250a \u250a3\u250aimport faker from 'faker';\n+\u250a \u250a4\u250aimport addMinutes from 'date-fns/addMinutes';\n+\u250a \u250a5\u250aimport { resetDb as envResetDb, fakedDb } from './env';\n \u250a4\u250a6\u250a\n \u250a5\u250a7\u250aexport type User = {\n \u250a6\u250a8\u250a  id: string;\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -232,6 +234,10 @@\n \u250a232\u250a234\u250a    },\n \u250a233\u250a235\u250a  ];\n \u250a234\u250a236\u250a\n+\u250a   \u250a237\u250a  if (fakedDb) {\n+\u250a   \u250a238\u250a    addFakedMessages(sampleMessages, fakedDb);\n+\u250a   \u250a239\u250a  }\n+\u250a   \u250a240\u250a\n \u250a235\u250a241\u250a  for (const sampleMessage of sampleMessages) {\n \u250a236\u250a242\u250a    await pool.query(sql`\n \u250a237\u250a243\u250a      INSERT INTO messages(id, content, created_at, chat_id, sender_user_id)\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -244,6 +250,21 @@\n \u250a244\u250a250\u250a  );\n \u250a245\u250a251\u250a};\n \u250a246\u250a252\u250a\n+\u250a   \u250a253\u250afunction addFakedMessages(messages: Message[], count: number) {\n+\u250a   \u250a254\u250a  const message = messages[0];\n+\u250a   \u250a255\u250a  const date = message.created_at;\n+\u250a   \u250a256\u250a  const id = messages.length + 1;\n+\u250a   \u250a257\u250a\n+\u250a   \u250a258\u250a  new Array(count).fill(0).forEach((_, i) => {\n+\u250a   \u250a259\u250a    messages.push({\n+\u250a   \u250a260\u250a      ...message,\n+\u250a   \u250a261\u250a      id: `${id + i}`,\n+\u250a   \u250a262\u250a      content: faker.lorem.sentence(4),\n+\u250a   \u250a263\u250a      created_at: addMinutes(date, i + 1),\n+\u250a   \u250a264\u250a    });\n+\u250a   \u250a265\u250a  });\n+\u250a   \u250a266\u250a}\n+\u250a   \u250a267\u250a\n \u250a247\u250a268\u250aif (envResetDb) {\n \u250a248\u250a269\u250a  resetDb();\n \u250a249\u250a270\u250a}\n")),(0,s.kt)("h5",{id:"changed-envts"},"Changed env.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -5,3 +5,6 @@\n \u250a 5\u250a 5\u250aexport const origin = process.env.ORIGIN || 'http://localhost:3000';\n \u250a 6\u250a 6\u250aexport const port = process.env.PORT || 4000;\n \u250a 7\u250a 7\u250aexport const resetDb = process.env.RESET_DB || false;\n+\u250a  \u250a 8\u250aexport const fakedDb = process.env.FAKED_DB\n+\u250a  \u250a 9\u250a  ? parseInt(process.env.FAKED_DB, 10)\n+\u250a  \u250a10\u250a  : 0;\n")),(0,s.kt)("h5",{id:"changed-moduleschatschatsproviderts-7"},"Changed modules","/","chats","/","chats.provider.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -28,9 +28,9 @@\n \u250a28\u250a28\u250a\n \u250a29\u250a29\u250a  private chatsCache = new Map<string, Chat>();\n \u250a30\u250a30\u250a  private loaders = {\n-\u250a31\u250a  \u250a    chats: new DataLoader<ChatsKey, QueryResult['rows']>(keys => {\n+\u250a  \u250a31\u250a    chats: new DataLoader<ChatsKey, QueryResult['rows']>((keys) => {\n \u250a32\u250a32\u250a      return Promise.all(\n-\u250a33\u250a  \u250a        keys.map(async query => {\n+\u250a  \u250a33\u250a        keys.map(async (query) => {\n \u250a34\u250a34\u250a          if (isChatsByUser(query)) {\n \u250a35\u250a35\u250a            return this._findChatsByUser(query.userId);\n \u250a36\u250a36\u250a          }\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -60,7 +60,7 @@\n \u250a60\u250a60\u250a      AND chats_users.user_id = ${userId}\n \u250a61\u250a61\u250a    `);\n \u250a62\u250a62\u250a\n-\u250a63\u250a  \u250a    rows.forEach(row => {\n+\u250a  \u250a63\u250a    rows.forEach((row) => {\n \u250a64\u250a64\u250a      this._writeChatToCache(row);\n \u250a65\u250a65\u250a    });\n \u250a66\u250a66\u250a\n")),(0,s.kt)("h5",{id:"changed-modulescommondatabaseproviderts-1"},"Changed modules","/","common","/","database.provider.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -13,9 +13,9 @@\n \u250a13\u250a13\u250a\n \u250a14\u250a14\u250a  constructor(private pool: Pool) {\n \u250a15\u250a15\u250a    this.loader = new Dataloader(\n-\u250a16\u250a  \u250a      queries =>\n+\u250a  \u250a16\u250a      (queries) =>\n \u250a17\u250a17\u250a        Promise.all(\n-\u250a18\u250a  \u250a          queries.map(async query => {\n+\u250a  \u250a18\u250a          queries.map(async (query) => {\n \u250a19\u250a19\u250a            const db = await this.getClient();\n \u250a20\u250a20\u250a            return db.query(query);\n \u250a21\u250a21\u250a          })\n")),(0,s.kt)("h5",{id:"changed-packagejson-1"},"Changed package.json"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},'@@ -25,6 +25,7 @@\n \u250a25\u250a25\u250a    "@types/cookie": "0.4.0",\n \u250a26\u250a26\u250a    "@types/cookie-parser": "1.4.2",\n \u250a27\u250a27\u250a    "@types/express": "4.17.6",\n+\u250a  \u250a28\u250a    "@types/faker": "4.1.12",\n \u250a28\u250a29\u250a    "@types/graphql": "14.5.0",\n \u250a29\u250a30\u250a    "@types/jest": "25.2.3",\n \u250a30\u250a31\u250a    "@types/jsonwebtoken": "8.5.0",\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},'@@ -51,7 +52,9 @@\n \u250a51\u250a52\u250a    "cors": "2.8.5",\n \u250a52\u250a53\u250a    "cookie-parser": "1.4.5",\n \u250a53\u250a54\u250a    "dataloader": "2.0.0",\n+\u250a  \u250a55\u250a    "date-fns": "2.14.0",\n \u250a54\u250a56\u250a    "express": "4.17.1",\n+\u250a  \u250a57\u250a    "faker": "4.1.0",\n \u250a55\u250a58\u250a    "graphql": "15.0.0",\n \u250a56\u250a59\u250a    "graphql-import": "1.0.2",\n \u250a57\u250a60\u250a    "graphql-scalars": "1.1.2",\n')),(0,s.kt)("p",null,"It\u2019s important to note that we\u2019ve generated the data in a very specific way where a single user will be the center of the network of data. This way when we log in with that user, we should see our views packed. If it wasn\u2019t for that we would have just had large quantities of data in the DB, but none of it would appear to the end-user."),(0,s.kt)("p",null,"Now, we will restart the server and this time run it differently. We will provide ",(0,s.kt)("inlineCode",{parentName:"p"},"FAKED_DB")," with a value of ",(0,s.kt)("inlineCode",{parentName:"p"},"100")," which should connect us to 100 messages per single view:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"RESET_DB=true FAKED_DB=100 yarn start\n")),(0,s.kt)("p",null,"Now make sure that the application is running and log-in with the first user of Ray Edwards using the credentials:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"username: ray\npassowrd: 111\n")),(0,s.kt)("p",null,"Now try to navigate around between the ",(0,s.kt)("inlineCode",{parentName:"p"},"ChatsScreen")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"ChatBoxScreen"),". You\u2019ll notice that each transition takes a long time until it shows the data. It\u2019s obviously something which is related to rendering and not data transportation, because the slowdown also happens the second time you visit a view, a point where the fetched data should have already been stored by Apollo in cache. So we\u2019ve already detected one performance issue we should deal with."),(0,s.kt)("h3",{id:"pagination"},"Pagination"),(0,s.kt)("p",null,"To solve it, there are couple of changes we\u2019re gonna make in the way we ask for data, messages will be fetched dynamically based on our scrolling position."),(0,s.kt)("p",null,"With these changes, the requests will be splitted into smaller chunks, and React DOM won\u2019t have to deal with a lot of data the first time it loads. There are few challenges that may arise from this implementation:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Representing queries in a way that they can be loaded in chunks"),(0,s.kt)("li",{parentName:"ul"},"Sending requests and updating the view dynamically"),(0,s.kt)("li",{parentName:"ul"},"Maintaining updates from subscriptions")),(0,s.kt)("p",null,"To start with, we will first take on the task of improving initialization times. We will release the pressure by fetching only the first 20 messages. This way when we visit a chat, it should be loaded faster."),(0,s.kt)("p",null,"For that we're going to implement cursor-based pagination. We will add ",(0,s.kt)("inlineCode",{parentName:"p"},"after")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"limit")," arguments to ",(0,s.kt)("inlineCode",{parentName:"p"},"Chat.messages")," that could be used to fetch a specific snapshot of available messages."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"after")," is optional and marks the point where the last fetch ended (what is the last element of a received list)"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"limit")," is required, defines amount of data")),(0,s.kt)("p",null,"A common design pattern for fetching data snapshots from a GraphQL back-end is called ",(0,s.kt)("a",{parentName:"p",href:"https://facebook.github.io/relay/docs/en/graphql-server-specification.html"},"Relay"),". Relay provides a robust solution which is suitable for things like search engines."),(0,s.kt)("p",null,"We will define our own version of it."),(0,s.kt)("h4",{id:"server-step-1410-prepare-schema-for-cursor-based-pagination"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/17a4698b2b904c46cacc880c2510f1b442a184d8"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 14.10: Prepare schema for cursor-based pagination")),(0,s.kt)("h5",{id:"changed-moduleschatsindexts"},"Changed modules","/","chats","/","index.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -21,12 +21,18 @@\n \u250a21\u250a21\u250a    isMine: Boolean!\n \u250a22\u250a22\u250a  }\n \u250a23\u250a23\u250a\n+\u250a  \u250a24\u250a  type MessagesResult {\n+\u250a  \u250a25\u250a    cursor: Float\n+\u250a  \u250a26\u250a    hasMore: Boolean!\n+\u250a  \u250a27\u250a    messages: [Message!]!\n+\u250a  \u250a28\u250a  }\n+\u250a  \u250a29\u250a\n \u250a24\u250a30\u250a  type Chat {\n \u250a25\u250a31\u250a    id: ID!\n \u250a26\u250a32\u250a    name: String\n \u250a27\u250a33\u250a    picture: URL\n \u250a28\u250a34\u250a    lastMessage: Message\n-\u250a29\u250a  \u250a    messages: [Message!]!\n+\u250a  \u250a35\u250a    messages(limit: Int!, after: Float): MessagesResult!\n \u250a30\u250a36\u250a    participants: [User!]!\n \u250a31\u250a37\u250a  }\n")),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"MessagesResult")," is built of:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"cursor")," - marks the end of a fetched list"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"hasMore")," - tells if there's more data to ask for"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"message")," - has the same type as ",(0,s.kt)("inlineCode",{parentName:"li"},"Chat.messages")," previously had")),(0,s.kt)("p",null,"Because the cursor marks the edge of received data, it has to be something we could use while sorting. The most obvious choice is the date of creation, so ",(0,s.kt)("inlineCode",{parentName:"p"},"created_at")," column of ",(0,s.kt)("inlineCode",{parentName:"p"},"messages")," table."),(0,s.kt)("p",null,"It's stored as ",(0,s.kt)("inlineCode",{parentName:"p"},"YYYY-MM-DD HH:mm:ss")," but we want to expose it as something easier to work with, let's say a ",(0,s.kt)("inlineCode",{parentName:"p"},"number"),"."),(0,s.kt)("p",null,"In order to do it quickly, let's add ",(0,s.kt)("inlineCode",{parentName:"p"},"date-fns")," package:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"yarn add date-fns\n")),(0,s.kt)("p",null,"It has ",(0,s.kt)("inlineCode",{parentName:"p"},"format")," method that will help us to do conversions."),(0,s.kt)("p",null,"We need to add that logic to the ",(0,s.kt)("inlineCode",{parentName:"p"},"Chats.findMessagesByChat")," method."),(0,s.kt)("h4",{id:"server-step-1411-implement-cursor-based-pagination-in-messages"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/a37cdc14430226011d0b4c45e87c41a2f999212c"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 14.11: Implement cursor-based pagination in messages")),(0,s.kt)("h5",{id:"changed-moduleschatschatsproviderts-8"},"Changed modules","/","chats","/","chats.provider.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -2,6 +2,7 @@\n \u250a2\u250a2\u250aimport { QueryResult } from 'pg';\n \u250a3\u250a3\u250aimport sql from 'sql-template-strings';\n \u250a4\u250a4\u250aimport DataLoader from 'dataloader';\n+\u250a \u250a5\u250aimport format from 'date-fns/format';\n \u250a5\u250a6\u250aimport { Database } from '../common/database.provider';\n \u250a6\u250a7\u250aimport { PubSub } from '../common/pubsub.provider';\n \u250a7\u250a8\u250aimport { Chat } from '../../db';\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -107,12 +108,55 @@\n \u250a107\u250a108\u250a    return rows;\n \u250a108\u250a109\u250a  }\n \u250a109\u250a110\u250a\n-\u250a110\u250a   \u250a  async findMessagesByChat(chatId: string) {\n-\u250a111\u250a   \u250a    const { rows } = await this.db.query(\n-\u250a112\u250a   \u250a      sql`SELECT * FROM messages WHERE chat_id = ${chatId}`\n+\u250a   \u250a111\u250a  async findMessagesByChat({\n+\u250a   \u250a112\u250a    chatId,\n+\u250a   \u250a113\u250a    limit,\n+\u250a   \u250a114\u250a    after,\n+\u250a   \u250a115\u250a  }: {\n+\u250a   \u250a116\u250a    chatId: string;\n+\u250a   \u250a117\u250a    limit: number;\n+\u250a   \u250a118\u250a    after?: number | null;\n+\u250a   \u250a119\u250a  }): Promise<{\n+\u250a   \u250a120\u250a    hasMore: boolean;\n+\u250a   \u250a121\u250a    cursor: number | null;\n+\u250a   \u250a122\u250a    messages: any[];\n+\u250a   \u250a123\u250a  }> {\n+\u250a   \u250a124\u250a    const query = sql`SELECT * FROM messages`;\n+\u250a   \u250a125\u250a    query.append(` WHERE chat_id = ${chatId}`);\n+\u250a   \u250a126\u250a\n+\u250a   \u250a127\u250a    if (after) {\n+\u250a   \u250a128\u250a      // the created_at is the cursor\n+\u250a   \u250a129\u250a      query.append(` AND created_at < ${cursorToDate(after)}`);\n+\u250a   \u250a130\u250a    }\n+\u250a   \u250a131\u250a\n+\u250a   \u250a132\u250a    query.append(` ORDER BY created_at DESC LIMIT ${limit}`);\n+\u250a   \u250a133\u250a\n+\u250a   \u250a134\u250a    const { rows: messages } = await this.db.query(query);\n+\u250a   \u250a135\u250a\n+\u250a   \u250a136\u250a    if (!messages) {\n+\u250a   \u250a137\u250a      return {\n+\u250a   \u250a138\u250a        hasMore: false,\n+\u250a   \u250a139\u250a        cursor: null,\n+\u250a   \u250a140\u250a        messages: [],\n+\u250a   \u250a141\u250a      };\n+\u250a   \u250a142\u250a    }\n+\u250a   \u250a143\u250a\n+\u250a   \u250a144\u250a    // so we send them as old -> new\n+\u250a   \u250a145\u250a    messages.reverse();\n+\u250a   \u250a146\u250a\n+\u250a   \u250a147\u250a    // cursor is a number representation of created_at\n+\u250a   \u250a148\u250a    const cursor = messages.length ? new Date(messages[0].created_at).getTime() : 0;\n+\u250a   \u250a149\u250a    const { rows: next } = await this.db.query(\n+\u250a   \u250a150\u250a      sql`SELECT * FROM messages WHERE chat_id = ${chatId} AND created_at < ${cursorToDate(\n+\u250a   \u250a151\u250a        cursor\n+\u250a   \u250a152\u250a      )} ORDER BY created_at DESC LIMIT 1`\n \u250a113\u250a153\u250a    );\n \u250a114\u250a154\u250a\n-\u250a115\u250a   \u250a    return rows;\n+\u250a   \u250a155\u250a    return {\n+\u250a   \u250a156\u250a      hasMore: next.length === 1, // means there's no more messages\n+\u250a   \u250a157\u250a      cursor,\n+\u250a   \u250a158\u250a      messages,\n+\u250a   \u250a159\u250a    };\n \u250a116\u250a160\u250a  }\n \u250a117\u250a161\u250a\n \u250a118\u250a162\u250a  async lastMessage(chatId: string) {\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -280,3 +324,7 @@\n \u250a280\u250a324\u250a    }\n \u250a281\u250a325\u250a  }\n \u250a282\u250a326\u250a}\n+\u250a   \u250a327\u250a\n+\u250a   \u250a328\u250afunction cursorToDate(cursor: number) {\n+\u250a   \u250a329\u250a  return `'${format(cursor, 'yyyy-MM-dd HH:mm:ss')}'`;\n+\u250a   \u250a330\u250a}\n")),(0,s.kt)("h5",{id:"changed-moduleschatsindexts-1"},"Changed modules","/","chats","/","index.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -111,7 +111,11 @@\n \u250a111\u250a111\u250a    },\n \u250a112\u250a112\u250a\n \u250a113\u250a113\u250a    async messages(chat, args, { injector }) {\n-\u250a114\u250a   \u250a      return injector.get(Chats).findMessagesByChat(chat.id);\n+\u250a   \u250a114\u250a      return injector.get(Chats).findMessagesByChat({\n+\u250a   \u250a115\u250a        chatId: chat.id,\n+\u250a   \u250a116\u250a        limit: args.limit,\n+\u250a   \u250a117\u250a        after: args.after,\n+\u250a   \u250a118\u250a      });\n \u250a115\u250a119\u250a    },\n \u250a116\u250a120\u250a\n \u250a117\u250a121\u250a    async lastMessage(chat, args, { injector }) {\n")),(0,s.kt)("p",null,"Because the order of creation matters, messages are selected quite differently than before, we keep selecting all columns but records are ordered by the date of creation."),(0,s.kt)("p",null,"There's an interesting thing related to the cursor. If it's provided, we query for only those messages that happened before our cursor. This way we have a valid direction, fetching more messages means fetching older records."),(0,s.kt)("p",null,"The last message in the list becomes of course the ",(0,s.kt)("inlineCode",{parentName:"p"},"cursor"),"."),(0,s.kt)("p",null,"In order to calculate ",(0,s.kt)("inlineCode",{parentName:"p"},"hasMore")," we need to apply the same conditions as above but with ",(0,s.kt)("inlineCode",{parentName:"p"},"LIMIT 1")," and see if we get a result."),(0,s.kt)("p",null,"Since the API part is done, let's take care of something much more complicated, which is always the UI..."),(0,s.kt)("p",null,"Let's plan it first. We know we want to fetch more messages while scrolling up. That means, Infinite Scroll with a corresponding request each time we hit the top. Because we implemented prefetching, we need to know what's the ",(0,s.kt)("inlineCode",{parentName:"p"},"limit"),". React's Context might be helpful here. There was, of course, the change in GraphQL Schema we need to take care of too."),(0,s.kt)("h3",{id:"apply-schema-changes"},"Apply schema changes"),(0,s.kt)("p",null,"Since we know what the plan is, let's start with schema changes. The ",(0,s.kt)("inlineCode",{parentName:"p"},"Chat.messages")," is no longer a list, it's an object now."),(0,s.kt)("h4",{id:"client-step-156-apply-messagesresult-type"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/4f222574e97baeeae53a5aa210185d270697db9c"},(0,s.kt)("strong",{parentName:"a"},"Client")," Step 15.6: Apply MessagesResult type")),(0,s.kt)("h5",{id:"changed-srccomponentschatroomscreenindextsx-1"},"Changed src","/","components","/","ChatRoomScreen","/","index.tsx"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -27,7 +27,7 @@\n \u250a27\u250a27\u250a\n \u250a28\u250a28\u250a// eslint-disable-next-line\n \u250a29\u250a29\u250aconst getChatQuery = gql`\n-\u250a30\u250a  \u250a  query GetChat($chatId: ID!) {\n+\u250a  \u250a30\u250a  query GetChat($chatId: ID!, $limit: Int!, $after: Float) {\n \u250a31\u250a31\u250a    chat(chatId: $chatId) {\n \u250a32\u250a32\u250a      ...FullChat\n \u250a33\u250a33\u250a    }\n")),(0,s.kt)("h5",{id:"changed-srcgraphqlfragmentsfullchatfragmentts"},"Changed src","/","graphql","/","fragments","/","fullChat.fragment.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,14 +1,14 @@\n \u250a 1\u250a 1\u250aimport gql from 'graphql-tag';\n \u250a 2\u250a 2\u250aimport chat from './chat.fragment';\n-\u250a 3\u250a  \u250aimport message from './message.fragment';\n+\u250a  \u250a 3\u250aimport messagesResult from './messagesResult.fragment';\n \u250a 4\u250a 4\u250a\n \u250a 5\u250a 5\u250aexport default gql`\n \u250a 6\u250a 6\u250a  fragment FullChat on Chat {\n \u250a 7\u250a 7\u250a    ...Chat\n-\u250a 8\u250a  \u250a    messages {\n-\u250a 9\u250a  \u250a      ...Message\n+\u250a  \u250a 8\u250a    messages(limit: $limit, after: $after) @connection(key: \"messages\") {\n+\u250a  \u250a 9\u250a      ...MessagesResult\n \u250a10\u250a10\u250a    }\n \u250a11\u250a11\u250a  }\n \u250a12\u250a12\u250a  ${chat}\n-\u250a13\u250a  \u250a  ${message}\n+\u250a  \u250a13\u250a  ${messagesResult}\n \u250a14\u250a14\u250a`;\n")),(0,s.kt)("h5",{id:"added-srcgraphqlfragmentsmessagesresultfragmentts"},"Added src","/","graphql","/","fragments","/","messagesResult.fragment.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,13 @@\n+\u250a  \u250a 1\u250aimport gql from 'graphql-tag';\n+\u250a  \u250a 2\u250aimport message from './message.fragment';\n+\u250a  \u250a 3\u250a\n+\u250a  \u250a 4\u250aexport default gql`\n+\u250a  \u250a 5\u250a  fragment MessagesResult on MessagesResult {\n+\u250a  \u250a 6\u250a    cursor\n+\u250a  \u250a 7\u250a    hasMore\n+\u250a  \u250a 8\u250a    messages {\n+\u250a  \u250a 9\u250a      ...Message\n+\u250a  \u250a10\u250a    }\n+\u250a  \u250a11\u250a  }\n+\u250a  \u250a12\u250a  ${message}\n+\u250a  \u250a13\u250a`;\n")),(0,s.kt)("h5",{id:"changed-srcservicescacheservicets"},"Changed src","/","services","/","cache.service.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -64,9 +64,9 @@\n \u250a64\u250a64\u250a  if (fullChat === null || fullChat.messages === null) {\n \u250a65\u250a65\u250a    return;\n \u250a66\u250a66\u250a  }\n-\u250a67\u250a  \u250a  if (fullChat.messages.some((m: any) => m.id === message.id)) return;\n+\u250a  \u250a67\u250a  if (fullChat.messages.messages.some((m: any) => m.id === message.id)) return;\n \u250a68\u250a68\u250a\n-\u250a69\u250a  \u250a  fullChat.messages.push(message);\n+\u250a  \u250a69\u250a  fullChat.messages.messages.push(message);\n \u250a70\u250a70\u250a  fullChat.lastMessage = message;\n \u250a71\u250a71\u250a\n \u250a72\u250a72\u250a  client.writeFragment({\n")),(0,s.kt)("p",null,"Now we need reflect those changes in generated hooks by running:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"yarn codegen\n")),(0,s.kt)("p",null,"Okay, let's move on!"),(0,s.kt)("h3",{id:"infinite-scrolling"},"Infinite Scrolling"),(0,s.kt)("p",null,"Now this Infinite Scroll thing. The core concept is to ask for more data, once a user's scrollbar hits the top edge of the screen."),(0,s.kt)("h4",{id:"client-step-152-basics-for-infinite-scroll"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/3e75f85df26740b2daf452bb2106864a32c7464b"},(0,s.kt)("strong",{parentName:"a"},"Client")," Step 15.2: Basics for infinite scroll")),(0,s.kt)("h5",{id:"added-srchooksuse-infinite-scrollts"},"Added src","/","hooks","/","use-infinite-scroll.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,32 @@\n+\u250a  \u250a 1\u250aimport { useEffect, useCallback, RefObject } from 'react';\n+\u250a  \u250a 2\u250a\n+\u250a  \u250a 3\u250aexport const useInfiniteScroll = ({\n+\u250a  \u250a 4\u250a  ref,\n+\u250a  \u250a 5\u250a  onLoadMore,\n+\u250a  \u250a 6\u250a}: {\n+\u250a  \u250a 7\u250a  onLoadMore: Function;\n+\u250a  \u250a 8\u250a  ref: RefObject<HTMLElement>;\n+\u250a  \u250a 9\u250a}) => {\n+\u250a  \u250a10\u250a  const handleScroll = useCallback(() => {\n+\u250a  \u250a11\u250a    if (ref.current!.scrollTop === 0) {\n+\u250a  \u250a12\u250a      // loads more if scrolled to top\n+\u250a  \u250a13\u250a      onLoadMore();\n+\u250a  \u250a14\u250a    }\n+\u250a  \u250a15\u250a  }, [ref, onLoadMore]);\n+\u250a  \u250a16\u250a\n+\u250a  \u250a17\u250a  useEffect(() => {\n+\u250a  \u250a18\u250a    const elem = ref.current;\n+\u250a  \u250a19\u250a\n+\u250a  \u250a20\u250a    if (!elem) {\n+\u250a  \u250a21\u250a      return;\n+\u250a  \u250a22\u250a    }\n+\u250a  \u250a23\u250a\n+\u250a  \u250a24\u250a    elem.addEventListener('scroll', handleScroll);\n+\u250a  \u250a25\u250a\n+\u250a  \u250a26\u250a    return () => {\n+\u250a  \u250a27\u250a      elem!.removeEventListener('scroll', handleScroll);\n+\u250a  \u250a28\u250a    };\n+\u250a  \u250a29\u250a  }, [ref, handleScroll]);\n+\u250a  \u250a30\u250a};\n+\u250a  \u250a31\u250a\n+\u250a  \u250a32\u250aexport default useInfiniteScroll;\n")),(0,s.kt)("p",null,"Our ",(0,s.kt)("inlineCode",{parentName:"p"},"useInfiniteScroll")," hook requires:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"ref")," is a reference of a HTML element"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"onLoadMore")," calls the part component back and asks for data")),(0,s.kt)("p",null,"We used ",(0,s.kt)("inlineCode",{parentName:"p"},"useEffect")," to add and remove a scroll event listener. The function lives as long as ",(0,s.kt)("inlineCode",{parentName:"p"},"ref")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"onLoadMore")," stay the same, that's because we simply make use of them in ",(0,s.kt)("inlineCode",{parentName:"p"},"handleScroll")," function. The ",(0,s.kt)("inlineCode",{parentName:"p"},"handleScroll")," function calls ",(0,s.kt)("inlineCode",{parentName:"p"},"onLoadMore")," when a user scrolled to the top."),(0,s.kt)("p",null,"It all looks fine at first, but we still need to prevent calling back once fetching is in progress."),(0,s.kt)("h4",{id:"client-step-153-prevent-calling-back-once-fetching-is-in-progress"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/8503343961fb5aced873efda0cc4a9d7ee24e217"},(0,s.kt)("strong",{parentName:"a"},"Client")," Step 15.3: Prevent calling back once fetching is in progress")),(0,s.kt)("h5",{id:"changed-srchooksuse-infinite-scrollts"},"Changed src","/","hooks","/","use-infinite-scroll.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,4 +1,4 @@\n-\u250a1\u250a \u250aimport { useEffect, useCallback, RefObject } from 'react';\n+\u250a \u250a1\u250aimport { useState, useEffect, useCallback, RefObject } from 'react';\n \u250a2\u250a2\u250a\n \u250a3\u250a3\u250aexport const useInfiniteScroll = ({\n \u250a4\u250a4\u250a  ref,\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -7,12 +7,13 @@\n \u250a 7\u250a 7\u250a  onLoadMore: Function;\n \u250a 8\u250a 8\u250a  ref: RefObject<HTMLElement>;\n \u250a 9\u250a 9\u250a}) => {\n+\u250a  \u250a10\u250a  const [isFetching, setIsFetching] = useState(false);\n \u250a10\u250a11\u250a  const handleScroll = useCallback(() => {\n-\u250a11\u250a  \u250a    if (ref.current!.scrollTop === 0) {\n-\u250a12\u250a  \u250a      // loads more if scrolled to top\n-\u250a13\u250a  \u250a      onLoadMore();\n+\u250a  \u250a12\u250a    if (ref.current!.scrollTop === 0 && isFetching === false) {\n+\u250a  \u250a13\u250a      // starts to fetch if scrolled to top and fetching is not in progress\n+\u250a  \u250a14\u250a      setIsFetching(true);\n \u250a14\u250a15\u250a    }\n-\u250a15\u250a  \u250a  }, [ref, onLoadMore]);\n+\u250a  \u250a16\u250a  }, [ref, isFetching]);\n \u250a16\u250a17\u250a\n \u250a17\u250a18\u250a  useEffect(() => {\n \u250a18\u250a19\u250a    const elem = ref.current;\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -27,6 +28,13 @@\n \u250a27\u250a28\u250a      elem!.removeEventListener('scroll', handleScroll);\n \u250a28\u250a29\u250a    };\n \u250a29\u250a30\u250a  }, [ref, handleScroll]);\n+\u250a  \u250a31\u250a\n+\u250a  \u250a32\u250a  // loads more if fetching has started\n+\u250a  \u250a33\u250a  useEffect(() => {\n+\u250a  \u250a34\u250a    if (isFetching) {\n+\u250a  \u250a35\u250a      onLoadMore();\n+\u250a  \u250a36\u250a    }\n+\u250a  \u250a37\u250a  }, [isFetching, onLoadMore]);\n \u250a30\u250a38\u250a};\n \u250a31\u250a39\u250a\n \u250a32\u250a40\u250aexport default useInfiniteScroll;\n")),(0,s.kt)("p",null,"That's why ",(0,s.kt)("inlineCode",{parentName:"p"},"isFetching")," state is necessary but as you can tell, we don't set it to ",(0,s.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,s.kt)("h4",{id:"client-step-154-allow-to-notify-when-finished"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/471ef06986a3cb90e0e32401cb5ffdb5bb365071"},(0,s.kt)("strong",{parentName:"a"},"Client")," Step 15.4: Allow to notify when finished")),(0,s.kt)("h5",{id:"changed-srchooksuse-infinite-scrollts-1"},"Changed src","/","hooks","/","use-infinite-scroll.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -6,7 +6,7 @@\n \u250a 6\u250a 6\u250a}: {\n \u250a 7\u250a 7\u250a  onLoadMore: Function;\n \u250a 8\u250a 8\u250a  ref: RefObject<HTMLElement>;\n-\u250a 9\u250a  \u250a}) => {\n+\u250a  \u250a 9\u250a}): [boolean, () => void] => {\n \u250a10\u250a10\u250a  const [isFetching, setIsFetching] = useState(false);\n \u250a11\u250a11\u250a  const handleScroll = useCallback(() => {\n \u250a12\u250a12\u250a    if (ref.current!.scrollTop === 0 && isFetching === false) {\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -35,6 +35,12 @@\n \u250a35\u250a35\u250a      onLoadMore();\n \u250a36\u250a36\u250a    }\n \u250a37\u250a37\u250a  }, [isFetching, onLoadMore]);\n+\u250a  \u250a38\u250a\n+\u250a  \u250a39\u250a  const stopFetching = useCallback(() => {\n+\u250a  \u250a40\u250a    setIsFetching(false);\n+\u250a  \u250a41\u250a  }, []);\n+\u250a  \u250a42\u250a\n+\u250a  \u250a43\u250a  return [isFetching, stopFetching];\n \u250a38\u250a44\u250a};\n \u250a39\u250a45\u250a\n \u250a40\u250a46\u250aexport default useInfiniteScroll;\n")),(0,s.kt)("p",null,"We want the consumer of the hook to tell it when fetching is finished, that's why we expose the state with ",(0,s.kt)("inlineCode",{parentName:"p"},"stopFetching")," function."),(0,s.kt)("p",null,"The next issue that appears right away is related to the case when there's no more data to fetch."),(0,s.kt)("h4",{id:"client-step-155-fetch-only-if-there-is-more-data"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/e8602619923063f43801af165d50ff2be4b7a836"},(0,s.kt)("strong",{parentName:"a"},"Client")," Step 15.5: Fetch only if there is more data")),(0,s.kt)("h5",{id:"changed-srchooksuse-infinite-scrollts-2"},"Changed src","/","hooks","/","use-infinite-scroll.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -2,18 +2,20 @@\n \u250a 2\u250a 2\u250a\n \u250a 3\u250a 3\u250aexport const useInfiniteScroll = ({\n \u250a 4\u250a 4\u250a  ref,\n+\u250a  \u250a 5\u250a  hasMore,\n \u250a 5\u250a 6\u250a  onLoadMore,\n \u250a 6\u250a 7\u250a}: {\n \u250a 7\u250a 8\u250a  onLoadMore: Function;\n+\u250a  \u250a 9\u250a  hasMore: boolean;\n \u250a 8\u250a10\u250a  ref: RefObject<HTMLElement>;\n \u250a 9\u250a11\u250a}): [boolean, () => void] => {\n \u250a10\u250a12\u250a  const [isFetching, setIsFetching] = useState(false);\n \u250a11\u250a13\u250a  const handleScroll = useCallback(() => {\n-\u250a12\u250a  \u250a    if (ref.current!.scrollTop === 0 && isFetching === false) {\n-\u250a13\u250a  \u250a      // starts to fetch if scrolled to top and fetching is not in progress\n+\u250a  \u250a14\u250a    if (ref.current!.scrollTop === 0 && isFetching === false && hasMore) {\n+\u250a  \u250a15\u250a      // starts to fetch if scrolled to top, fetching is not in progress and has more data\n \u250a14\u250a16\u250a      setIsFetching(true);\n \u250a15\u250a17\u250a    }\n-\u250a16\u250a  \u250a  }, [ref, isFetching]);\n+\u250a  \u250a18\u250a  }, [ref, isFetching, hasMore]);\n \u250a17\u250a19\u250a\n \u250a18\u250a20\u250a  useEffect(() => {\n \u250a19\u250a21\u250a    const elem = ref.current;\n")),(0,s.kt)("p",null,"Pfff... The hook part is done!"),(0,s.kt)("h3",{id:"pagination-1"},"Pagination"),(0,s.kt)("p",null,"Pagination is partially implemented thanks to Infinite Scrolling but the thing we need to still apply is React's context. It will be a central place of storing ",(0,s.kt)("inlineCode",{parentName:"p"},"limit")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"after")," values, so they could be shared across multiple components and not passed directly from one to another."),(0,s.kt)("h4",{id:"client-step-157-implement-pagination-with-context-and-hooks"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/68ee6d9de15f473d21e103a9757846c4894f0c9d"},(0,s.kt)("strong",{parentName:"a"},"Client")," Step 15.7: Implement pagination with context and hooks")),(0,s.kt)("h5",{id:"changed-srccomponentschatroomscreenindextsx-2"},"Changed src","/","components","/","ChatRoomScreen","/","index.tsx"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,6 +1,6 @@\n \u250a1\u250a1\u250aimport gql from 'graphql-tag';\n \u250a2\u250a2\u250aimport React from 'react';\n-\u250a3\u250a \u250aimport { useCallback } from 'react';\n+\u250a \u250a3\u250aimport { useCallback, useState, useContext, useEffect } from 'react';\n \u250a4\u250a4\u250aimport { Redirect } from 'react-router-dom';\n \u250a5\u250a5\u250aimport { useApolloClient } from '@apollo/react-hooks';\n \u250a6\u250a6\u250aimport styled from 'styled-components';\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -45,6 +45,48 @@\n \u250a45\u250a45\u250a  ${fragments.message}\n \u250a46\u250a46\u250a`;\n \u250a47\u250a47\u250a\n+\u250a  \u250a48\u250aconst PaginationContext = React.createContext({\n+\u250a  \u250a49\u250a  after: 0,\n+\u250a  \u250a50\u250a  limit: 20,\n+\u250a  \u250a51\u250a  /**\n+\u250a  \u250a52\u250a   * Sets new cursor\n+\u250a  \u250a53\u250a   */\n+\u250a  \u250a54\u250a  setAfter: (after: number) => {},\n+\u250a  \u250a55\u250a  /**\n+\u250a  \u250a56\u250a   * Resets `after` value to its inital state (null) so\n+\u250a  \u250a57\u250a   */\n+\u250a  \u250a58\u250a  reset: () => {},\n+\u250a  \u250a59\u250a});\n+\u250a  \u250a60\u250a\n+\u250a  \u250a61\u250aconst usePagination = () => {\n+\u250a  \u250a62\u250a  const pagination = useContext(PaginationContext);\n+\u250a  \u250a63\u250a\n+\u250a  \u250a64\u250a  // Resets the pagination every time a component did unmount\n+\u250a  \u250a65\u250a  useEffect(() => {\n+\u250a  \u250a66\u250a    return () => {\n+\u250a  \u250a67\u250a      pagination.reset();\n+\u250a  \u250a68\u250a    };\n+\u250a  \u250a69\u250a  }, [pagination]);\n+\u250a  \u250a70\u250a\n+\u250a  \u250a71\u250a  return pagination;\n+\u250a  \u250a72\u250a};\n+\u250a  \u250a73\u250a\n+\u250a  \u250a74\u250aexport const ChatPaginationProvider = ({ children }: { children: any }) => {\n+\u250a  \u250a75\u250a  const [after, setAfter] = useState<number | null>(null);\n+\u250a  \u250a76\u250a\n+\u250a  \u250a77\u250a  return (\n+\u250a  \u250a78\u250a    <PaginationContext.Provider\n+\u250a  \u250a79\u250a      value={{\n+\u250a  \u250a80\u250a        limit: 20,\n+\u250a  \u250a81\u250a        after: after!,\n+\u250a  \u250a82\u250a        setAfter,\n+\u250a  \u250a83\u250a        reset: () => setAfter(null),\n+\u250a  \u250a84\u250a      }}>\n+\u250a  \u250a85\u250a      {children}\n+\u250a  \u250a86\u250a    </PaginationContext.Provider>\n+\u250a  \u250a87\u250a  );\n+\u250a  \u250a88\u250a};\n+\u250a  \u250a89\u250a\n \u250a48\u250a90\u250aexport const useGetChatPrefetch = () => {\n \u250a49\u250a91\u250a  const client = useApolloClient();\n")),(0,s.kt)("p",null,"We implemented three things:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"PaginationContext")," is simple, it stores the values but also allows to set a new one for ",(0,s.kt)("inlineCode",{parentName:"li"},"after")," or even bring it all back to the initial state."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"usePagination")," hook is there so components could use ",(0,s.kt)("inlineCode",{parentName:"li"},"PaginationContext")," and to make sure we reset it when component unmounts."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"ChatPaginationProvider")," provides the logic and core functionality")),(0,s.kt)("p",null,"Since the pagination is almost ready, let's make use of it in ",(0,s.kt)("inlineCode",{parentName:"p"},"useGetChatPrefetch")," hook and ",(0,s.kt)("inlineCode",{parentName:"p"},"ChatRoomScreen")," component."),(0,s.kt)("h4",{id:"client-step-158-use-pagination-limit-and-after-props"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/317c573659315976ac7fc1d67cb5f0f40bd8c6d9"},(0,s.kt)("strong",{parentName:"a"},"Client")," Step 15.8: Use pagination limit and after props")),(0,s.kt)("h5",{id:"changed-srccomponentschatroomscreenindextsx-3"},"Changed src","/","components","/","ChatRoomScreen","/","index.tsx"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -89,12 +89,15 @@\n \u250a 89\u250a 89\u250a\n \u250a 90\u250a 90\u250aexport const useGetChatPrefetch = () => {\n \u250a 91\u250a 91\u250a  const client = useApolloClient();\n+\u250a   \u250a 92\u250a  const { limit, after } = usePagination();\n \u250a 92\u250a 93\u250a\n \u250a 93\u250a 94\u250a  return (chatId: string) => {\n \u250a 94\u250a 95\u250a    client.query<GetChatQuery, GetChatQueryVariables>({\n \u250a 95\u250a 96\u250a      query: GetChatDocument,\n \u250a 96\u250a 97\u250a      variables: {\n \u250a 97\u250a 98\u250a        chatId,\n+\u250a   \u250a 99\u250a        after,\n+\u250a   \u250a100\u250a        limit,\n \u250a 98\u250a101\u250a      },\n \u250a 99\u250a102\u250a    });\n \u250a100\u250a103\u250a  };\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -109,8 +112,9 @@\n \u250a109\u250a112\u250a  history,\n \u250a110\u250a113\u250a  chatId,\n \u250a111\u250a114\u250a}) => {\n+\u250a   \u250a115\u250a  const { after, limit } = usePagination();\n \u250a112\u250a116\u250a  const { data, loading } = useGetChatQuery({\n-\u250a113\u250a   \u250a    variables: { chatId },\n+\u250a   \u250a117\u250a    variables: { chatId, after, limit },\n \u250a114\u250a118\u250a  });\n \u250a115\u250a119\u250a\n \u250a116\u250a120\u250a  const [addMessage] = useAddMessageMutation();\n")),(0,s.kt)("p",null,"This won't work yet because there's nothing that creates the context."),(0,s.kt)("h4",{id:"client-step-159-use-chatpaginationprovider"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/f69187858e084381f217d7dbe354f3ee921b68d5"},(0,s.kt)("strong",{parentName:"a"},"Client")," Step 15.9: Use ChatPaginationProvider")),(0,s.kt)("h5",{id:"changed-srccomponentschatroomscreenindextsx-4"},"Changed src","/","components","/","ChatRoomScreen","/","index.tsx"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -108,10 +108,7 @@\n \u250a108\u250a108\u250a  history: History;\n \u250a109\u250a109\u250a}\n \u250a110\u250a110\u250a\n-\u250a111\u250a   \u250aconst ChatRoomScreen: React.FC<ChatRoomScreenParams> = ({\n-\u250a112\u250a   \u250a  history,\n-\u250a113\u250a   \u250a  chatId,\n-\u250a114\u250a   \u250a}) => {\n+\u250a   \u250a111\u250aconst ChatRoom: React.FC<ChatRoomScreenParams> = ({ history, chatId }) => {\n \u250a115\u250a112\u250a  const { after, limit } = usePagination();\n \u250a116\u250a113\u250a  const { data, loading } = useGetChatQuery({\n \u250a117\u250a114\u250a    variables: { chatId, after, limit },\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -176,4 +173,15 @@\n \u250a176\u250a173\u250a  );\n \u250a177\u250a174\u250a};\n \u250a178\u250a175\u250a\n+\u250a   \u250a176\u250aconst ChatRoomScreen: React.FC<ChatRoomScreenParams> = ({\n+\u250a   \u250a177\u250a  history,\n+\u250a   \u250a178\u250a  chatId,\n+\u250a   \u250a179\u250a}) => {\n+\u250a   \u250a180\u250a  return (\n+\u250a   \u250a181\u250a    <ChatPaginationProvider>\n+\u250a   \u250a182\u250a      <ChatRoom history={history} chatId={chatId} />\n+\u250a   \u250a183\u250a    </ChatPaginationProvider>\n+\u250a   \u250a184\u250a  );\n+\u250a   \u250a185\u250a};\n+\u250a   \u250a186\u250a\n \u250a179\u250a187\u250aexport default ChatRoomScreen;\n")),(0,s.kt)("p",null,"We had to split the ",(0,s.kt)("inlineCode",{parentName:"p"},"ChatRoomScreen")," into two pieces. One that includes ",(0,s.kt)("inlineCode",{parentName:"p"},"ChatPaginationProvider")," and produces ",(0,s.kt)("inlineCode",{parentName:"p"},"chatId")," and the other that keeps pretty much everything else. This way the tree of child components, starting from ",(0,s.kt)("inlineCode",{parentName:"p"},"ChatRoom")," share the same context."),(0,s.kt)("h3",{id:"fetching-more-messages"},"Fetching more messages"),(0,s.kt)("p",null,"Everything is set up, we can now move on and consume the ",(0,s.kt)("inlineCode",{parentName:"p"},"useInfiniteScroll")," in the ",(0,s.kt)("inlineCode",{parentName:"p"},"MessagesList")," component."),(0,s.kt)("h4",{id:"client-step-1510-make-use-of-infinite-scroll-in-messageslist-component"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/c8ad92337778f38ae45c5cf9eeea1f9d4430dfb7"},(0,s.kt)("strong",{parentName:"a"},"Client")," Step 15.10: Make use of infinite scroll in MessagesList component")),(0,s.kt)("h5",{id:"changed-srccomponentschatroomscreenmessageslisttsx"},"Changed src","/","components","/","ChatRoomScreen","/","MessagesList.tsx"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -3,14 +3,27 @@\n \u250a 3\u250a 3\u250aimport { useEffect, useRef } from 'react';\n \u250a 4\u250a 4\u250aimport ReactDOM from 'react-dom';\n \u250a 5\u250a 5\u250aimport styled, { css } from 'styled-components';\n+\u250a  \u250a 6\u250aimport { useInfiniteScroll } from '../../hooks/use-infinite-scroll';\n \u250a 6\u250a 7\u250a\n \u250a 7\u250a 8\u250aconst Container = styled.div`\n+\u250a  \u250a 9\u250a  position: relative;\n \u250a 8\u250a10\u250a  display: block;\n \u250a 9\u250a11\u250a  flex: 2;\n \u250a10\u250a12\u250a  overflow-y: overlay;\n \u250a11\u250a13\u250a  padding: 0 15px;\n \u250a12\u250a14\u250a`;\n \u250a13\u250a15\u250a\n+\u250a  \u250a16\u250aconst LoadingMore = styled.div`\n+\u250a  \u250a17\u250a  height: 30px;\n+\u250a  \u250a18\u250a  line-height: 30px;\n+\u250a  \u250a19\u250a  position: absolute;\n+\u250a  \u250a20\u250a  top: 0;\n+\u250a  \u250a21\u250a  right: 0;\n+\u250a  \u250a22\u250a  bottom: 0;\n+\u250a  \u250a23\u250a  left: 0;\n+\u250a  \u250a24\u250a  text-align: center;\n+\u250a  \u250a25\u250a`;\n+\u250a  \u250a26\u250a\n \u250a14\u250a27\u250atype StyledProp = {\n \u250a15\u250a28\u250a  isMine: any;\n \u250a16\u250a29\u250a};\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -89,19 +102,36 @@\n \u250a 89\u250a102\u250a}\n \u250a 90\u250a103\u250ainterface MessagesListProps {\n \u250a 91\u250a104\u250a  messages: Array<Message>;\n+\u250a   \u250a105\u250a  loadMore: Function;\n+\u250a   \u250a106\u250a  hasMore: boolean;\n \u250a 92\u250a107\u250a}\n \u250a 93\u250a108\u250a\n-\u250a 94\u250a   \u250aconst MessagesList: React.FC<MessagesListProps> = ({ messages }) => {\n-\u250a 95\u250a   \u250a  const selfRef = useRef(null);\n+\u250a   \u250a109\u250aconst MessagesList: React.FC<MessagesListProps> = ({\n+\u250a   \u250a110\u250a  messages,\n+\u250a   \u250a111\u250a  loadMore,\n+\u250a   \u250a112\u250a  hasMore,\n+\u250a   \u250a113\u250a}) => {\n+\u250a   \u250a114\u250a  const selfRef = useRef<HTMLDivElement>(null);\n+\u250a   \u250a115\u250a  const [fetching, stopFetching] = useInfiniteScroll({\n+\u250a   \u250a116\u250a    onLoadMore: loadMore,\n+\u250a   \u250a117\u250a    hasMore,\n+\u250a   \u250a118\u250a    ref: selfRef!,\n+\u250a   \u250a119\u250a  });\n \u250a 96\u250a120\u250a\n \u250a 97\u250a121\u250a  useEffect(() => {\n \u250a 98\u250a122\u250a    if (!selfRef.current) return;\n+\u250a   \u250a123\u250a\n+\u250a   \u250a124\u250a    if (fetching) {\n+\u250a   \u250a125\u250a      stopFetching();\n+\u250a   \u250a126\u250a    }\n+\u250a   \u250a127\u250a\n \u250a 99\u250a128\u250a    const selfDOMNode = ReactDOM.findDOMNode(selfRef.current) as HTMLElement;\n \u250a100\u250a129\u250a    selfDOMNode.scrollTop = Number.MAX_SAFE_INTEGER;\n-\u250a101\u250a   \u250a  }, [messages.length]);\n+\u250a   \u250a130\u250a  }, [messages.length, selfRef, fetching, stopFetching]);\n \u250a102\u250a131\u250a\n \u250a103\u250a132\u250a  return (\n \u250a104\u250a133\u250a    <Container ref={selfRef}>\n+\u250a   \u250a134\u250a      {fetching && <LoadingMore>{'Loading more messages...'}</LoadingMore>}\n \u250a105\u250a135\u250a      {messages.map((message: any) => (\n \u250a106\u250a136\u250a        <MessageItem\n \u250a107\u250a137\u250a          data-testid=\"message-item\"\n")),(0,s.kt)("p",null,"We added the ",(0,s.kt)("inlineCode",{parentName:"p"},"LoadingMore")," component with ",(0,s.kt)("em",{parentName:"p"},"Loading more messages...")," text in it that pops out when fetching is in progress.\nBecause the ",(0,s.kt)("inlineCode",{parentName:"p"},"MessagesList")," is not responsible of quering data we don't know exactly when it's completed but we can assume, it happens once the length of ",(0,s.kt)("inlineCode",{parentName:"p"},"messages")," changes.\nWe also pass ",(0,s.kt)("inlineCode",{parentName:"p"},"onLoadMore")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"hasMore")," props to the parent component and the ",(0,s.kt)("inlineCode",{parentName:"p"},"useInfiniteScroll")," uses ",(0,s.kt)("inlineCode",{parentName:"p"},"MessagesList")," as the element we're going to scroll in."),(0,s.kt)("p",null,"There's also one more thing that could be turned into a hook, it's the logic responsible for scrolling to bottom of the page, every time ",(0,s.kt)("inlineCode",{parentName:"p"},"messages")," changes."),(0,s.kt)("h4",{id:"client-step-1511-implement-a-hook-responsible-for-scrolling"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/5627ba44c41cb657b4e985dee07ba6996e375850"},(0,s.kt)("strong",{parentName:"a"},"Client")," Step 15.11: Implement a hook responsible for scrolling")),(0,s.kt)("h5",{id:"changed-srccomponentschatroomscreenmessageslisttsx-1"},"Changed src","/","components","/","ChatRoomScreen","/","MessagesList.tsx"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,9 +1,9 @@\n \u250a1\u250a1\u250aimport moment from 'moment';\n \u250a2\u250a2\u250aimport React from 'react';\n \u250a3\u250a3\u250aimport { useEffect, useRef } from 'react';\n-\u250a4\u250a \u250aimport ReactDOM from 'react-dom';\n \u250a5\u250a4\u250aimport styled, { css } from 'styled-components';\n \u250a6\u250a5\u250aimport { useInfiniteScroll } from '../../hooks/use-infinite-scroll';\n+\u250a \u250a6\u250aimport { useAdjustedScroll } from '../../hooks/use-adjusted-scroll';\n \u250a7\u250a7\u250a\n \u250a8\u250a8\u250aconst Container = styled.div`\n \u250a9\u250a9\u250a  position: relative;\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -117,17 +117,19 @@\n \u250a117\u250a117\u250a    hasMore,\n \u250a118\u250a118\u250a    ref: selfRef!,\n \u250a119\u250a119\u250a  });\n+\u250a   \u250a120\u250a  const adjustScroll = useAdjustedScroll(selfRef);\n \u250a120\u250a121\u250a\n \u250a121\u250a122\u250a  useEffect(() => {\n \u250a122\u250a123\u250a    if (!selfRef.current) return;\n \u250a123\u250a124\u250a\n \u250a124\u250a125\u250a    if (fetching) {\n \u250a125\u250a126\u250a      stopFetching();\n+\u250a   \u250a127\u250a      adjustScroll();\n+\u250a   \u250a128\u250a    } else {\n+\u250a   \u250a129\u250a      // scroll to the most recent message\n+\u250a   \u250a130\u250a      adjustScroll(true);\n \u250a126\u250a131\u250a    }\n-\u250a127\u250a   \u250a\n-\u250a128\u250a   \u250a    const selfDOMNode = ReactDOM.findDOMNode(selfRef.current) as HTMLElement;\n-\u250a129\u250a   \u250a    selfDOMNode.scrollTop = Number.MAX_SAFE_INTEGER;\n-\u250a130\u250a   \u250a  }, [messages.length, selfRef, fetching, stopFetching]);\n+\u250a   \u250a132\u250a  }, [messages.length, selfRef, fetching, stopFetching, adjustScroll]);\n \u250a131\u250a133\u250a\n \u250a132\u250a134\u250a  return (\n \u250a133\u250a135\u250a    <Container ref={selfRef}>\n")),(0,s.kt)("h5",{id:"added-srchooksuse-adjusted-scrollts"},"Added src","/","hooks","/","use-adjusted-scroll.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,37 @@\n+\u250a  \u250a 1\u250aimport { useState, useCallback, RefObject } from 'react';\n+\u250a  \u250a 2\u250aimport * as ReactDOM from 'react-dom';\n+\u250a  \u250a 3\u250a\n+\u250a  \u250a 4\u250aexport const useAdjustedScroll = (ref: RefObject<HTMLElement>) => {\n+\u250a  \u250a 5\u250a  const [previousScroll, setPreviousScroll] = useState<{\n+\u250a  \u250a 6\u250a    top: number;\n+\u250a  \u250a 7\u250a    height: number;\n+\u250a  \u250a 8\u250a  }>();\n+\u250a  \u250a 9\u250a\n+\u250a  \u250a10\u250a  /**\n+\u250a  \u250a11\u250a   * Scrolls to the previous position or completely to bottom (on demand)\n+\u250a  \u250a12\u250a   */\n+\u250a  \u250a13\u250a  const adjust = useCallback(\n+\u250a  \u250a14\u250a    (scrollToBottom?: boolean) => {\n+\u250a  \u250a15\u250a      if (!ref.current) return;\n+\u250a  \u250a16\u250a\n+\u250a  \u250a17\u250a      const node = ReactDOM.findDOMNode(ref.current) as HTMLElement;\n+\u250a  \u250a18\u250a      const height =\n+\u250a  \u250a19\u250a        !scrollToBottom && previousScroll\n+\u250a  \u250a20\u250a          ? previousScroll.height\n+\u250a  \u250a21\u250a          : node.clientHeight;\n+\u250a  \u250a22\u250a\n+\u250a  \u250a23\u250a      node.scrollTop = node.scrollHeight - height;\n+\u250a  \u250a24\u250a\n+\u250a  \u250a25\u250a      // saves current scroll details\n+\u250a  \u250a26\u250a      if (previousScroll && node.scrollTop !== previousScroll.top) {\n+\u250a  \u250a27\u250a        setPreviousScroll({\n+\u250a  \u250a28\u250a          top: node.scrollTop,\n+\u250a  \u250a29\u250a          height: node.scrollHeight,\n+\u250a  \u250a30\u250a        });\n+\u250a  \u250a31\u250a      }\n+\u250a  \u250a32\u250a    },\n+\u250a  \u250a33\u250a    [ref, previousScroll]\n+\u250a  \u250a34\u250a  );\n+\u250a  \u250a35\u250a\n+\u250a  \u250a36\u250a  return adjust;\n+\u250a  \u250a37\u250a};\n")),(0,s.kt)("p",null,"We also added some extra functionality there. Because we don't want to scroll to bottom when a new message is added, the function returned by ",(0,s.kt)("inlineCode",{parentName:"p"},"useAdjustedScroll")," accepts now an argument."),(0,s.kt)("p",null,"We did the ",(0,s.kt)("inlineCode",{parentName:"p"},"MessagesList"),", now let's move onto real data and the ",(0,s.kt)("inlineCode",{parentName:"p"},"ChatRoom")," component."),(0,s.kt)("h4",{id:"client-step-1512-implement-pagination-in-chatroom-component"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/0c17919851ebec980f35788957632c4d18e4cae5"},(0,s.kt)("strong",{parentName:"a"},"Client")," Step 15.12: Implement pagination in ChatRoom component")),(0,s.kt)("h5",{id:"changed-srccomponentschatroomscreenindextsx-5"},"Changed src","/","components","/","ChatRoomScreen","/","index.tsx"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -109,7 +109,7 @@\n \u250a109\u250a109\u250a}\n \u250a110\u250a110\u250a\n \u250a111\u250a111\u250aconst ChatRoom: React.FC<ChatRoomScreenParams> = ({ history, chatId }) => {\n-\u250a112\u250a   \u250a  const { after, limit } = usePagination();\n+\u250a   \u250a112\u250a  const { after, limit, setAfter } = usePagination();\n \u250a113\u250a113\u250a  const { data, loading } = useGetChatQuery({\n \u250a114\u250a114\u250a    variables: { chatId, after, limit },\n \u250a115\u250a115\u250a  });\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -150,6 +150,14 @@\n \u250a150\u250a150\u250a    [data, chatId, addMessage]\n \u250a151\u250a151\u250a  );\n \u250a152\u250a152\u250a\n+\u250a   \u250a153\u250a  useEffect(() => {\n+\u250a   \u250a154\u250a    if (!after) {\n+\u250a   \u250a155\u250a      return;\n+\u250a   \u250a156\u250a    }\n+\u250a   \u250a157\u250a\n+\u250a   \u250a158\u250a    // every time after changes its value, fetch more messages\n+\u250a   \u250a159\u250a  }, [after]);\n+\u250a   \u250a160\u250a\n \u250a153\u250a161\u250a  if (data === undefined) {\n \u250a154\u250a162\u250a    return null;\n \u250a155\u250a163\u250a  }\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -167,7 +175,13 @@\n \u250a167\u250a175\u250a  return (\n \u250a168\u250a176\u250a    <Container>\n \u250a169\u250a177\u250a      {chat?.id && <ChatNavbar chat={chat} history={history} />}\n-\u250a170\u250a   \u250a      {chat?.messages && <MessagesList messages={chat.messages} />}\n+\u250a   \u250a178\u250a      {chat?.messages && (\n+\u250a   \u250a179\u250a        <MessagesList\n+\u250a   \u250a180\u250a          messages={chat.messages.messages}\n+\u250a   \u250a181\u250a          hasMore={chat.messages.hasMore}\n+\u250a   \u250a182\u250a          loadMore={() => setAfter(chat.messages.cursor!)}\n+\u250a   \u250a183\u250a        />\n+\u250a   \u250a184\u250a      )}\n \u250a171\u250a185\u250a      <MessageInput onSendMessage={onSendMessage} />\n \u250a172\u250a186\u250a    </Container>\n \u250a173\u250a187\u250a  );\n")),(0,s.kt)("p",null,"As you see above, every time the ",(0,s.kt)("inlineCode",{parentName:"p"},"MessagesList")," asks for more messages, the ",(0,s.kt)("inlineCode",{parentName:"p"},"after")," changes its value to ",(0,s.kt)("inlineCode",{parentName:"p"},"chat.messages.cursor"),' which means that\'s a new "end" of the list and we need to fill it up.'),(0,s.kt)("p",null,"Right now we just have a logic and a place to do it but we still need to make a GraphQL call."),(0,s.kt)("p",null,"Fortunately, Apollo lets you do pagination with a method called ",(0,s.kt)("inlineCode",{parentName:"p"},"fetchMore"),". You need to specify what query and variables to use for the update, and how to merge the new query result with the existing data on the client. How exactly you do that will determine what kind of pagination you are implementing, in our case it's cursor-based."),(0,s.kt)("p",null,"But there's a catch!"),(0,s.kt)("p",null,"It's related to how Apollo stores query results in cache. When we update the variables, in our case it's the ",(0,s.kt)("inlineCode",{parentName:"p"},"after")," that changes quite a lot, a new record is created that is totally unrelated to the original query. That's because Apollo uses a combination of variables and query string to produce a key."),(0,s.kt)("p",null,"An example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-graphql"},"{\n  query getUser($id: ID!) {\n    user(id: $id) {\n      name\n    }\n  }\n}\n")),(0,s.kt)("p",null,"The result of ",(0,s.kt)("inlineCode",{parentName:"p"},"getUser")," query will be saved under ",(0,s.kt)("inlineCode",{parentName:"p"},'user({"id":2})')," key."),(0,s.kt)("p",null,"This is a huge problem, it breaks imperative store updates but that's why ",(0,s.kt)("inlineCode",{parentName:"p"},"@connection")," directive exists. It directs Apollo to use a stable store key for paginated queries, so every ",(0,s.kt)("inlineCode",{parentName:"p"},"useQuery()")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"fetchMore()")," is being placed in the same space."),(0,s.kt)("p",null,"With all that knowledge, let's implement the last puzzle piece!"),(0,s.kt)("h4",{id:"client-step-1513-use-fetchmore-to-load-more-messages"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/0ac609904352fc022451e5ce9443611b3698ff4e"},(0,s.kt)("strong",{parentName:"a"},"Client")," Step 15.13: Use fetchMore to load more messages")),(0,s.kt)("h5",{id:"changed-srccomponentschatroomscreenindextsx-6"},"Changed src","/","components","/","ChatRoomScreen","/","index.tsx"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -110,7 +110,7 @@\n \u250a110\u250a110\u250a\n \u250a111\u250a111\u250aconst ChatRoom: React.FC<ChatRoomScreenParams> = ({ history, chatId }) => {\n \u250a112\u250a112\u250a  const { after, limit, setAfter } = usePagination();\n-\u250a113\u250a   \u250a  const { data, loading } = useGetChatQuery({\n+\u250a   \u250a113\u250a  const { data, loading, fetchMore } = useGetChatQuery({\n \u250a114\u250a114\u250a    variables: { chatId, after, limit },\n \u250a115\u250a115\u250a  });\n \u250a116\u250a116\u250a\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -156,7 +156,30 @@\n \u250a156\u250a156\u250a    }\n \u250a157\u250a157\u250a\n \u250a158\u250a158\u250a    // every time after changes its value, fetch more messages\n-\u250a159\u250a   \u250a  }, [after]);\n+\u250a   \u250a159\u250a    fetchMore({\n+\u250a   \u250a160\u250a      variables: {\n+\u250a   \u250a161\u250a        after,\n+\u250a   \u250a162\u250a        limit,\n+\u250a   \u250a163\u250a      },\n+\u250a   \u250a164\u250a      updateQuery(prev, { fetchMoreResult }) {\n+\u250a   \u250a165\u250a        const messages = [\n+\u250a   \u250a166\u250a          ...fetchMoreResult!.chat!.messages.messages,\n+\u250a   \u250a167\u250a          ...prev.chat!.messages.messages,\n+\u250a   \u250a168\u250a        ];\n+\u250a   \u250a169\u250a\n+\u250a   \u250a170\u250a        return {\n+\u250a   \u250a171\u250a          ...prev,\n+\u250a   \u250a172\u250a          chat: {\n+\u250a   \u250a173\u250a            ...prev.chat!,\n+\u250a   \u250a174\u250a            messages: {\n+\u250a   \u250a175\u250a              ...fetchMoreResult!.chat!.messages,\n+\u250a   \u250a176\u250a              messages,\n+\u250a   \u250a177\u250a            },\n+\u250a   \u250a178\u250a          },\n+\u250a   \u250a179\u250a        };\n+\u250a   \u250a180\u250a      },\n+\u250a   \u250a181\u250a    });\n+\u250a   \u250a182\u250a  }, [after, limit, fetchMore]);\n \u250a160\u250a183\u250a\n \u250a161\u250a184\u250a  if (data === undefined) {\n \u250a162\u250a185\u250a    return null;\n")),(0,s.kt)("p",null,"As you see, we mutate the store as usual and we put fetched messages before the existing ones. Remember, it's from older to newer."),(0,s.kt)("h3",{id:"looking-at-the-bundle-size"},"Looking at the bundle size"),(0,s.kt)("p",null,"We can't of course forget about one of the most important aspects of optimization, the size of the application. As bundle size increases, both the parsing time and the time of the request takes longer."),(0,s.kt)("p",null,"How can we check what libraries and source files are shipped within the produced bundle?"),(0,s.kt)("p",null,"There are many tools that analyze it for us but we're going to use only one of them, just for educational purpose."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"  $ yarn add -D source-map-explorer\n")),(0,s.kt)("p",null,"We're going to add the ",(0,s.kt)("inlineCode",{parentName:"p"},"size")," npm script in which we point the ",(0,s.kt)("inlineCode",{parentName:"p"},"source-map-explorer")," to transpiled js files."),(0,s.kt)("h4",{id:"client-step-1514-explore-bundle-size"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/e3607b7b1360d6a56535107c9dce39f2e7f0a45e"},(0,s.kt)("strong",{parentName:"a"},"Client")," Step 15.14: Explore bundle size")),(0,s.kt)("h5",{id:"changed-packagejson-2"},"Changed package.json"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},'@@ -44,6 +44,7 @@\n \u250a44\u250a44\u250a    "react-router-dom": "5.2.0",\n \u250a45\u250a45\u250a    "react-router-transition": "2.0.0",\n \u250a46\u250a46\u250a    "react-scripts": "3.4.1",\n+\u250a  \u250a47\u250a    "source-map-explorer": "2.4.2",\n \u250a47\u250a48\u250a    "styled-components": "5.1.0",\n \u250a48\u250a49\u250a    "subscriptions-transport-ws": "0.9.16",\n \u250a49\u250a50\u250a    "typescript": "3.9.3"\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},'@@ -55,7 +56,8 @@\n \u250a55\u250a56\u250a    "test": "react-scripts test --env=jest-environment-jsdom-sixteen",\n \u250a56\u250a57\u250a    "eject": "react-scripts eject",\n \u250a57\u250a58\u250a    "codegen": "graphql-codegen",\n-\u250a58\u250a  \u250a    "format": "prettier \\"**/*.{ts,tsx,css,graphql}\\" --write"\n+\u250a  \u250a59\u250a    "format": "prettier \\"**/*.{ts,tsx,css,graphql}\\" --write",\n+\u250a  \u250a60\u250a    "size": "source-map-explorer \'build/static/js/*.js\'"\n \u250a59\u250a61\u250a  },\n \u250a60\u250a62\u250a  "eslintConfig": {\n \u250a61\u250a63\u250a    "extends": "react-app"\n')),(0,s.kt)("p",null,"Let's see it in action, run:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"$ yarn build && yarn size\n")),(0,s.kt)("p",null,"That's what you should see:"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Source Map Explorer",src:n(8265).Z,title:"Source Map Explorer",width:"2880",height:"1640"})),(0,s.kt)("p",null,"It's interactive so you can dive deeper and deeper into those blocks but in general it shows what libraries and files are included in the produced output with their size(not minified and not gzipped)."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Source Map Explorer",src:n(2093).Z,title:"Source Map Explorer with moment highlighted",width:"1512",height:"1040"})),(0,s.kt)("p",null,"For example, we see that ",(0,s.kt)("inlineCode",{parentName:"p"},"moment")," takes almost ",(0,s.kt)("em",{parentName:"p"},"53.49KB")," which is enourmous. In fact we only use its ",(0,s.kt)("inlineCode",{parentName:"p"},"format")," method. The reason is that the library is not well tree-shakable. There are plugins for webpack (or any other build tool) that helps with it but we're going to use an alternative instead. We're going to replace it with ",(0,s.kt)("inlineCode",{parentName:"p"},"date-fns"),"."),(0,s.kt)("h4",{id:"client-step-1515-replace-moment-with-date-fns"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/98ef30c6194b5492283a521670de79ac0cf89a90"},(0,s.kt)("strong",{parentName:"a"},"Client")," Step 15.15: Replace moment with date-fns")),(0,s.kt)("h5",{id:"changed-packagejson-3"},"Changed package.json"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},'@@ -32,12 +32,12 @@\n \u250a32\u250a32\u250a    "apollo-link-mock": "1.0.1",\n \u250a33\u250a33\u250a    "apollo-link-ws": "1.0.20",\n \u250a34\u250a34\u250a    "apollo-utilities": "1.3.4",\n+\u250a  \u250a35\u250a    "date-fns": "2.14.0",\n \u250a35\u250a36\u250a    "graphql": "15.0.0",\n \u250a36\u250a37\u250a    "graphql-tag": "2.10.3",\n \u250a37\u250a38\u250a    "history": "4.10.1",\n \u250a38\u250a39\u250a    "jest-environment-jsdom-sixteen": "1.0.3",\n \u250a39\u250a40\u250a    "jest-fetch-mock": "3.0.3",\n-\u250a40\u250a  \u250a    "moment": "2.25.3",\n \u250a41\u250a41\u250a    "prettier": "2.0.5",\n \u250a42\u250a42\u250a    "react": "16.13.1",\n \u250a43\u250a43\u250a    "react-dom": "16.13.1",\n')),(0,s.kt)("h5",{id:"changed-srccomponentschatroomscreenmessageslisttsx-2"},"Changed src","/","components","/","ChatRoomScreen","/","MessagesList.tsx"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,4 +1,4 @@\n-\u250a1\u250a \u250aimport moment from 'moment';\n+\u250a \u250a1\u250aimport format from 'date-fns/format';\n \u250a2\u250a2\u250aimport React from 'react';\n \u250a3\u250a3\u250aimport { useEffect, useRef } from 'react';\n \u250a4\u250a4\u250aimport styled, { css } from 'styled-components';\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -141,7 +141,7 @@\n \u250a141\u250a141\u250a          key={message.id}>\n \u250a142\u250a142\u250a          <Contents data-testid=\"message-content\">{message.content}</Contents>\n \u250a143\u250a143\u250a          <Timestamp data-testid=\"message-date\">\n-\u250a144\u250a   \u250a            {moment(message.createdAt).format('HH:mm')}\n+\u250a   \u250a144\u250a            {format(message.createdAt, 'HH:mm')}\n \u250a145\u250a145\u250a          </Timestamp>\n \u250a146\u250a146\u250a        </MessageItem>\n \u250a147\u250a147\u250a      ))}\n")),(0,s.kt)("h5",{id:"changed-srccomponentschatslistscreenchatslisttsx-2"},"Changed src","/","components","/","ChatsListScreen","/","ChatsList.tsx"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,5 +1,5 @@\n \u250a1\u250a1\u250aimport React from 'react';\n-\u250a2\u250a \u250aimport moment from 'moment';\n+\u250a \u250a2\u250aimport format from 'date-fns/format';\n \u250a3\u250a3\u250aimport { List, ListItem } from '@material-ui/core';\n \u250a4\u250a4\u250aimport styled from 'styled-components';\n \u250a5\u250a5\u250aimport { useCallback } from 'react';\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -104,7 +104,7 @@\n \u250a104\u250a104\u250a                    {chat.lastMessage.content}\n \u250a105\u250a105\u250a                  </MessageContent>\n \u250a106\u250a106\u250a                  <MessageDate data-testid=\"date\">\n-\u250a107\u250a   \u250a                    {moment(chat.lastMessage.createdAt).format('HH:mm')}\n+\u250a   \u250a107\u250a                    {format(chat.lastMessage.createdAt, 'HH:mm')}\n \u250a108\u250a108\u250a                  </MessageDate>\n \u250a109\u250a109\u250a                </>\n \u250a110\u250a110\u250a              )}\n")),(0,s.kt)("p",null,"Now when you run:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"$ yarn build && yarn size\n")),(0,s.kt)("p",null,"You should see the following results."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Source Map Explorer",src:n(6825).Z,title:"Source Map Explorer with date-fns",width:"1348",height:"709"})),(0,s.kt)("p",null,"The bundle size is a bit smaller and ",(0,s.kt)("inlineCode",{parentName:"p"},"date-fns")," takes only ",(0,s.kt)("em",{parentName:"p"},"8.93KB")," which in comparison to ",(0,s.kt)("em",{parentName:"p"},"53.49KB")," is a significant change!"),(0,s.kt)("h2",{id:"load-testing"},"Load testing"),(0,s.kt)("p",null,"Load testing, in short, is about finding the limit of an application and figure out how to push it even more. We simulate a stressful behavior and apply that to the server until it crashes. We\u2019re trying to answer the question of how the api deals with a pressure."),(0,s.kt)("p",null,"When to do load testing?\nI would say at least before and after major changes, when pre-launching and just from time to time to prevent regressions."),(0,s.kt)("p",null,"Before doing load testing, we need to prepare a bit first. Right now we use ",(0,s.kt)("inlineCode",{parentName:"p"},"ts-node")," to run the server but it would be faster to run it directly using ",(0,s.kt)("inlineCode",{parentName:"p"},"node"),", just to avoid on-the-fly transpilation of TypeScript files."),(0,s.kt)("p",null,"In order to do it, we need to define the ",(0,s.kt)("inlineCode",{parentName:"p"},"outDir")," in ",(0,s.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," and add a build step."),(0,s.kt)("h4",{id:"server-step-1412-produce-transpiled-code"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/c77515ee5f151d46f7940952eaf47dd25766b012"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 14.12: Produce transpiled code")),(0,s.kt)("h5",{id:"changed-gitignore"},"Changed .gitignore"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,3 +1,4 @@\n+\u250a \u250a1\u250adist\n \u250a1\u250a2\u250anode_modules\n \u250a2\u250a3\u250anpm-debug.log\n \u250a3\u250a4\u250atest-results/\n")),(0,s.kt)("h5",{id:"changed-moduleschatschatsproviderts-9"},"Changed modules","/","chats","/","chats.provider.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -145,7 +145,9 @@\n \u250a145\u250a145\u250a    messages.reverse();\n \u250a146\u250a146\u250a\n \u250a147\u250a147\u250a    // cursor is a number representation of created_at\n-\u250a148\u250a   \u250a    const cursor = messages.length ? new Date(messages[0].created_at).getTime() : 0;\n+\u250a   \u250a148\u250a    const cursor = messages.length\n+\u250a   \u250a149\u250a      ? new Date(messages[0].created_at).getTime()\n+\u250a   \u250a150\u250a      : 0;\n \u250a149\u250a151\u250a    const { rows: next } = await this.db.query(\n \u250a150\u250a152\u250a      sql`SELECT * FROM messages WHERE chat_id = ${chatId} AND created_at < ${cursorToDate(\n \u250a151\u250a153\u250a        cursor\n")),(0,s.kt)("h5",{id:"changed-packagejson-4"},"Changed package.json"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},'@@ -9,6 +9,8 @@\n \u250a 9\u250a 9\u250a  "scripts": {\n \u250a10\u250a10\u250a    "prestart": "yarn codegen",\n \u250a11\u250a11\u250a    "start": "ts-node index.ts",\n+\u250a  \u250a12\u250a    "prebuild": "yarn codegen",\n+\u250a  \u250a13\u250a    "build": "tsc",\n \u250a12\u250a14\u250a    "test": "jest --runInBand --forceExit",\n \u250a13\u250a15\u250a    "codegen": "graphql-codegen",\n \u250a14\u250a16\u250a    "format": "prettier \\"**/*.ts\\" --write"\n')),(0,s.kt)("h5",{id:"changed-tsconfigjson"},"Changed tsconfig.json"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},'@@ -1,5 +1,6 @@\n \u250a1\u250a1\u250a{\n \u250a2\u250a2\u250a  "compilerOptions": {\n+\u250a \u250a3\u250a    "outDir": "dist",\n \u250a3\u250a4\u250a    "target": "es2020",\n \u250a4\u250a5\u250a    "module": "commonjs",\n \u250a5\u250a6\u250a    "skipLibCheck": true,\n')),(0,s.kt)("p",null,"Next, the script to actually run the server:"),(0,s.kt)("h4",{id:"server-step-1413-prepare-for-production"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/363cf641d02112c2a1f4e3f7f1b4aebe5b7969b8"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 14.13: Prepare for production")),(0,s.kt)("h5",{id:"changed-packagejson-5"},"Changed package.json"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},'@@ -10,6 +10,7 @@\n \u250a10\u250a10\u250a    "prestart": "yarn codegen",\n \u250a11\u250a11\u250a    "start": "ts-node index.ts",\n \u250a12\u250a12\u250a    "prebuild": "yarn codegen",\n+\u250a  \u250a13\u250a    "prod": "node dist/index.js",\n \u250a13\u250a14\u250a    "build": "tsc",\n \u250a14\u250a15\u250a    "test": "jest --runInBand --forceExit",\n \u250a15\u250a16\u250a    "codegen": "graphql-codegen",\n')),(0,s.kt)("p",null,"Once it\u2019s ready, we can move on to tooling."),(0,s.kt)("h3",{id:"artillery"},"Artillery"),(0,s.kt)("p",null,"Artillery is an open-source load testing and functional testing toolkit. It\u2019s API is vast but we will focus on the core part of it which is relevant to this chapter. Artillery is available as a npm package:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"$ yarn add -D artillery\n")),(0,s.kt)("p",null,"The only step to use Artillery is to set it up. We will create the ",(0,s.kt)("inlineCode",{parentName:"p"},"artillery.yml")," file, like this:"),(0,s.kt)("h4",{id:"server-step-1415-add-artillery-config"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/63a2547d1c7663137fa1adc0839034d86bda5e1f"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 14.15: Add artillery config")),(0,s.kt)("h5",{id:"added-artilleryyml"},"Added artillery.yml"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,72 @@\n+\u250a  \u250a 1\u250aconfig:\n+\u250a  \u250a 2\u250a  target: 'http://localhost:4000/graphql'\n+\u250a  \u250a 3\u250a  phases:\n+\u250a  \u250a 4\u250a    - duration: 120\n+\u250a  \u250a 5\u250a      arrivalRate: 5\n+\u250a  \u250a 6\u250a      rampTo: 20\n+\u250a  \u250a 7\u250ascenarios:\n+\u250a  \u250a 8\u250a  - name: 'Sign in, send a new message and fetch a list of chats'\n+\u250a  \u250a 9\u250a    flow:\n+\u250a  \u250a10\u250a      - post:\n+\u250a  \u250a11\u250a          url: '/'\n+\u250a  \u250a12\u250a          json:\n+\u250a  \u250a13\u250a            variables:\n+\u250a  \u250a14\u250a              username: 'ray'\n+\u250a  \u250a15\u250a              password: '111'\n+\u250a  \u250a16\u250a            query: |\n+\u250a  \u250a17\u250a              mutation SignIn($username: String!, $password: String!) {\n+\u250a  \u250a18\u250a                signIn(username: $username, password: $password) {\n+\u250a  \u250a19\u250a                  id\n+\u250a  \u250a20\u250a                }\n+\u250a  \u250a21\u250a              }\n+\u250a  \u250a22\u250a      - post:\n+\u250a  \u250a23\u250a          url: '/'\n+\u250a  \u250a24\u250a          json:\n+\u250a  \u250a25\u250a            query: |\n+\u250a  \u250a26\u250a              mutation message {\n+\u250a  \u250a27\u250a                addMessage(chatId: \"1\", content: \"artillery\") {\n+\u250a  \u250a28\u250a                  id\n+\u250a  \u250a29\u250a                }\n+\u250a  \u250a30\u250a              }\n+\u250a  \u250a31\u250a      - post:\n+\u250a  \u250a32\u250a          url: '/'\n+\u250a  \u250a33\u250a          json:\n+\u250a  \u250a34\u250a            variables:\n+\u250a  \u250a35\u250a              limit: 20\n+\u250a  \u250a36\u250a            query: |\n+\u250a  \u250a37\u250a              fragment User on User {\n+\u250a  \u250a38\u250a                id\n+\u250a  \u250a39\u250a                name\n+\u250a  \u250a40\u250a                picture\n+\u250a  \u250a41\u250a              }\n+\u250a  \u250a42\u250a              fragment Message on Message {\n+\u250a  \u250a43\u250a                id\n+\u250a  \u250a44\u250a                content\n+\u250a  \u250a45\u250a                chat {\n+\u250a  \u250a46\u250a                  id\n+\u250a  \u250a47\u250a                }\n+\u250a  \u250a48\u250a                sender {\n+\u250a  \u250a49\u250a                  ...User\n+\u250a  \u250a50\u250a                }\n+\u250a  \u250a51\u250a                recipient {\n+\u250a  \u250a52\u250a                  ...User\n+\u250a  \u250a53\u250a                }\n+\u250a  \u250a54\u250a              }\n+\u250a  \u250a55\u250a              query GetChats($limit: Int!) {\n+\u250a  \u250a56\u250a                chats {\n+\u250a  \u250a57\u250a                  id\n+\u250a  \u250a58\u250a                  name\n+\u250a  \u250a59\u250a                  picture\n+\u250a  \u250a60\u250a                  lastMessage {\n+\u250a  \u250a61\u250a                    ...Message\n+\u250a  \u250a62\u250a                  }\n+\u250a  \u250a63\u250a                  messages(limit: $limit) {\n+\u250a  \u250a64\u250a                    messages {\n+\u250a  \u250a65\u250a                      ...Message\n+\u250a  \u250a66\u250a                    }\n+\u250a  \u250a67\u250a                  }\n+\u250a  \u250a68\u250a                  participants {\n+\u250a  \u250a69\u250a                    ...User\n+\u250a  \u250a70\u250a                  }\n+\u250a  \u250a71\u250a                }\n+\u250a  \u250a72\u250a              }\n")),(0,s.kt)("p",null,"As you can see, the config file is built of two sections. First one is named ",(0,s.kt)("inlineCode",{parentName:"p"},"config")," and it defines what\u2019s our target and how the traffic should look like. We used one phase but it could have many. The ",(0,s.kt)("inlineCode",{parentName:"p"},"duration")," parameter is to define how long the phase should take. The ",(0,s.kt)("inlineCode",{parentName:"p"},"arrivalRate")," defines how many virtual users per second are going to hit the target and the ",(0,s.kt)("inlineCode",{parentName:"p"},"rampTo")," directs Artillery to increase this number up to 20, at the middle of the phase."),(0,s.kt)("p",null,"The next section, called ",(0,s.kt)("inlineCode",{parentName:"p"},"scenarios"),", is all about the actual requests. In our case, we want to authenticate user, submit a new message and fetch an entire list of chats with their messages at the end. Artillery shares cookies between request of the same virtual user, keep that on mind."),(0,s.kt)("p",null,"We used Ray as the user and fairly similar operations to what the client app sends. That should closely represent the actual usage of the API."),(0,s.kt)("p",null,"Everything is fine with that config but we need to find the limit, to push even more. That's why we'll also add a second config with a bit more heavier traffic, something to simulate the more real life environment. It's pretty much the same setup except phases. First, we \"warms up\" the server for 2 minutes, same amount of times goes next with double the traffic, then we keep it for 5 minutes. At the end, we want to crash the server so we send nearly 100 virtual users per second for an entire minute. This way we know when it cracks."),(0,s.kt)("h4",{id:"server-step-1416-artillery-config-to-find-a-limit"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/bc73202ae5861229e1e3b6d5d31e7e9631e736f1"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 14.16: Artillery config to find a limit")),(0,s.kt)("h5",{id:"added-artillery-limityml"},"Added artillery-limit.yml"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,77 @@\n+\u250a  \u250a 1\u250aconfig:\n+\u250a  \u250a 2\u250a  target: 'http://localhost:4000/graphql'\n+\u250a  \u250a 3\u250a  phases:\n+\u250a  \u250a 4\u250a    - duration: 120\n+\u250a  \u250a 5\u250a      arrivalRate: 5\n+\u250a  \u250a 6\u250a    - duration: 120\n+\u250a  \u250a 7\u250a      arrivalRate: 10\n+\u250a  \u250a 8\u250a    - duration: 300\n+\u250a  \u250a 9\u250a      arrivalRate: 10\n+\u250a  \u250a10\u250a    - duration: 60\n+\u250a  \u250a11\u250a      arrivalRate: 100\n+\u250a  \u250a12\u250ascenarios:\n+\u250a  \u250a13\u250a  - name: 'Sign in, send a new message and fetch a list of chats'\n+\u250a  \u250a14\u250a    flow:\n+\u250a  \u250a15\u250a      - post:\n+\u250a  \u250a16\u250a          url: '/'\n+\u250a  \u250a17\u250a          json:\n+\u250a  \u250a18\u250a            variables:\n+\u250a  \u250a19\u250a              username: 'ray'\n+\u250a  \u250a20\u250a              password: '111'\n+\u250a  \u250a21\u250a            query: |\n+\u250a  \u250a22\u250a              mutation SignIn($username: String!, $password: String!) {\n+\u250a  \u250a23\u250a                signIn(username: $username, password: $password) {\n+\u250a  \u250a24\u250a                  id\n+\u250a  \u250a25\u250a                }\n+\u250a  \u250a26\u250a              }\n+\u250a  \u250a27\u250a      - post:\n+\u250a  \u250a28\u250a          url: '/'\n+\u250a  \u250a29\u250a          json:\n+\u250a  \u250a30\u250a            query: |\n+\u250a  \u250a31\u250a              mutation message {\n+\u250a  \u250a32\u250a                addMessage(chatId: \"1\", content: \"artillery\") {\n+\u250a  \u250a33\u250a                  id\n+\u250a  \u250a34\u250a                }\n+\u250a  \u250a35\u250a              }\n+\u250a  \u250a36\u250a      - post:\n+\u250a  \u250a37\u250a          url: '/'\n+\u250a  \u250a38\u250a          json:\n+\u250a  \u250a39\u250a            variables:\n+\u250a  \u250a40\u250a              limit: 20\n+\u250a  \u250a41\u250a            query: |\n+\u250a  \u250a42\u250a              fragment User on User {\n+\u250a  \u250a43\u250a                id\n+\u250a  \u250a44\u250a                name\n+\u250a  \u250a45\u250a                picture\n+\u250a  \u250a46\u250a              }\n+\u250a  \u250a47\u250a              fragment Message on Message {\n+\u250a  \u250a48\u250a                id\n+\u250a  \u250a49\u250a                content\n+\u250a  \u250a50\u250a                chat {\n+\u250a  \u250a51\u250a                  id\n+\u250a  \u250a52\u250a                }\n+\u250a  \u250a53\u250a                sender {\n+\u250a  \u250a54\u250a                  ...User\n+\u250a  \u250a55\u250a                }\n+\u250a  \u250a56\u250a                recipient {\n+\u250a  \u250a57\u250a                  ...User\n+\u250a  \u250a58\u250a                }\n+\u250a  \u250a59\u250a              }\n+\u250a  \u250a60\u250a              query GetChats($limit: Int!) {\n+\u250a  \u250a61\u250a                chats {\n+\u250a  \u250a62\u250a                  id\n+\u250a  \u250a63\u250a                  name\n+\u250a  \u250a64\u250a                  picture\n+\u250a  \u250a65\u250a                  lastMessage {\n+\u250a  \u250a66\u250a                    ...Message\n+\u250a  \u250a67\u250a                  }\n+\u250a  \u250a68\u250a                  messages(limit: $limit) {\n+\u250a  \u250a69\u250a                    messages {\n+\u250a  \u250a70\u250a                      ...Message\n+\u250a  \u250a71\u250a                    }\n+\u250a  \u250a72\u250a                  }\n+\u250a  \u250a73\u250a                  participants {\n+\u250a  \u250a74\u250a                    ...User\n+\u250a  \u250a75\u250a                  }\n+\u250a  \u250a76\u250a                }\n+\u250a  \u250a77\u250a              }\ud83d\udeab\u21b5\n")),(0,s.kt)("p",null,"Once everything is ready, let's add npm scripts, one for a normal traffic and a second with the much more users:"),(0,s.kt)("h4",{id:"server-step-1417-add-loadtest-scripts"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/59f35f0da1e97d9e5504611fec24eab92137b726"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 14.17: Add loadtest scripts")),(0,s.kt)("h5",{id:"changed-packagejson-6"},"Changed package.json"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},'@@ -14,7 +14,9 @@\n \u250a14\u250a14\u250a    "build": "tsc",\n \u250a15\u250a15\u250a    "test": "jest --runInBand --forceExit",\n \u250a16\u250a16\u250a    "codegen": "graphql-codegen",\n-\u250a17\u250a  \u250a    "format": "prettier \\"**/*.ts\\" --write"\n+\u250a  \u250a17\u250a    "format": "prettier \\"**/*.ts\\" --write",\n+\u250a  \u250a18\u250a    "loadtest": "yarn artillery run artillery.yml > loadtest.log",\n+\u250a  \u250a19\u250a    "loadtest:limit": "yarn artillery run artillery-limit.yml > loadtest.log"\n \u250a18\u250a20\u250a  },\n \u250a19\u250a21\u250a  "jest-junit": {\n \u250a20\u250a22\u250a    "outputDirectory": "./test-results"\n')),(0,s.kt)("p",null,"You probably noticed that we stream the output to the ",(0,s.kt)("inlineCode",{parentName:"p"},"loadtest.log")," file and that's just to read the results in a bit more pleasent way, than in the terminal."),(0,s.kt)("p",null,"Let\u2019s start the server and run artillery:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"$ yarn build && yarn start\n$ yarn loadtest\n")),(0,s.kt)("p",null,"You\u2019ll see a loading indicator, might take a while but when it completes, you should see something like this in ",(0,s.kt)("inlineCode",{parentName:"p"},"loadtest.log")," file:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"Summary report @ 15:00:58(+0200) 2019-05-30\n  Scenarios launched:  1506\n  Scenarios completed: 1506\n  Requests completed:  4518\n  RPS sent: 37.35\n  Request latency:\n    min: 3.5\n    max: 115.7\n    median: 18.6\n    p95: 54.4\n    p99: 66.2\n  Scenario counts:\n    Sign in, send a new message and fetch a list of chats: 1506 (100%)\n  Codes:\n    200: 4518\n")),(0,s.kt)("p",null,"We ran the scenario 1506 times, all were completed and the total number of requests was 4518.  The ",(0,s.kt)("strong",{parentName:"p"},"RPS")," means requests per second."),(0,s.kt)("p",null,"The metrics in ",(0,s.kt)("strong",{parentName:"p"},"Request latency")," are in milliseconds. We see what was the shortest request and so on. These ",(0,s.kt)("strong",{parentName:"p"},"p95")," and ",(0,s.kt)("strong",{parentName:"p"},"p99")," values mean that for 95% of virtual users, the latency was 54.4ms or lower, for 99% it was 66.2ms. All requests finished with 200 status code."),(0,s.kt)("p",null,"You might also automate that process and integrate Artillery CLI with CI/CI systems or even send metrics to external monitoring systems."),(0,s.kt)("h3",{id:"apollo-engine"},"Apollo Engine"),(0,s.kt)("p",null,"Let's bring back the Apollo Engine once again. It will be helpful to analyze the load testing results."),(0,s.kt)("p",null,"On the ",(0,s.kt)("strong",{parentName:"p"},"Metrics")," page, you will see the following view:"),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Metrics",src:n(7043).Z,title:"Metrics",width:"2366",height:"1644"})),(0,s.kt)("p",null,"Click on the filter and set a custom date range to match the time you were load testing. Just to filter out other requests."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Filter",src:n(5581).Z,title:"Filter",width:"686",height:"1368"})),(0,s.kt)("p",null,"By default, Apollo Engine counts all operations, but you can pick the one you\u2019re interesting in. We don\u2019t do it and inspect them all."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"List",src:n(5961).Z,title:"List of operations",width:"878",height:"726"})),(0,s.kt)("p",null,"On the main part of the view, you should see \u201cLast day overview\u201d panel."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Overview",src:n(6693).Z,title:"Last day overview",width:"1706",height:"850"})),(0,s.kt)("p",null,"As you can see, all operations we ran are listed there and no error occurred."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Request Rate",src:n(1690).Z,title:"Request Rate Over Time",width:"1748",height:"590"})),(0,s.kt)("p",null,"Next section shows the Requests Per Minute (rpm) metric over time. It\u2019s useful to understand which operations are sent more often than others."),(0,s.kt)("p",null,(0,s.kt)("img",{alt:"Request 1",src:n(3236).Z,title:"Request Latency Over time",width:"1748",height:"894"}),"\n",(0,s.kt)("img",{alt:"Request 2",src:n(4224).Z,title:"Request Latency Distribution",width:"1748",height:"736"})),(0,s.kt)("p",null,"Last two panels are there to understand at what number of requests the latency increases and to show the correlation between them. We see a distribution of the processing time (the horizontal axis) and the number of operations. It also has p50, p75, p90 and p99 marks on it."),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:"left"},(0,s.kt)("a",{parentName:"th",href:"https://github.com/Urigo/WhatsApp-Clone-Tutorial/tree/master@next/.tortilla/manuals/views/step16.md"},"< Previous Step"))))))}h.isMDXComponent=!0},1677:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/img-01-bf571648283d41c9180fb6a4a49bb7e5.png"},3508:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/img-02-6d63220a593bf76d03aed8a353eb4247.png"},8345:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/img-03-1f85b21eba85393fbb837694f3728407.png"},7739:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/img-04-f0872d27c6f8ba7442100db8bbcdb094.png"},8858:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/img-05-690a5fece4dea84d9a317afbe9ddce01.png"},5426:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/img-06-f4869215ceafbf622824c35d4acd06f1.png"},4452:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/img-07-bae85bdf84f565a74c0e0b8f71512b35.png"},1805:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/img-08-aff0c13b0269fa960499ad65c0ec53c4.png"},6626:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/img-09-69f507e42c59d0e0c66866d5bd189817.png"},8265:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/img-10-7caed9439979735ddb244cd2213c613e.png"},2093:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/img-11-a3adceba54735eb8f84585a8e14279ce.png"},6825:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/img-12-5e6c8ae854af24093332f3a2608da7c6.png"},7043:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/img-13-c18261b19ea88eb56d1f718063538521.png"},5581:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/img-14-aa52825a7931ab1a8c187dad56340ca5.png"},5961:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/img-15-4fe62923694b8595bfd219da4e3e7fdb.png"},6693:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/img-16-c0cda16357adce7a7ed97fbab16e2430.png"},1690:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/img-17-e9a1d564098b7ceaf343f95ee6a2cb0d.png"},3236:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/img-18-4ad194dbc0dcb617a595486130e000dd.png"},4224:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/img-19-a5dc293d8e956d74366e4fcba59ea1af.png"}}]);