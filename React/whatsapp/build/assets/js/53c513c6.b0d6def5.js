"use strict";(self.webpackChunkovrsea_whatsapp_tuto=self.webpackChunkovrsea_whatsapp_tuto||[]).push([[9390],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),p=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),h=p(n),u=r,g=h["".concat(i,".").concat(u)]||h[u]||d[u]||s;return n?a.createElement(g,o(o({ref:t},c),{},{components:n})):a.createElement(g,o({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=h;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<s;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},6529:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const s={sidebar_label:"Step 9: Type safety with GraphQL Code Generator",sidebar_position:9},o="Step 9: Type safety with GraphQL Code Generator",l={unversionedId:"tuto-whatsapp/step9",id:"version-1.1.0/tuto-whatsapp/step9",title:"Step 9: Type safety with GraphQL Code Generator",description:"[//]: # (head-end)",source:"@site/versioned_docs/version-1.1.0/tuto-whatsapp/step9.md",sourceDirName:"tuto-whatsapp",slug:"/tuto-whatsapp/step9",permalink:"/docs/tuto-whatsapp/step9",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/versioned_docs/version-1.1.0/tuto-whatsapp/step9.md",tags:[],version:"1.1.0",sidebarPosition:9,frontMatter:{sidebar_label:"Step 9: Type safety with GraphQL Code Generator",sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"Step 8: Sending messages with GraphQL mutations",permalink:"/docs/tuto-whatsapp/step8"},next:{title:"Step 10: Live updates with GraphQL subscriptions",permalink:"/docs/tuto-whatsapp/step10"}},i={},p=[{value:"<strong>Server</strong> Step 6.1: Setup GraphQL Code Generator",id:"server-step-61-setup-graphql-code-generator",level:4},{value:"Added codegen.yml",id:"added-codegenyml",level:5},{value:"Changed package.json",id:"changed-packagejson",level:5},{value:"<strong>Server</strong> Step 6.1: Setup GraphQL Code Generator",id:"server-step-61-setup-graphql-code-generator-1",level:4},{value:"Changed .gitignore",id:"changed-gitignore",level:5},{value:"<strong>Server</strong> Step 6.1: Setup GraphQL Code Generator",id:"server-step-61-setup-graphql-code-generator-2",level:4},{value:"Changed package.json",id:"changed-packagejson-1",level:5},{value:"<strong>Server</strong> Step 6.2: Type resolvers",id:"server-step-62-type-resolvers",level:4},{value:"Changed schema/index.ts",id:"changed-schemaindexts",level:5},{value:"Changed schema/resolvers.ts",id:"changed-schemaresolversts",level:5},{value:"<strong>Client</strong> Step 9.1: Setup GraphQL Code Generator",id:"client-step-91-setup-graphql-code-generator",level:4},{value:"Added codegen.yml",id:"added-codegenyml-1",level:5},{value:"<strong>Client</strong> Step 9.1: Setup GraphQL Code Generator",id:"client-step-91-setup-graphql-code-generator-1",level:4},{value:"Changed .gitignore",id:"changed-gitignore-1",level:5},{value:"<strong>Client</strong> Step 9.2: Use GraphQL Codegen hooks",id:"client-step-92-use-graphql-codegen-hooks",level:4},{value:"Changed src/components/ChatRoomScreen/ChatNavbar.tsx",id:"changed-srccomponentschatroomscreenchatnavbartsx",level:5},{value:"Changed src/components/ChatRoomScreen/MessagesList.tsx",id:"changed-srccomponentschatroomscreenmessageslisttsx",level:5},{value:"Changed src/components/ChatRoomScreen/index.tsx",id:"changed-srccomponentschatroomscreenindextsx",level:5},{value:"Changed src/components/ChatsListScreen/ChatsList.tsx",id:"changed-srccomponentschatslistscreenchatslisttsx",level:5}],c={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"step-9-type-safety-with-graphql-code-generator"},"Step 9: Type safety with GraphQL Code Generator"),(0,r.kt)("p",null,"So far we've been just writing code. If there was an error we would most likely discover it during runtime. As a reminder, we've created a project which is based on TypeScript, but we haven't really took any advantage of TypeScript's type safety mechanism. Currently, the TypeScript compiler is configured to work on loose mode, so any object which is not bound to any type will be converted to ",(0,r.kt)("inlineCode",{parentName:"p"},"any")," - a type which is compatible with any type of casting and will ignore type errors."),(0,r.kt)("p",null,"So far it's been very convenient because we've only started to learn about building an app and the ecosystem around it, but for a long term project it's would be very handy to take a full advantage of TypeScript and not let it go under the radar. So where exactly are we missing type checkings? In the core of our project - when dealing with GraphQL documents."),(0,r.kt)("p",null,"When we run a query, or a mutation, we wanna make sure that we use the received data correctly, based on its intended shape and form. For example, given the following GraphQL query:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"query Chats {\n  chats {\n    id\n    name\n    picture\n  }\n}\n")),(0,r.kt)("p",null,"We want to have the following TypeScript type:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'export type Chat = {\n  __typename?: "Chat"\n  id: string\n  name: string\n  picture: string\n}\n\nexport type ChatQuery = {\n  __typename?: "Query"\n  chats: Chats[]\n}\n\n')),(0,r.kt)("p",null,"So later on we can use it with ",(0,r.kt)("inlineCode",{parentName:"p"},"@apollo/react-hooks")," like so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"useQuery<ChatsQuery>(getChatsQuery)\n")),(0,r.kt)("p",null,"Everything looks nice in theory, but the main issue that arises from having type definitions is that we need to maintain and sync 2 similar code bases:\nA GraphQL schema and TypeScript type definitions.\nBoth are essentially the same, and if so, why do we even need to maintain 2 code bases?\nIsn't there a tool which does that for us? A question which brings us straight to the point of the chapter."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Introducing: GraphQL Code Generator")),(0,r.kt)("p",null,"With ",(0,r.kt)("a",{parentName:"p",href:"https://graphql-code-generator.com/"},"GraphQL Code Generator")," we can generate TypeScript definitions given a GraphQL schema, and a set of GraphQL documents if they are presented to us."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/7648874/54940897-9f564380-4f66-11e9-9891-3b994a1daef1.png",alt:"graphql-codegen"})),(0,r.kt)("p",null,"GraphQL Code Generator is a simple CLI tool that operates based on a configuration file and can generate TypeScript types for both Client and Server.\nWe will start with generating types for the server."),(0,r.kt)("p",null,"In the server project, install GraphQL Code Generator via Yarn"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ yarn add @graphql-codegen/cli@1.14.0 --dev\n")),(0,r.kt)("p",null,"Now GraphQL Code Generator can be used directly from the ",(0,r.kt)("inlineCode",{parentName:"p"},"scripts")," section in the ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json")," file using the ",(0,r.kt)("inlineCode",{parentName:"p"},"graphql-codegen"),' binary.\nWe\'re gonna call the code generation script "codegen":'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "codegen": "graphql-codegen"\n}\n')),(0,r.kt)("p",null,"This command will automatically be referenced to a configuration file in the root of our project called ",(0,r.kt)("inlineCode",{parentName:"p"},"codegen.yml"),".\nThe essence of this file is to provide the code generator with the GraphQL schema, GraphQL documents, the output path of the type definition file/s and a set of plug-ins.\nMore about the configuration file can be found in the ",(0,r.kt)("a",{parentName:"p",href:"https://graphql-code-generator.com/docs/getting-started/codegen-config"},"official website"),"."),(0,r.kt)("p",null,"In the server project, we will generate the ",(0,r.kt)("inlineCode",{parentName:"p"},"types/graphql.d.ts")," file and we will use a couple of plug-ins to do that:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"@graphql-codegen/typescript")," - Will generate the core TypeScript types from our GraphQL schema."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"@graphql-codegen/typescript-resolvers")," - Will generate resolvers signatures with the generated TypeScript types.")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"A full list of available plugins is available ",(0,r.kt)("a",{parentName:"p",href:"https://graphql-code-generator.com/docs/plugins/"},"here"),". In addition, you can write your own ",(0,r.kt)("a",{parentName:"p",href:"https://graphql-code-generator.com/docs/custom-codegen/write-your-plugin"},"custom plugin"),".")),(0,r.kt)("p",null,"Let's install these 2 plugins:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ yarn add @graphql-codegen/typescript@1.14.0 @graphql-codegen/typescript-resolvers@1.14.0 --dev\n")),(0,r.kt)("p",null,"And write the ",(0,r.kt)("inlineCode",{parentName:"p"},"codegen.yml")," file:"),(0,r.kt)("h4",{id:"server-step-61-setup-graphql-code-generator"},(0,r.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/c827db847d95eeec1f6d515e7037125c4e1a2073"},(0,r.kt)("strong",{parentName:"a"},"Server")," Step 6.1: Setup GraphQL Code Generator")),(0,r.kt)("h5",{id:"added-codegenyml"},"Added codegen.yml"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,17 @@\n+\u250a  \u250a 1\u250aschema: ./schema/typeDefs.graphql\n+\u250a  \u250a 2\u250aoverwrite: true\n+\u250a  \u250a 3\u250agenerates:\n+\u250a  \u250a 4\u250a  ./types/graphql.d.ts:\n+\u250a  \u250a 5\u250a    plugins:\n+\u250a  \u250a 6\u250a      - typescript\n+\u250a  \u250a 7\u250a      - typescript-resolvers\n+\u250a  \u250a 8\u250a    config:\n+\u250a  \u250a 9\u250a      mappers:\n+\u250a  \u250a10\u250a        # import { Message } from '../db'\n+\u250a  \u250a11\u250a        # The root types of Message resolvers\n+\u250a  \u250a12\u250a        Message: ../db#Message\n+\u250a  \u250a13\u250a        Chat: ../db#Chat\n+\u250a  \u250a14\u250a      scalars:\n+\u250a  \u250a15\u250a        # e.g. Message.createdAt will be of type Date\n+\u250a  \u250a16\u250a        Date: Date\n+\u250a  \u250a17\u250a        URL: string\n")),(0,r.kt)("h5",{id:"changed-packagejson"},"Changed package.json"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},'@@ -7,14 +7,19 @@\n \u250a 7\u250a 7\u250a  },\n \u250a 8\u250a 8\u250a  "private": true,\n \u250a 9\u250a 9\u250a  "scripts": {\n \u250a10\u250a11\u250a    "start": "ts-node index.ts",\n \u250a11\u250a12\u250a    "test": "jest",\n+\u250a  \u250a13\u250a    "codegen": "graphql-codegen",\n \u250a12\u250a14\u250a    "format": "prettier \\"**/*.ts\\" --write"\n \u250a13\u250a15\u250a  },\n \u250a14\u250a16\u250a  "jest-junit": {\n \u250a15\u250a17\u250a    "outputDirectory": "./test-results"\n \u250a16\u250a18\u250a  },\n \u250a17\u250a19\u250a  "devDependencies": {\n+\u250a  \u250a20\u250a    "@graphql-codegen/cli": "1.14.0",\n+\u250a  \u250a21\u250a    "@graphql-codegen/typescript": "1.14.0",\n+\u250a  \u250a22\u250a    "@graphql-codegen/typescript-resolvers": "1.14.0",\n \u250a18\u250a23\u250a    "@types/cors": "2.8.6",\n \u250a19\u250a24\u250a    "@types/express": "4.17.6",\n \u250a20\u250a25\u250a    "@types/graphql": "14.5.0",\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"See inline comments to learn more about our configuration setup.")),(0,r.kt)("p",null,"Now if you'll run ",(0,r.kt)("inlineCode",{parentName:"p"},"$ npm run codegen")," you should see that a new file ",(0,r.kt)("inlineCode",{parentName:"p"},"types/graphql.d.ts")," has been generated with all the necessary TypeScript types. Since these types are very likely to change as we extend our schema, there's no need to include them in our project, thus it's recommended to add the appropriate .gitignore rule:"),(0,r.kt)("h4",{id:"server-step-61-setup-graphql-code-generator-1"},(0,r.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/c827db847d95eeec1f6d515e7037125c4e1a2073"},(0,r.kt)("strong",{parentName:"a"},"Server")," Step 6.1: Setup GraphQL Code Generator")),(0,r.kt)("h5",{id:"changed-gitignore"},"Changed .gitignore"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,3 +1,4 @@\n \u250a1\u250a1\u250anode_modules\n \u250a2\u250a2\u250anpm-debug.log\n-\u250a3\u250a \u250atest-results/\ud83d\udeab\u21b5\n+\u250a \u250a3\u250atest-results/\n+\u250a \u250a4\u250atypes/graphql.d.ts\ud83d\udeab\u21b5\n")),(0,r.kt)("p",null,"Now to make sure we always get the updated types, let's add a task that would run automatically before we start the server.\n",(0,r.kt)("inlineCode",{parentName:"p"},"prestart")," is a saved word that means that when we run ",(0,r.kt)("inlineCode",{parentName:"p"},"yarn start")," it will run that task automatically before running the script in ",(0,r.kt)("inlineCode",{parentName:"p"},"start"),":"),(0,r.kt)("h4",{id:"server-step-61-setup-graphql-code-generator-2"},(0,r.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/c827db847d95eeec1f6d515e7037125c4e1a2073"},(0,r.kt)("strong",{parentName:"a"},"Server")," Step 6.1: Setup GraphQL Code Generator")),(0,r.kt)("h5",{id:"changed-packagejson-1"},"Changed package.json"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},'@@ -7,14 +7,19 @@\n \u250a 7\u250a 7\u250a  },\n \u250a 8\u250a 8\u250a  "private": true,\n \u250a 9\u250a 9\u250a  "scripts": {\n+\u250a  \u250a10\u250a    "prestart": "yarn codegen",\n \u250a10\u250a11\u250a    "start": "ts-node index.ts",\n \u250a11\u250a12\u250a    "test": "jest",\n \u250a  \u250a13\u250a    "codegen": "graphql-codegen",\n \u250a12\u250a14\u250a    "format": "prettier \\"**/*.ts\\" --write"\n \u250a13\u250a15\u250a  },\n \u250a14\u250a16\u250a  "jest-junit": {\n \u250a15\u250a17\u250a    "outputDirectory": "./test-results"\n \u250a16\u250a18\u250a  },\n \u250a17\u250a19\u250a  "devDependencies": {\n \u250a  \u250a20\u250a    "@graphql-codegen/cli": "1.14.0",\n \u250a  \u250a21\u250a    "@graphql-codegen/typescript": "1.14.0",\n \u250a  \u250a22\u250a    "@graphql-codegen/typescript-resolvers": "1.14.0",\n \u250a18\u250a23\u250a    "@types/cors": "2.8.6",\n \u250a19\u250a24\u250a    "@types/express": "4.17.6",\n \u250a20\u250a25\u250a    "@types/graphql": "14.5.0",\n')),(0,r.kt)("p",null,"Now we can import the ",(0,r.kt)("inlineCode",{parentName:"p"},"IResolvers")," type from the file we've just created and use it in the ",(0,r.kt)("inlineCode",{parentName:"p"},"resolvers.ts")," file to ensure our resolvers handlers have the right signature:"),(0,r.kt)("h4",{id:"server-step-62-type-resolvers"},(0,r.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/8117e5b14b6700215da0e6556a863dc90fe9eea8"},(0,r.kt)("strong",{parentName:"a"},"Server")," Step 6.2: Type resolvers")),(0,r.kt)("h5",{id:"changed-schemaindexts"},"Changed schema","/","index.ts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,7 +1,10 @@\n \u250a 1\u250a 1\u250aimport { importSchema } from 'graphql-import';\n-\u250a 2\u250a  \u250aimport { makeExecutableSchema } from 'graphql-tools';\n+\u250a  \u250a 2\u250aimport { makeExecutableSchema, IResolvers } from 'graphql-tools';\n \u250a 3\u250a 3\u250aimport resolvers from './resolvers';\n \u250a 4\u250a 4\u250a\n \u250a 5\u250a 5\u250aconst typeDefs = importSchema('schema/typeDefs.graphql');\n \u250a 6\u250a 6\u250a\n-\u250a 7\u250a  \u250aexport default makeExecutableSchema({ resolvers, typeDefs });\n+\u250a  \u250a 7\u250aexport default makeExecutableSchema({\n+\u250a  \u250a 8\u250a  resolvers: resolvers as IResolvers,\n+\u250a  \u250a 9\u250a  typeDefs,\n+\u250a  \u250a10\u250a});\n")),(0,r.kt)("h5",{id:"changed-schemaresolversts"},"Changed schema","/","resolvers.ts"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,19 +1,20 @@\n \u250a 1\u250a 1\u250aimport { DateTimeResolver, URLResolver } from 'graphql-scalars';\n-\u250a 2\u250a  \u250aimport { chats, messages } from '../db';\n+\u250a  \u250a 2\u250aimport { Message, chats, messages } from '../db';\n+\u250a  \u250a 3\u250aimport { Resolvers } from '../types/graphql';\n \u250a 3\u250a 4\u250a\n-\u250a 4\u250a  \u250aconst resolvers = {\n+\u250a  \u250a 5\u250aconst resolvers: Resolvers = {\n \u250a 5\u250a 6\u250a  Date: DateTimeResolver,\n \u250a 6\u250a 7\u250a  URL: URLResolver,\n \u250a 7\u250a 8\u250a\n \u250a 8\u250a 9\u250a  Chat: {\n-\u250a 9\u250a  \u250a    messages(chat: any) {\n+\u250a  \u250a10\u250a    messages(chat) {\n \u250a10\u250a11\u250a      return messages.filter((m) => chat.messages.includes(m.id));\n \u250a11\u250a12\u250a    },\n \u250a12\u250a13\u250a\n-\u250a13\u250a  \u250a    lastMessage(chat: any) {\n+\u250a  \u250a14\u250a    lastMessage(chat) {\n \u250a14\u250a15\u250a      const lastMessage = chat.messages[chat.messages.length - 1];\n \u250a15\u250a16\u250a\n-\u250a16\u250a  \u250a      return messages.find((m) => m.id === lastMessage);\n+\u250a  \u250a17\u250a      return messages.find((m) => m.id === lastMessage) || null;\n \u250a17\u250a18\u250a    },\n \u250a18\u250a19\u250a  },\n \u250a19\u250a20\u250a\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -22,22 +23,24 @@\n \u250a22\u250a23\u250a      return chats;\n \u250a23\u250a24\u250a    },\n \u250a24\u250a25\u250a\n-\u250a25\u250a  \u250a    chat(root: any, { chatId }: any) {\n-\u250a26\u250a  \u250a      return chats.find(c => c.id === chatId);\n+\u250a  \u250a26\u250a    chat(root, { chatId }) {\n+\u250a  \u250a27\u250a      return chats.find((c) => c.id === chatId) || null;\n \u250a27\u250a28\u250a    },\n \u250a28\u250a29\u250a  },\n \u250a29\u250a30\u250a\n \u250a30\u250a31\u250a  Mutation: {\n-\u250a31\u250a  \u250a    addMessage(root: any, { chatId, content }: any) {\n-\u250a32\u250a  \u250a      const chatIndex = chats.findIndex(c => c.id === chatId);\n+\u250a  \u250a32\u250a    addMessage(root, { chatId, content }) {\n+\u250a  \u250a33\u250a      const chatIndex = chats.findIndex((c) => c.id === chatId);\n \u250a33\u250a34\u250a\n \u250a34\u250a35\u250a      if (chatIndex === -1) return null;\n \u250a35\u250a36\u250a\n \u250a36\u250a37\u250a      const chat = chats[chatIndex];\n \u250a37\u250a38\u250a\n-\u250a38\u250a  \u250a      const messagesIds = messages.map(currentMessage => Number(currentMessage.id));\n+\u250a  \u250a39\u250a      const messagesIds = messages.map((currentMessage) =>\n+\u250a  \u250a40\u250a        Number(currentMessage.id)\n+\u250a  \u250a41\u250a      );\n \u250a39\u250a42\u250a      const messageId = String(Math.max(...messagesIds) + 1);\n-\u250a40\u250a  \u250a      const message = {\n+\u250a  \u250a43\u250a      const message: Message = {\n \u250a41\u250a44\u250a        id: messageId,\n \u250a42\u250a45\u250a        createdAt: new Date(),\n \u250a43\u250a46\u250a        content,\n")),(0,r.kt)("p",null,"We will now repeat the same process on ",(0,r.kt)("strong",{parentName:"p"},"Client")," side with few tweaks. Again, we will install GraphQL Code Generator:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ yarn add @graphql-codegen/cli@1.14.0 --dev\n")),(0,r.kt)("p",null,"And we will define a script:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "codegen": "graphql-codegen"\n}\n')),(0,r.kt)("p",null,"This time around, because we're in the client, we will define a set of glob paths that will specify which files contain GraphQL documents.\nGraphQL Code Generator is smart enough to automatically recognize the documents within these files by looking at the ",(0,r.kt)("inlineCode",{parentName:"p"},"gql")," template literal calls using the ",(0,r.kt)("inlineCode",{parentName:"p"},"typescript-operations")," package.\nWe will be using a plugin called ",(0,r.kt)("inlineCode",{parentName:"p"},"typescript-react-apollo")," to generate React/Apollo-GraphQL hooks that can be used in our function components.\nLet's install the necessary plugins:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ yarn add @graphql-codegen/cli@1.14.0 @graphql-codegen/typescript@1.14.0 @graphql-codegen/typescript-operations@1.14.0 @graphql-codegen/typescript-react-apollo@1.14.0 @graphql-codegen/add@1.14.0\n")),(0,r.kt)("p",null,"And we will write the ",(0,r.kt)("inlineCode",{parentName:"p"},"codegen.yml")," file:"),(0,r.kt)("h4",{id:"client-step-91-setup-graphql-code-generator"},(0,r.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/ee4adc10aa0ad2120d9d4dfff30e20f247131d24"},(0,r.kt)("strong",{parentName:"a"},"Client")," Step 9.1: Setup GraphQL Code Generator")),(0,r.kt)("h5",{id:"added-codegenyml-1"},"Added codegen.yml"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,17 @@\n+\u250a  \u250a 1\u250aschema: ../WhatsApp-Clone-Server/schema/typeDefs.graphql\n+\u250a  \u250a 2\u250adocuments: './src/**/*.{tsx,ts}'\n+\u250a  \u250a 3\u250aoverwrite: true\n+\u250a  \u250a 4\u250agenerates:\n+\u250a  \u250a 5\u250a  ./src/graphql/types.tsx:\n+\u250a  \u250a 6\u250a    plugins:\n+\u250a  \u250a 7\u250a      - add: '/* eslint-disable */'\n+\u250a  \u250a 8\u250a      - typescript\n+\u250a  \u250a 9\u250a      - typescript-operations\n+\u250a  \u250a10\u250a      - typescript-react-apollo\n+\u250a  \u250a11\u250a    # The combined options of all provided plug-ins\n+\u250a  \u250a12\u250a    # More information about the options below:\n+\u250a  \u250a13\u250a    # graphql-code-generator.com/docs/plugins/typescript-react-apollo#configuration\n+\u250a  \u250a14\u250a    config:\n+\u250a  \u250a15\u250a      withHOC: false\n+\u250a  \u250a16\u250a      withHooks: true\n+\u250a  \u250a17\u250a      withComponent: false\n")),(0,r.kt)("p",null,"Notice that we sent the schema as a local path.\nWe could have also provided a GraphQL endpoint that exposes a GraphQL schema.\nThis way if there's an existing running GraphQL API, we can generate TypeScript types out of it, such as GitHub's GraphQL API.\nThe advantages of providing a local path is that the server doesn't have to be running in order to generate types, which is more comfortable in development, and we can bypass authentication if the endpoint is guarded with such mechanism.\nThis will be useful in further chapters when we're introduced to the concept of authentication."),(0,r.kt)("p",null,"Be sure to add a .gitignore rule because we want to run the generator every time there is a change and don't want to rely on old generated types:"),(0,r.kt)("h4",{id:"client-step-91-setup-graphql-code-generator-1"},(0,r.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/ee4adc10aa0ad2120d9d4dfff30e20f247131d24"},(0,r.kt)("strong",{parentName:"a"},"Client")," Step 9.1: Setup GraphQL Code Generator")),(0,r.kt)("h5",{id:"changed-gitignore-1"},"Changed .gitignore"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -21,3 +21,5 @@\n \u250a21\u250a21\u250anpm-debug.log*\n \u250a22\u250a22\u250ayarn-debug.log*\n \u250a23\u250a23\u250ayarn-error.log*\n+\u250a  \u250a24\u250a\n+\u250a  \u250a25\u250asrc/graphql/types.tsx\n")),(0,r.kt)("p",null,"Now we have TypeScript types available to us and we can replace ",(0,r.kt)("inlineCode",{parentName:"p"},"useQuery()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"useMutation()")," calls with the generated React hooks.\nLet's use those and also remove all the old manual typings:"),(0,r.kt)("h4",{id:"client-step-92-use-graphql-codegen-hooks"},(0,r.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/afc9b4475cc25223710567d9dc1561a161cd244e"},(0,r.kt)("strong",{parentName:"a"},"Client")," Step 9.2: Use GraphQL Codegen hooks")),(0,r.kt)("h5",{id:"changed-srccomponentschatroomscreenchatnavbartsx"},"Changed src","/","components","/","ChatRoomScreen","/","ChatNavbar.tsx"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -5,7 +5,6 @@\n \u250a 5\u250a 5\u250aimport { useCallback } from 'react';\n \u250a 6\u250a 6\u250aimport styled from 'styled-components';\n \u250a 7\u250a 7\u250aimport { History } from 'history';\n-\u250a 8\u250a  \u250aimport { ChatQueryResult } from './index';\n \u250a 9\u250a 8\u250a\n \u250a10\u250a 9\u250aconst Container = styled(Toolbar)`\n \u250a11\u250a10\u250a  padding: 0;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -37,7 +36,10 @@\n \u250a37\u250a36\u250a\n \u250a38\u250a37\u250ainterface ChatNavbarProps {\n-\u250a40\u250a  \u250a  chat: ChatQueryResult;\n+\u250a  \u250a39\u250a  chat?: {\n+\u250a  \u250a40\u250a    picture?: string | null;\n+\u250a  \u250a41\u250a    name?: string | null;\n+\u250a  \u250a42\u250a  };\n \u250a41\u250a43\u250a}\n \u250a42\u250a44\u250a\n \u250a43\u250a45\u250aconst ChatNavbar: React.FC<ChatNavbarProps> = ({ chat }) => {\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},'@@ -50,8 +52,12 @@\n \u250a50\u250a52\u250a      <BackButton data-testid="back-button" onClick={navBack}>\n \u250a51\u250a53\u250a        <ArrowBackIcon />\n \u250a52\u250a54\u250a      </BackButton>\n-\u250a53\u250a  \u250a      <Picture data-testid="chat-picture" src={chat.picture} />\n-\u250a54\u250a  \u250a      <Name data-testid="chat-name">{chat.name}</Name>\n+\u250a  \u250a55\u250a      {chat && chat.picture && chat.name && (\n+\u250a  \u250a56\u250a        <>\n+\u250a  \u250a57\u250a          <Picture data-testid="chat-picture" src={chat.picture} />\n+\u250a  \u250a58\u250a          <Name data-testid="chat-name">{chat.name}</Name>\n+\u250a  \u250a59\u250a        </>\n+\u250a  \u250a60\u250a      )}\n \u250a55\u250a61\u250a    </Container>\n \u250a56\u250a62\u250a  );\n \u250a57\u250a63\u250a};\n')),(0,r.kt)("h5",{id:"changed-srccomponentschatroomscreenmessageslisttsx"},"Changed src","/","components","/","ChatRoomScreen","/","MessagesList.tsx"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -3,7 +3,6 @@\n \u250a3\u250a3\u250aimport { useEffect, useRef } from 'react';\n \u250a4\u250a4\u250aimport ReactDOM from 'react-dom';\n \u250a5\u250a5\u250aimport styled from 'styled-components';\n-\u250a6\u250a \u250aimport { ChatQueryMessage } from './index';\n \u250a7\u250a6\u250a\n \u250a8\u250a7\u250aconst Container = styled.div`\n \u250a9\u250a8\u250a  display: block;\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -62,8 +61,13 @@\n \u250a62\u250a61\u250a  font-size: 12px;\n \u250a63\u250a62\u250a`;\n \u250a64\u250a63\u250a\n+\u250a  \u250a64\u250ainterface Message {\n+\u250a  \u250a65\u250a  id: string | null;\n+\u250a  \u250a66\u250a  content: string | null;\n+\u250a  \u250a67\u250a  createdAt: string | null;\n+\u250a  \u250a68\u250a}\n \u250a65\u250a69\u250ainterface MessagesListProps {\n-\u250a66\u250a  \u250a  messages: Array<ChatQueryMessage>;\n+\u250a  \u250a70\u250a  messages: Array<Message>;\n \u250a67\u250a71\u250a}\n \u250a68\u250a72\u250a\n \u250a69\u250a73\u250aconst MessagesList: React.FC<MessagesListProps> = ({ messages }) => {\n")),(0,r.kt)("h5",{id:"changed-srccomponentschatroomscreenindextsx"},"Changed src","/","components","/","ChatRoomScreen","/","index.tsx"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -2,12 +2,16 @@\n \u250a 2\u250a 2\u250aimport gql from 'graphql-tag';\n \u250a 3\u250a 3\u250aimport React from 'react';\n \u250a 4\u250a 4\u250aimport { useCallback } from 'react';\n-\u250a 5\u250a  \u250aimport { useQuery, useMutation } from '@apollo/react-hooks';\n \u250a 6\u250a 5\u250aimport styled from 'styled-components';\n \u250a 7\u250a 6\u250aimport ChatNavbar from './ChatNavbar';\n \u250a 8\u250a 7\u250aimport MessageInput from './MessageInput';\n \u250a 9\u250a 8\u250aimport MessagesList from './MessagesList';\n \u250a10\u250a 9\u250aimport { useParams } from 'react-router-dom';\n+\u250a  \u250a10\u250aimport {\n+\u250a  \u250a11\u250a  ChatsQuery,\n+\u250a  \u250a12\u250a  useGetChatQuery,\n+\u250a  \u250a13\u250a  useAddMessageMutation,\n+\u250a  \u250a14\u250a} from '../../graphql/types';\n \u250a11\u250a15\u250aimport * as queries from '../../graphql/queries';\n \u250a12\u250a16\u250aimport * as fragments from '../../graphql/fragments';\n \u250a13\u250a17\u250a\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -18,6 +22,7 @@\n \u250a18\u250a22\u250a  height: 100vh;\n \u250a19\u250a23\u250a`;\n \u250a20\u250a24\u250a\n+\u250a  \u250a25\u250a// eslint-disable-next-line\n \u250a21\u250a26\u250aconst getChatQuery = gql`\n \u250a22\u250a27\u250a  query GetChat($chatId: ID!) {\n \u250a23\u250a28\u250a    chat(chatId: $chatId) {\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -27,6 +32,7 @@\n \u250a27\u250a32\u250a  ${fragments.fullChat}\n \u250a28\u250a33\u250a`;\n \u250a29\u250a34\u250a\n+\u250a  \u250a35\u250a// eslint-disable-next-line\n \u250a30\u250a36\u250aconst addMessageMutation = gql`\n \u250a31\u250a37\u250a  mutation AddMessage($chatId: ID!, $content: String!) {\n \u250a32\u250a38\u250a    addMessage(chatId: $chatId, content: $content) {\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -41,21 +47,6 @@\n \u250a43\u250a49\u250a\n-\u250a44\u250a  \u250aexport interface ChatQueryMessage {\n-\u250a45\u250a  \u250a  id: string;\n-\u250a46\u250a  \u250a  content: string;\n-\u250a47\u250a  \u250a  createdAt: Date;\n-\u250a48\u250a  \u250a}\n-\u250a49\u250a  \u250a\n-\u250a50\u250a  \u250aexport interface ChatQueryResult {\n-\u250a51\u250a  \u250a  id: string;\n-\u250a52\u250a  \u250a  name: string;\n-\u250a53\u250a  \u250a  picture: string;\n-\u250a54\u250a  \u250a  messages: Array<ChatQueryMessage>;\n-\u250a55\u250a  \u250a}\n-\u250a56\u250a  \u250a\n-\u250a57\u250a  \u250atype OptionalChatQueryResult = ChatQueryResult | null;\n-\u250a58\u250a  \u250a\n \u250a59\u250a50\u250ainterface ChatsResult {\n \u250a60\u250a51\u250a  chats: any[];\n \u250a61\u250a52\u250a}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -64,14 +55,20 @@\n \u250a66\u250a57\u250a  const { chatId } = useParams<{ chatId: string }>(),\n-\u250a67\u250a  \u250a  const { data } = useQuery<any>(getChatQuery, {\n+\u250a  \u250a58\u250a  const { data, loading } = useGetChatQuery({\n \u250a68\u250a59\u250a    variables: { chatId },\n \u250a69\u250a60\u250a  });\n-\u250a70\u250a  \u250a  const chat = data?.chat;\n-\u250a71\u250a  \u250a  const [addMessage] = useMutation(addMessageMutation);\n+\u250a  \u250a61\u250a\n+\u250a  \u250a62\u250a  const [addMessage] = useAddMessageMutation();\n \u250a72\u250a63\u250a\n \u250a73\u250a64\u250a  const onSendMessage = useCallback(\n \u250a74\u250a65\u250a    (content: string) => {\n+\u250a  \u250a66\u250a      if (data === undefined) {\n+\u250a  \u250a67\u250a        return null;\n+\u250a  \u250a68\u250a      }\n+\u250a  \u250a69\u250a      const chat = data.chat;\n+\u250a  \u250a70\u250a      if (chat === null) return null;\n+\u250a  \u250a71\u250a\n \u250a75\u250a72\u250a      addMessage({\n \u250a76\u250a73\u250a        variables: { chatId, content },\n \u250a77\u250a74\u250a        optimisticResponse: {\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -88,11 +85,10 @@\n \u250a88\u250a85\u250a            type FullChat = { [key: string]: any };\n \u250a89\u250a86\u250a            let fullChat;\n \u250a90\u250a87\u250a            const chatIdFromStore = defaultDataIdFromObject(chat);\n-\u250a91\u250a  \u250a\n+\u250a  \u250a88\u250a\n \u250a92\u250a89\u250a            if (chatIdFromStore === null) {\n \u250a93\u250a90\u250a              return;\n \u250a94\u250a91\u250a            }\n-\u250a95\u250a  \u250a\n \u250a96\u250a92\u250a            try {\n \u250a97\u250a93\u250a              fullChat = client.readFragment<FullChat>({\n \u250a98\u250a94\u250a                id: chatIdFromStore,\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -102,21 +98,22 @@\n \u250a102\u250a 98\u250a            } catch (e) {\n \u250a103\u250a 99\u250a              return;\n \u250a104\u250a100\u250a            }\n-\u250a105\u250a   \u250a\n-\u250a106\u250a   \u250a            if (fullChat === null ||\n-\u250a107\u250a   \u250a                fullChat.messages === null ||\n-\u250a108\u250a   \u250a                data === null ||\n-\u250a109\u250a   \u250a                data.addMessage === null ||\n-\u250a110\u250a   \u250a                data.addMessage.id === null) {\n+\u250a   \u250a101\u250a\n+\u250a   \u250a102\u250a            if (fullChat === null || fullChat.messages === null) {\n \u250a111\u250a103\u250a              return;\n \u250a112\u250a104\u250a            }\n-\u250a113\u250a   \u250a            if (fullChat.messages.some((currentMessage: any) => currentMessage.id === data.addMessage.id)){\n+\u250a   \u250a105\u250a            if (\n+\u250a   \u250a106\u250a              fullChat.messages.some(\n+\u250a   \u250a107\u250a                (currentMessage: any) =>\n+\u250a   \u250a108\u250a                  data.addMessage && currentMessage.id === data.addMessage.id\n+\u250a   \u250a109\u250a              )\n+\u250a   \u250a110\u250a            ) {\n \u250a114\u250a111\u250a              return;\n \u250a115\u250a112\u250a            }\n-\u250a116\u250a   \u250a\n+\u250a   \u250a113\u250a\n \u250a117\u250a114\u250a            fullChat.messages.push(data.addMessage);\n \u250a118\u250a115\u250a            fullChat.lastMessage = data.addMessage;\n-\u250a119\u250a   \u250a\n+\u250a   \u250a116\u250a\n \u250a120\u250a117\u250a            client.writeFragment({\n \u250a121\u250a118\u250a              id: chatIdFromStore,\n \u250a122\u250a119\u250a              fragment: fragments.fullChat,\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -124,31 +121,30 @@\n \u250a124\u250a121\u250a              data: fullChat,\n \u250a125\u250a122\u250a            });\n \u250a126\u250a123\u250a\n-\u250a127\u250a   \u250a            let clientChatsData;\n+\u250a   \u250a124\u250a            let clientChatsData: ChatsQuery | null;\n \u250a128\u250a125\u250a            try {\n-\u250a129\u250a   \u250a              clientChatsData = client.readQuery<ChatsResult>({\n+\u250a   \u250a126\u250a              clientChatsData = client.readQuery({\n \u250a130\u250a127\u250a                query: queries.chats,\n \u250a131\u250a128\u250a              });\n \u250a132\u250a129\u250a            } catch (e) {\n \u250a133\u250a130\u250a              return;\n \u250a134\u250a131\u250a            }\n-\u250a135\u250a   \u250a\n-\u250a136\u250a   \u250a            if (!clientChatsData || clientChatsData === null) {\n-\u250a137\u250a   \u250a              return null;\n-\u250a138\u250a   \u250a            }\n-\u250a139\u250a   \u250a            if (!clientChatsData.chats || clientChatsData.chats === undefined) {\n+\u250a   \u250a132\u250a\n+\u250a   \u250a133\u250a            if (!clientChatsData || !clientChatsData.chats) {\n \u250a140\u250a134\u250a              return null;\n \u250a141\u250a135\u250a            }\n \u250a142\u250a136\u250a            const chats = clientChatsData.chats;\n-\u250a143\u250a   \u250a\n-\u250a144\u250a   \u250a            const chatIndex = chats.findIndex((currentChat: any) => currentChat.id === chatId);\n+\u250a   \u250a137\u250a\n+\u250a   \u250a138\u250a            const chatIndex = chats.findIndex(\n+\u250a   \u250a139\u250a              (currentChat: any) => currentChat.id === chatId\n+\u250a   \u250a140\u250a            );\n \u250a145\u250a141\u250a            if (chatIndex === -1) return;\n \u250a146\u250a142\u250a            const chatWhereAdded = chats[chatIndex];\n \u250a147\u250a143\u250a\n \u250a148\u250a144\u250a            // The chat will appear at the top of the ChatsList component\n \u250a149\u250a145\u250a            chats.splice(chatIndex, 1);\n \u250a150\u250a146\u250a            chats.unshift(chatWhereAdded);\n-\u250a151\u250a   \u250a\n+\u250a   \u250a147\u250a\n \u250a152\u250a148\u250a            client.writeQuery({\n \u250a153\u250a149\u250a              query: queries.chats,\n \u250a154\u250a150\u250a              data: { chats: chats },\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -157,15 +153,22 @@\n \u250a157\u250a153\u250a        },\n \u250a158\u250a154\u250a      });\n \u250a159\u250a155\u250a    },\n-\u250a160\u250a   \u250a    [chat, chatId, addMessage]\n+\u250a   \u250a156\u250a    [data, chatId, addMessage]\n \u250a161\u250a157\u250a  );\n \u250a162\u250a158\u250a\n-\u250a163\u250a   \u250a  if (!chat) return null;\n+\u250a   \u250a159\u250a  if (data === undefined) {\n+\u250a   \u250a160\u250a    return null;\n+\u250a   \u250a161\u250a  }\n+\u250a   \u250a162\u250a  const chat = data.chat;\n+\u250a   \u250a163\u250a  const loadingChat = loading;\n+\u250a   \u250a164\u250a\n+\u250a   \u250a165\u250a  if (loadingChat) return null;\n+\u250a   \u250a166\u250a  if (chat === null) return null;\n \u250a164\u250a167\u250a\n \u250a165\u250a168\u250a  return (\n \u250a166\u250a169\u250a    <Container>\n \u250a167\u250a170\u250a      <ChatNavbar chat={chat} />\n-\u250a168\u250a   \u250a      {chat.messages && <MessagesList messages={chat.messages} />}\n+\u250a   \u250a171\u250a      {chat?.messages && <MessagesList messages={chat.messages} />}\n \u250a169\u250a172\u250a      <MessageInput onSendMessage={onSendMessage} />\n \u250a170\u250a173\u250a    </Container>\n \u250a171\u250a174\u250a  );\n")),(0,r.kt)("h5",{id:"changed-srccomponentschatslistscreenchatslisttsx"},"Changed src","/","components","/","ChatsListScreen","/","ChatsList.tsx"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -4,8 +4,7 @@\n \u250a 4\u250a 4\u250aimport styled from 'styled-components';\n \u250a 5\u250a 5\u250aimport { useCallback } from 'react';\n \u250a 6\u250a 6\u250aimport { useNavigate } from 'react-router-dom';\n-\u250a 7\u250a  \u250aimport { useQuery } from '@apollo/react-hooks';\n-\u250a 8\u250a  \u250aimport * as queries from '../../graphql/queries';\n+\u250a  \u250a 7\u250aimport { useChatsQuery } from '../../graphql/types';\n \u250a 9\u250a 8\u250a\n \u250a10\u250a 9\u250aconst Container = styled.div`\n \u250a11\u250a10\u250a  height: calc(100% - 56px);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -64,8 +63,6 @@\n \u250a64\u250a63\u250a}\n \u250a65\u250a64\u250a\n \u250a66\u250a65\u250aconst ChatsList: React.FC = () => {\n-\u250a67\u250a  \u250a  const { data } = useQuery<any>(queries.chats);\n-\u250a68\u250a  \u250a\n \u250a69\u250a66\u250a  const navToChat = useCallback(\n \u250a70\u250a67\u250a    (chat) => {\n \u250a71\u250a68\u250a      navigate(`${chat.id}`);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -73,6 +70,8 @@\n \u250a73\u250a70\u250a    [navigate]\n \u250a74\u250a71\u250a  );\n \u250a75\u250a72\u250a\n+\u250a  \u250a73\u250a  const { data } = useChatsQuery();\n+\u250a  \u250a74\u250a\n \u250a76\u250a75\u250a  if (data === undefined || data.chats === undefined) {\n \u250a77\u250a76\u250a    return null;\n \u250a78\u250a77\u250a  }\n")),(0,r.kt)("p",null,"To test if things are working properly, we can address a non existing field in one of the retrieved query results, for example ",(0,r.kt)("inlineCode",{parentName:"p"},"chat.foo")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"useGetChatQuery()"),".\nWe should receive the following typing error when trying to run the project:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'TypeScript error: Property \'foo\' does not exist on type \'{ __typename?: "Chat"; } & { __typename?: "Chat"; } & { messages: ({ __typename?: "Message"; } & { __typename?: "Message"; } & Pick<Message, "id" | "createdAt" | "content">)[]; } & { __typename?: "Chat"; } & Pick<...> & { ...; }\'.  TS2339\n\n    44 |   const addMessage = useAddMessageMutation()\n    45 |\n  > 46 |   console.log(chat.foo)\n       |                    ^\n    47 |\n    48 |   const onSendMessage = useCallback((content) => {\n    49 |     addMessage({\n')),(0,r.kt)("p",null,"TODO: Mappers are not explained - The root types of Message resolvers - doesn\u2019t say much\nwe don\u2019t need to use ",(0,r.kt)("inlineCode",{parentName:"p"},"resolvers as IResolvers"),", there\u2019s a flag for it, in codegen"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},(0,r.kt)("a",{parentName:"th",href:"https://github.com/Urigo/WhatsApp-Clone-Tutorial/tree/master@next/.tortilla/manuals/views/step8.md"},"< Previous Step")),(0,r.kt)("th",{parentName:"tr",align:"right"},(0,r.kt)("a",{parentName:"th",href:"https://github.com/Urigo/WhatsApp-Clone-Tutorial/tree/master@next/.tortilla/manuals/views/step10.md"},"Next Step >"))))))}d.isMDXComponent=!0}}]);