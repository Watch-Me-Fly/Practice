"use strict";(self.webpackChunkovrsea_whatsapp_tuto=self.webpackChunkovrsea_whatsapp_tuto||[]).push([[7302],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=l(n),h=s,u=d["".concat(p,".").concat(h)]||d[h]||m[h]||r;return n?a.createElement(u,o(o({ref:t},c),{},{components:n})):a.createElement(u,o({ref:t},c))}));function h(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,o=new Array(r);o[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:s,o[1]=i;for(var l=2;l<r;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5922:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var a=n(7462),s=(n(7294),n(3905));const r={sidebar_label:"Step 6: Creating an app router and implementing a chat room",sidebar_position:6},o="Step 6: Creating an app router and implementing a chat room",i={unversionedId:"tuto-whatsapp/step6",id:"tuto-whatsapp/step6",title:"Step 6: Creating an app router and implementing a chat room",description:"[//]: # (head-end)",source:"@site/docs/tuto-whatsapp/step6.md",sourceDirName:"tuto-whatsapp",slug:"/tuto-whatsapp/step6",permalink:"/docs/next/tuto-whatsapp/step6",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tuto-whatsapp/step6.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_label:"Step 6: Creating an app router and implementing a chat room",sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Step 5: Testing",permalink:"/docs/next/tuto-whatsapp/step5"},next:{title:"Step 7: Caching with Apollo-Client",permalink:"/docs/next/tuto-whatsapp/step7"}},p={},l=[{value:"<strong>Client</strong> Step 6.1: Add router",id:"client-step-61-add-router",level:4},{value:"Changed src/App.tsx",id:"changed-srcapptsx",level:5},{value:"<strong>Server</strong> Step 4.1: Add messages field to Chat type",id:"server-step-41-add-messages-field-to-chat-type",level:4},{value:"Changed schema/typeDefs.graphql",id:"changed-schematypedefsgraphql",level:5},{value:"<strong>Server</strong> Step 4.1: Add messages field to Chat type",id:"server-step-41-add-messages-field-to-chat-type-1",level:4},{value:"Changed schema/resolvers.ts",id:"changed-schemaresolversts",level:5},{value:"<strong>Server</strong> Step 4.1: Add messages field to Chat type",id:"server-step-41-add-messages-field-to-chat-type-2",level:4},{value:"Changed db.ts",id:"changed-dbts",level:5},{value:"<strong>Server</strong> Step 4.2: Resolve last message based on messages array",id:"server-step-42-resolve-last-message-based-on-messages-array",level:4},{value:"Changed db.ts",id:"changed-dbts-1",level:5},{value:"Changed schema/resolvers.ts",id:"changed-schemaresolversts-1",level:5},{value:"<strong>Server</strong> Step 4.3: Add chat field to Query type",id:"server-step-43-add-chat-field-to-query-type",level:4},{value:"Changed schema/typeDefs.graphql",id:"changed-schematypedefsgraphql-1",level:5},{value:"<strong>Server</strong> Step 4.3: Add chat field to Query type",id:"server-step-43-add-chat-field-to-query-type-1",level:4},{value:"Changed schema/resolvers.ts",id:"changed-schemaresolversts-2",level:5},{value:"<strong>Server</strong> Step 4.3: Add chat field to Query type",id:"server-step-43-add-chat-field-to-query-type-2",level:4},{value:"Added tests/queries/getChat.test.ts",id:"added-testsqueriesgetchattestts",level:5},{value:"<strong>Server</strong> Step 4.3: Add chat field to Query type",id:"server-step-43-add-chat-field-to-query-type-3",level:4},{value:"<strong>Server</strong> Step 4.3: Add chat field to Query type",id:"server-step-43-add-chat-field-to-query-type-4",level:4},{value:"Added types/apollo-server-testing.d.ts",id:"added-typesapollo-server-testingdts",level:5},{value:"<strong>Client</strong> Step 6.2: Add basic ChatRoomScreen",id:"client-step-62-add-basic-chatroomscreen",level:4},{value:"Added src/components/ChatRoomScreen/index.tsx",id:"added-srccomponentschatroomscreenindextsx",level:5},{value:"<strong>Client</strong> Step 6.3: Navigate to chat on click",id:"client-step-63-navigate-to-chat-on-click",level:4},{value:"Changed src/components/ChatsListScreen/ChatsList.tsx",id:"changed-srccomponentschatslistscreenchatslisttsx",level:5},{value:"<strong>Client</strong> Step 6.6: Implement ChatRoomScreen components",id:"client-step-66-implement-chatroomscreen-components",level:4},{value:"Added src/components/ChatRoomScreen/ChatNavbar.tsx",id:"added-srccomponentschatroomscreenchatnavbartsx",level:5},{value:"<strong>Client</strong> Step 6.6: Implement ChatRoomScreen components",id:"client-step-66-implement-chatroomscreen-components-1",level:4},{value:"Added src/components/ChatRoomScreen/MessagesList.tsx",id:"added-srccomponentschatroomscreenmessageslisttsx",level:5},{value:"<strong>Client</strong> Step 6.6: Implement ChatRoomScreen components",id:"client-step-66-implement-chatroomscreen-components-2",level:4},{value:"Added src/components/ChatRoomScreen/MessageInput.tsx",id:"added-srccomponentschatroomscreenmessageinputtsx",level:5},{value:"<strong>Client</strong> Step 6.6: Implement ChatRoomScreen components",id:"client-step-66-implement-chatroomscreen-components-3",level:4},{value:"Changed src/components/ChatRoomScreen/index.tsx",id:"changed-srccomponentschatroomscreenindextsx",level:5},{value:"<strong>Client</strong> Step 6.7: Define onSendMessage callback",id:"client-step-67-define-onsendmessage-callback",level:4},{value:"Changed src/components/ChatRoomScreen/MessageInput.tsx",id:"changed-srccomponentschatroomscreenmessageinputtsx",level:5},{value:"Changed src/components/ChatRoomScreen/index.tsx",id:"changed-srccomponentschatroomscreenindextsx-1",level:5},{value:"<strong>Client</strong> Step 6.8: Reset scroller on message sent",id:"client-step-68-reset-scroller-on-message-sent",level:4},{value:"Changed src/components/ChatRoomScreen/MessagesList.tsx",id:"changed-srccomponentschatroomscreenmessageslisttsx",level:5}],c={toc:l};function m(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"step-6-creating-an-app-router-and-implementing-a-chat-room"},"Step 6: Creating an app router and implementing a chat room"),(0,s.kt)("p",null,"In this chapter we will learn how to build a chat room screen.\nIn order to navigate between different screens, we will setup a router."),(0,s.kt)("p",null,"Since we're gonna have two screens in our app now - ",(0,s.kt)("inlineCode",{parentName:"p"},"ChatsListScreen")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"ChatRoomScreen"),", we will need a router that will be able to alternate between them.\nWe will be using the ",(0,s.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/react-router-dom"},(0,s.kt)("inlineCode",{parentName:"a"},"react-router-dom"))," package to manage the routes of the application:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"$ yarn add react-router-dom @types/react-router-dom\n")),(0,s.kt)("p",null,"And we will implement a router directly in the ",(0,s.kt)("inlineCode",{parentName:"p"},"<App />")," component:"),(0,s.kt)("h4",{id:"client-step-61-add-router"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/e3a561bf94ad6e55a8b75deb85a1f89a17a31571"},(0,s.kt)("strong",{parentName:"a"},"Client")," Step 6.1: Add router")),(0,s.kt)("h5",{id:"changed-srcapptsx"},"Changed src","/","App.tsx"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,10 +1,18 @@\n \u250a 1\u250a 1\u250aimport React from 'react';\n+\u250a  \u250a 2\u250aimport { BrowserRouter, Route, Routes, Navigate } from 'react-router-dom';\n+\u250a  \u250a 3\u250aimport ChatRoomScreen from './components/ChatRoomScreen';\n \u250a 2\u250a 4\u250aimport ChatsListScreen from './components/ChatsListScreen';\n \u250a 3\u250a 5\u250a\n \u250a 4\u250a 6\u250aconst App: React.FC = () => (\n-\u250a 5\u250a  \u250a  <div>\n-\u250a 6\u250a  \u250a    <ChatsListScreen />\n-\u250a 7\u250a  \u250a  </div>\n+\u250a  \u250a 7\u250a  <BrowserRouter>\n+\u250a  \u250a 8\u250a    <Routes>\n+\u250a  \u250a 9\u250a      <Route path=\"/chats\" element={<ChatsListScreen />} />\n+\u250a  \u250a10\u250a      <Route path=\"/chats/:chatId\" element={<ChatRoomScreen />} />\n+\u250a  \u250a12\u250a      <Route path=\"/\" element={<Navigate to=\"/chats\" />} />\n+\u250a  \u250a11\u250a    </Routes>\n+\u250a  \u250a13\u250a  </BrowserRouter>\n \u250a 8\u250a14\u250a);\n \u250a 9\u250a15\u250a\n \u250a10\u250a16\u250aexport default App;\n")),(0,s.kt)("p",null,"The purpose of a router is to make route managing easy and declarative.\nIt will take care of managing the history within our app and parameterize certain screens according to our need.\nEssentially it's a wrap around the ",(0,s.kt)("inlineCode",{parentName:"p"},"window.history")," object which is also compatible with React.\nI recommend you to go through the ",(0,s.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/History"},"official MDN docs")," if you're not yet familiar with the concept."),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"<Route />")," component represents a path for a route in our application. Using the colon syntax (",(0,s.kt)("inlineCode",{parentName:"p"},":chatId"),") we basically tell the router that the ",(0,s.kt)("inlineCode",{parentName:"p"},"/chat")," route should be followed by a string whose value can later on be addressed via a parameter called ",(0,s.kt)("inlineCode",{parentName:"p"},"chatId")," when navigating to the route. So here's a sum-up of the routes manifest:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"/chats")," - will navigate to the ",(0,s.kt)("inlineCode",{parentName:"li"},"ChatsListScreen"),"."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"/chat/:chatId")," - e.g. ",(0,s.kt)("inlineCode",{parentName:"li"},"/chat/1"),", will navigate to the ",(0,s.kt)("inlineCode",{parentName:"li"},"ChatRoomScreen")," and will parameterize it to show data which is related to chat ID 1."),(0,s.kt)("li",{parentName:"ul"},"Any other route will fallback to the ",(0,s.kt)("inlineCode",{parentName:"li"},"/chats")," route which will redirect us to the ",(0,s.kt)("inlineCode",{parentName:"li"},"ChatsListScreen"),".")),(0,s.kt)("p",null,"Now we will implement the ",(0,s.kt)("inlineCode",{parentName:"p"},"ChatRoomScreen")," so the router can function properly.\nFor now we will make it a plain screen which simply prints out the information of the chat that was clicked so we can have a complete flow,\nand then we will take care of the rest."),(0,s.kt)("p",null,"To do so, we will first implement the ",(0,s.kt)("inlineCode",{parentName:"p"},"chat")," query in our backend.\nThis would be a parameterized query that will provide us with a specific chat according to the received ID,\nand it will be used by the new screen as soon as it is initialized.\nFirst we would update the ",(0,s.kt)("inlineCode",{parentName:"p"},"Chat")," type to contain a ",(0,s.kt)("inlineCode",{parentName:"p"},"messages")," field:"),(0,s.kt)("h4",{id:"server-step-41-add-messages-field-to-chat-type"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/e86306ad714705cf99d2e9b3520a16a9010144e1"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 4.1: Add messages field to Chat type")),(0,s.kt)("h5",{id:"changed-schematypedefsgraphql"},"Changed schema","/","typeDefs.graphql"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -12,6 +12,7 @@\n \u250a12\u250a12\u250a  name: String!\n \u250a13\u250a13\u250a  picture: URL\n \u250a14\u250a14\u250a  lastMessage: Message\n+\u250a  \u250a15\u250a  messages: [Message!]!\n \u250a15\u250a16\u250a}\n \u250a16\u250a17\u250a\n \u250a17\u250a18\u250atype Query {\n")),(0,s.kt)("p",null,"Then we will create the appropriate resolver:"),(0,s.kt)("h4",{id:"server-step-41-add-messages-field-to-chat-type-1"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/e86306ad714705cf99d2e9b3520a16a9010144e1"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 4.1: Add messages field to Chat type")),(0,s.kt)("h5",{id:"changed-schemaresolversts"},"Changed schema","/","resolvers.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -6,6 +6,10 @@\n \u250a 6\u250a 6\u250a  URL: URLResolver,\n \u250a 7\u250a 7\u250a\n \u250a 8\u250a 8\u250a  Chat: {\n+\u250a  \u250a 9\u250a    messages(chat: any) {\n+\u250a  \u250a10\u250a      return messages.filter(m => chat.messages.includes(m.id));\n+\u250a  \u250a11\u250a    },\n+\u250a  \u250a12\u250a\n \u250a 9\u250a13\u250a    lastMessage(chat: any) {\n \u250a10\u250a14\u250a      return messages.find((m) => m.id === chat.lastMessage);\n \u250a11\u250a15\u250a    },\n")),(0,s.kt)("p",null,"And then we will update our DB mock to be aligned with these changes:"),(0,s.kt)("h4",{id:"server-step-41-add-messages-field-to-chat-type-2"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/e86306ad714705cf99d2e9b3520a16a9010144e1"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 4.1: Add messages field to Chat type")),(0,s.kt)("h5",{id:"changed-dbts"},"Changed db.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -29,23 +29,27 @@\n \u250a29\u250a29\u250a    name: 'Ethan Gonzalez',\n \u250a30\u250a30\u250a    picture: 'https://randomuser.me/api/portraits/thumb/men/1.jpg',\n \u250a31\u250a31\u250a    lastMessage: '1',\n+\u250a  \u250a32\u250a    messages: ['1'],\n \u250a32\u250a33\u250a  },\n \u250a33\u250a34\u250a  {\n \u250a34\u250a35\u250a    id: '2',\n \u250a35\u250a36\u250a    name: 'Bryan Wallace',\n \u250a36\u250a37\u250a    picture: 'https://randomuser.me/api/portraits/thumb/men/2.jpg',\n \u250a37\u250a38\u250a    lastMessage: '2',\n+\u250a  \u250a39\u250a    messages: ['2'],\n \u250a38\u250a40\u250a  },\n \u250a39\u250a41\u250a  {\n \u250a40\u250a42\u250a    id: '3',\n \u250a41\u250a43\u250a    name: 'Avery Stewart',\n \u250a42\u250a44\u250a    picture: 'https://randomuser.me/api/portraits/thumb/women/1.jpg',\n \u250a43\u250a45\u250a    lastMessage: '3',\n+\u250a  \u250a46\u250a    messages: ['3'],\n \u250a44\u250a47\u250a  },\n \u250a45\u250a48\u250a  {\n \u250a46\u250a49\u250a    id: '4',\n \u250a47\u250a50\u250a    name: 'Katie Peterson',\n \u250a48\u250a51\u250a    picture: 'https://randomuser.me/api/portraits/thumb/women/2.jpg',\n \u250a49\u250a52\u250a    lastMessage: '4',\n+\u250a  \u250a53\u250a    messages: ['4'],\n \u250a50\u250a54\u250a  },\n \u250a51\u250a55\u250a];\n")),(0,s.kt)("p",null,"This means that when we resolve ",(0,s.kt)("inlineCode",{parentName:"p"},"Chat.lastMessage"),", we should get it directly from the ",(0,s.kt)("inlineCode",{parentName:"p"},"Chat.messages")," field:"),(0,s.kt)("h4",{id:"server-step-42-resolve-last-message-based-on-messages-array"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/5ab032ee20b645e2cac162f4de7473b8dc898fce"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 4.2: Resolve last message based on messages array")),(0,s.kt)("h5",{id:"changed-dbts-1"},"Changed db.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -28,28 +28,24 @@\n \u250a28\u250a28\u250a    id: '1',\n \u250a29\u250a29\u250a    name: 'Ethan Gonzalez',\n \u250a30\u250a30\u250a    picture: 'https://randomuser.me/api/portraits/thumb/men/1.jpg',\n-\u250a31\u250a  \u250a    lastMessage: '1',\n \u250a32\u250a31\u250a    messages: ['1'],\n \u250a33\u250a32\u250a  },\n \u250a34\u250a33\u250a  {\n \u250a35\u250a34\u250a    id: '2',\n \u250a36\u250a35\u250a    name: 'Bryan Wallace',\n \u250a37\u250a36\u250a    picture: 'https://randomuser.me/api/portraits/thumb/men/2.jpg',\n-\u250a38\u250a  \u250a    lastMessage: '2',\n \u250a39\u250a37\u250a    messages: ['2'],\n \u250a40\u250a38\u250a  },\n \u250a41\u250a39\u250a  {\n \u250a42\u250a40\u250a    id: '3',\n \u250a43\u250a41\u250a    name: 'Avery Stewart',\n \u250a44\u250a42\u250a    picture: 'https://randomuser.me/api/portraits/thumb/women/1.jpg',\n-\u250a45\u250a  \u250a    lastMessage: '3',\n \u250a46\u250a43\u250a    messages: ['3'],\n \u250a47\u250a44\u250a  },\n \u250a48\u250a45\u250a  {\n \u250a49\u250a46\u250a    id: '4',\n \u250a50\u250a47\u250a    name: 'Katie Peterson',\n \u250a51\u250a48\u250a    picture: 'https://randomuser.me/api/portraits/thumb/women/2.jpg',\n-\u250a52\u250a  \u250a    lastMessage: '4',\n \u250a53\u250a49\u250a    messages: ['4'],\n \u250a54\u250a50\u250a  },\n \u250a55\u250a51\u250a];\n")),(0,s.kt)("h5",{id:"changed-schemaresolversts-1"},"Changed schema","/","resolvers.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -7,11 +7,13 @@\n \u250a 7\u250a 7\u250a\n \u250a 8\u250a 8\u250a  Chat: {\n \u250a 9\u250a 9\u250a    messages(chat: any) {\n-\u250a10\u250a  \u250a      return messages.filter(m => chat.messages.includes(m.id));\n+\u250a  \u250a10\u250a      return messages.filter((m) => chat.messages.includes(m.id));\n \u250a11\u250a11\u250a    },\n \u250a12\u250a12\u250a\n \u250a13\u250a13\u250a    lastMessage(chat: any) {\n-\u250a14\u250a  \u250a      return messages.find((m) => m.id === chat.lastMessage);\n+\u250a  \u250a14\u250a      const lastMessage = chat.messages[chat.messages.length - 1];\n+\u250a  \u250a15\u250a\n+\u250a  \u250a16\u250a      return messages.find((m) => m.id === lastMessage);\n \u250a15\u250a17\u250a    },\n \u250a16\u250a18\u250a  },\n")),(0,s.kt)("p",null,"Now that we have an updated schema which is relevant to the new screen that we would like to add, we will declare a new query called ",(0,s.kt)("inlineCode",{parentName:"p"},"chat"),":"),(0,s.kt)("h4",{id:"server-step-43-add-chat-field-to-query-type"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/310c97ff1c8af490a4f5972e1c8ded704343f9d7"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 4.3: Add chat field to Query type")),(0,s.kt)("h5",{id:"changed-schematypedefsgraphql-1"},"Changed schema","/","typeDefs.graphql"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -17,4 +17,5 @@\n \u250a17\u250a17\u250a\n \u250a18\u250a18\u250atype Query {\n \u250a19\u250a19\u250a  chats: [Chat!]!\n+\u250a  \u250a20\u250a  chat(chatId: ID!): Chat\n \u250a20\u250a21\u250a}\n")),(0,s.kt)("p",null,"Note that unlike the ",(0,s.kt)("inlineCode",{parentName:"p"},"chats")," query, this time we have a parameter. The parameters are provided to the resolver function as the second parameter as a JSON. Using the provided parameter - the chat ID, we will find and return the relevant chat from the DB:"),(0,s.kt)("h4",{id:"server-step-43-add-chat-field-to-query-type-1"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/310c97ff1c8af490a4f5972e1c8ded704343f9d7"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 4.3: Add chat field to Query type")),(0,s.kt)("h5",{id:"changed-schemaresolversts-2"},"Changed schema","/","resolvers.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -21,6 +21,10 @@\n \u250a21\u250a21\u250a    chats() {\n \u250a22\u250a22\u250a      return chats;\n \u250a23\u250a23\u250a    },\n+\u250a  \u250a24\u250a\n+\u250a  \u250a25\u250a    chat(root: any, { chatId }: any) {\n+\u250a  \u250a26\u250a      return chats.find(c => c.id === chatId);\n+\u250a  \u250a27\u250a    },\n \u250a24\u250a28\u250a  },\n \u250a25\u250a29\u250a};\n \u250a26\u250a30\u250a\n")),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"More about the resolver signature can be read in ",(0,s.kt)("a",{parentName:"p",href:"https://www.apollographql.com/docs/apollo-server/essentials/data.html#type-signature"},"Apollo-GraphQL's official docs page"),".")),(0,s.kt)("p",null,"Now we will add a test suite:"),(0,s.kt)("h4",{id:"server-step-43-add-chat-field-to-query-type-2"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/310c97ff1c8af490a4f5972e1c8ded704343f9d7"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 4.3: Add chat field to Query type")),(0,s.kt)("h5",{id:"added-testsqueriesgetchattestts"},"Added tests","/","queries","/","getChat.test.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,33 @@\n+\u250a  \u250a 1\u250aimport { createTestClient } from 'apollo-server-testing';\n+\u250a  \u250a 2\u250aimport { ApolloServer, gql } from 'apollo-server-express';\n+\u250a  \u250a 3\u250aimport schema from '../../schema';\n+\u250a  \u250a 4\u250a\n+\u250a  \u250a 5\u250adescribe('Query.chat', () => {\n+\u250a  \u250a 6\u250a  it('should fetch specified chat', async () => {\n+\u250a  \u250a 7\u250a    const server = new ApolloServer({ schema });\n+\u250a  \u250a 8\u250a\n+\u250a  \u250a 9\u250a    const { query } = createTestClient(server);\n+\u250a  \u250a10\u250a\n+\u250a  \u250a11\u250a    const res = await query({\n+\u250a  \u250a12\u250a      variables: { chatId: '1' },\n+\u250a  \u250a13\u250a      query: gql`\n+\u250a  \u250a14\u250a        query GetChat($chatId: ID!) {\n+\u250a  \u250a15\u250a          chat(chatId: $chatId) {\n+\u250a  \u250a16\u250a            id\n+\u250a  \u250a17\u250a            name\n+\u250a  \u250a18\u250a            picture\n+\u250a  \u250a19\u250a            lastMessage {\n+\u250a  \u250a20\u250a              id\n+\u250a  \u250a21\u250a              content\n+\u250a  \u250a22\u250a              createdAt\n+\u250a  \u250a23\u250a            }\n+\u250a  \u250a24\u250a          }\n+\u250a  \u250a25\u250a        }\n+\u250a  \u250a26\u250a      `,\n+\u250a  \u250a27\u250a    });\n+\u250a  \u250a28\u250a\n+\u250a  \u250a29\u250a    expect(res.data).toBeDefined();\n+\u250a  \u250a30\u250a    expect(res.errors).toBeUndefined();\n+\u250a  \u250a31\u250a    expect(res.data).toMatchSnapshot();\n+\u250a  \u250a32\u250a  });\n+\u250a  \u250a33\u250a});\n")),(0,s.kt)("p",null,"We can observe the snapshot created by Jest to get a better understanding of how the response should look like:"),(0,s.kt)("h4",{id:"server-step-43-add-chat-field-to-query-type-3"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/310c97ff1c8af490a4f5972e1c8ded704343f9d7"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 4.3: Add chat field to Query type")),(0,s.kt)("p",null,"If you experience any TypeScript related issues with the following error:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"Object literal may only specify known properties, and 'variables' does not exist in type 'Query'.\n")),(0,s.kt)("p",null,"Add the following declaration file to your project:"),(0,s.kt)("h4",{id:"server-step-43-add-chat-field-to-query-type-4"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/310c97ff1c8af490a4f5972e1c8ded704343f9d7"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 4.3: Add chat field to Query type")),(0,s.kt)("h5",{id:"added-typesapollo-server-testingdts"},"Added types","/","apollo-server-testing.d.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,27 @@\n+\u250a  \u250a 1\u250adeclare module 'apollo-server-testing' {\n+\u250a  \u250a 2\u250a  import { ApolloServerBase } from 'apollo-server-core';\n+\u250a  \u250a 3\u250a  import { print, DocumentNode } from 'graphql';\n+\u250a  \u250a 4\u250a  import { GraphQLResponse } from 'graphql-extensions';\n+\u250a  \u250a 5\u250a\n+\u250a  \u250a 6\u250a  type StringOrAst = string | DocumentNode;\n+\u250a  \u250a 7\u250a\n+\u250a  \u250a 8\u250a  // A query must not come with a mutation (and vice versa).\n+\u250a  \u250a 9\u250a  type Query<TVariables> = {\n+\u250a  \u250a10\u250a    query: StringOrAst;\n+\u250a  \u250a11\u250a    mutation?: undefined;\n+\u250a  \u250a12\u250a    variables?: TVariables;\n+\u250a  \u250a13\u250a  };\n+\u250a  \u250a14\u250a\n+\u250a  \u250a15\u250a  type Mutation<TVariables> = {\n+\u250a  \u250a16\u250a    mutation: StringOrAst;\n+\u250a  \u250a17\u250a    query?: undefined;\n+\u250a  \u250a18\u250a    variables?: TVariables;\n+\u250a  \u250a19\u250a  };\n+\u250a  \u250a20\u250a\n+\u250a  \u250a21\u250a  export const createTestClient: <TVariables>(\n+\u250a  \u250a22\u250a    server: ApolloServerBase\n+\u250a  \u250a23\u250a  ) => {\n+\u250a  \u250a24\u250a    query: (query: Query<TVariables>) => Promise<GraphQLResponse>;\n+\u250a  \u250a25\u250a    mutate: (mutation: Mutation<TVariables>) => Promise<GraphQLResponse>;\n+\u250a  \u250a26\u250a  };\n+\u250a  \u250a27\u250a}\n")),(0,s.kt)("p",null,"This is a ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/apollographql/apollo-server/issues/2172"},"known issue")," in the ",(0,s.kt)("inlineCode",{parentName:"p"},"apollo-server-testing")," package and has a pending ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/apollographql/apollo-server/pull/2307"},"fix PR"),".\nNow getting back to the client, let's implement a basic version of the ",(0,s.kt)("inlineCode",{parentName:"p"},"ChatRoomScreen")," where we will fetch the new query and print it to the screen:"),(0,s.kt)("h4",{id:"client-step-62-add-basic-chatroomscreen"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/d13d89f74a84758a6fbd675ad2e20bf763100cd7"},(0,s.kt)("strong",{parentName:"a"},"Client")," Step 6.2: Add basic ChatRoomScreen")),(0,s.kt)("h5",{id:"added-srccomponentschatroomscreenindextsx"},"Added src","/","components","/","ChatRoomScreen","/","index.tsx"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,76 @@\n+\u250a  \u250a 1\u250aimport React from 'react';\n+\u250a  \u250a 2\u250aimport { useMemo, useState } from 'react';\n+\u250a  \u250a 3\u250a\n+\u250a  \u250a 4\u250aconst getChatQuery = `\n+\u250a  \u250a 5\u250a  query GetChat($chatId: ID!) {\n+\u250a  \u250a 6\u250a    chat(chatId: $chatId) {\n+\u250a  \u250a 7\u250a      id\n+\u250a  \u250a 8\u250a      name\n+\u250a  \u250a 9\u250a      picture\n+\u250a  \u250a10\u250a      messages {\n+\u250a  \u250a11\u250a        id\n+\u250a  \u250a12\u250a        content\n+\u250a  \u250a13\u250a        createdAt\n+\u250a  \u250a14\u250a      }\n+\u250a  \u250a15\u250a    }\n+\u250a  \u250a16\u250a  }\n+\u250a  \u250a17\u250a`;\n+\u250a  \u250a18\u250a\n+\u250a  \u250a22\u250a\n+\u250a  \u250a23\u250ainterface ChatQueryMessage {\n+\u250a  \u250a24\u250a  id: string;\n+\u250a  \u250a25\u250a  content: string;\n+\u250a  \u250a26\u250a  createdAt: Date;\n+\u250a  \u250a27\u250a}\n+\u250a  \u250a28\u250a\n+\u250a  \u250a29\u250ainterface ChatQueryResult {\n+\u250a  \u250a30\u250a  id: string;\n+\u250a  \u250a31\u250a  name: string;\n+\u250a  \u250a32\u250a  picture: string;\n+\u250a  \u250a33\u250a  messages: Array<ChatQueryMessage>;\n+\u250a  \u250a34\u250a}\n+\u250a  \u250a35\u250a\n+\u250a  \u250a36\u250atype OptionalChatQueryResult = ChatQueryResult | null;\n+\u250a  \u250a37\u250a\n+\u250a  \u250a38\u250aconst ChatRoomScreen: React.FC = () => {\n+\u250a  \u250a39\u250a  const params = useParams<{ chatId: string }>();\n+\u250a  \u250a40\u250a  const { chatId } = params;\n+\u250a  \u250a41\u250a  useMemo(async () => {\n+\u250a  \u250a42\u250a    const body = await fetch(`${process.env.REACT_APP_SERVER_URL}/graphql`, {\n+\u250a  \u250a43\u250a      method: 'POST',\n+\u250a  \u250a44\u250a      headers: {\n+\u250a  \u250a45\u250a        'Content-Type': 'application/json',\n+\u250a  \u250a46\u250a      },\n+\u250a  \u250a47\u250a      body: JSON.stringify({\n+\u250a  \u250a48\u250a        query: getChatQuery,\n+\u250a  \u250a49\u250a        variables: { chatId },\n+\u250a  \u250a50\u250a      }),\n+\u250a  \u250a51\u250a    });\n+\u250a  \u250a52\u250a    const {\n+\u250a  \u250a53\u250a      data: { chat },\n+\u250a  \u250a54\u250a    } = await body.json();\n+\u250a  \u250a55\u250a    setChat(chat);\n+\u250a  \u250a56\u250a  }, [chatId]);\n+\u250a  \u250a57\u250a\n+\u250a  \u250a58\u250a  if (!chat) return null;\n+\u250a  \u250a59\u250a\n+\u250a  \u250a60\u250a  return (\n+\u250a  \u250a61\u250a    <div>\n+\u250a  \u250a62\u250a      <img src={chat.picture} alt=\"Profile\" />\n+\u250a  \u250a63\u250a      <div>{chat.name}</div>\n+\u250a  \u250a64\u250a      <ul>\n+\u250a  \u250a65\u250a        {chat.messages.map((message) => (\n+\u250a  \u250a66\u250a          <li key={message.id}>\n+\u250a  \u250a67\u250a            <div>{message.content}</div>\n+\u250a  \u250a68\u250a            <div>{message.createdAt}</div>\n+\u250a  \u250a69\u250a          </li>\n+\u250a  \u250a70\u250a        ))}\n+\u250a  \u250a71\u250a      </ul>\n+\u250a  \u250a72\u250a    </div>\n+\u250a  \u250a73\u250a  );\n+\u250a  \u250a74\u250a};\n+\u250a  \u250a75\u250a\n+\u250a  \u250a76\u250aexport default ChatRoomScreen;\n")),(0,s.kt)("p",null,"Note how we used the ",(0,s.kt)("inlineCode",{parentName:"p"},"useParams")," hook in ",(0,s.kt)("inlineCode",{parentName:"p"},"const params = useParams()")," to get the selected chat ID.\nThe ",(0,s.kt)("inlineCode",{parentName:"p"},"params")," value is provided to us by the ",(0,s.kt)("inlineCode",{parentName:"p"},"<Routes />")," component, which is a parent of our ",(0,s.kt)("inlineCode",{parentName:"p"},"ChatRoomScreen")," component. ",(0,s.kt)("inlineCode",{parentName:"p"},"<Routes />")," is called a ",(0,s.kt)("strong",{parentName:"p"},"provider")," component. A provider defines custom hooks that give access to the values it provides, and exposes these hooks to all its children components (deeply: its children's children can use these hooks too).\nThus, you need to be a child of ",(0,s.kt)("inlineCode",{parentName:"p"},"<Routes />")," component in order to call ",(0,s.kt)("inlineCode",{parentName:"p"},"useParams"),". Try to call it outside a ",(0,s.kt)("inlineCode",{parentName:"p"},"Routes")," context, and you'll be facing an error."),(0,s.kt)("p",null,"More about ",(0,s.kt)("inlineCode",{parentName:"p"},"useParams")," can be read in the ",(0,s.kt)("a",{parentName:"p",href:"https://reactrouter.com/docs/en/v6/hooks/use-params"},"official React Router docs page"),".\nMore about context providers on the ",(0,s.kt)("a",{parentName:"p",href:"https://en.reactjs.org/docs/context.html"},"official React docs")),(0,s.kt)("p",null,"So we need to make sure the interface of the ChatRoom component defines those requierements right."),(0,s.kt)("p",null,"Next we will call our server from the component with the right query and store the result on a ",(0,s.kt)("inlineCode",{parentName:"p"},"useState")," hook."),(0,s.kt)("p",null,"Now, because we are using GraphQL, we know the types of the result that we are going to get, so let's create Typescript interfaces that\ndescribe the data we're going to get from the server."),(0,s.kt)("p",null,"If you'll run the application and type ",(0,s.kt)("inlineCode",{parentName:"p"},"/chats/1")," in the URL bar, this is what you should see on the screen:"),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/7648874/54664314-d4096b80-4b1e-11e9-9e06-1323cf7b0abe.png",alt:"naked-chat"})),(0,s.kt)("p",null,"The view has no styling at all but it should be fixed in a moment.\nTo make navigation more convenient we will add an ",(0,s.kt)("inlineCode",{parentName:"p"},"onClick")," listener for each chat item in the ",(0,s.kt)("inlineCode",{parentName:"p"},"ChatsList"),".\nHere is another use of context provider. Using the ",(0,s.kt)("a",{parentName:"p",href:"https://reactrouter.com/docs/en/v6/hooks/use-navigate#usenavigate"},"navigate")," object, provided to us by the ",(0,s.kt)("inlineCode",{parentName:"p"},"<BroswerRouter />")," provider component via the ",(0,s.kt)("inlineCode",{parentName:"p"},"useNavigate")," hook, we will navigate to the correlated ",(0,s.kt)("inlineCode",{parentName:"p"},"ChatRoomScreen"),":"),(0,s.kt)("h4",{id:"client-step-63-navigate-to-chat-on-click"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/7eb7584c64e9658c9ac4c2c6fb6c1ad41cc4361c"},(0,s.kt)("strong",{parentName:"a"},"Client")," Step 6.3: Navigate to chat on click")),(0,s.kt)("h5",{id:"changed-srccomponentschatslistscreenchatslisttsx"},"Changed src","/","components","/","ChatsListScreen","/","ChatsList.tsx"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -2,7 +2,8 @@\n \u250a2\u250a2\u250aimport moment from 'moment';\n \u250a3\u250a3\u250aimport { List, ListItem } from '@material-ui/core';\n \u250a4\u250a4\u250aimport styled from 'styled-components';\n-\u250a5\u250a \u250aimport { useState, useMemo } from 'react';\n+\u250a \u250a5\u250aimport { useCallback, useState, useMemo } from 'react';\n+\u250a \u250a5\u250aimport { useNavigate } from 'react-router-dom';\n \u250a6\u250a6\u250a\n \u250a7\u250a7\u250aconst Container = styled.div`\n \u250a8\u250a8\u250a  height: calc(100% - 56px);\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -71,7 +72,11 @@\n \u250a71\u250a71\u250a  }\n \u250a72\u250a72\u250a`;\n \u250a73\u250a73\u250a\n+\u250a  \u250a74\u250aconst ChatsList: React.FC = () => {\n+\u250a  \u250a75\u250a  const navigate = useNavigate();\n \u250a75\u250a75\u250a  const [chats, setChats] = useState<any[]>([]);\n \u250a76\u250a76\u250a\n \u250a77\u250a77\u250a  useMemo(async () => {\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},'@@ -88,11 +93,22 @@\n \u250a 88\u250a 93\u250a    setChats(chats);\n \u250a 89\u250a 94\u250a  }, []);\n \u250a 90\u250a 95\u250a\n+\u250a   \u250a 96\u250a  const navToChat = useCallback(\n+\u250a   \u250a 97\u250a    (chat) => {\n+\u250a   \u250a 98\u250a      navigate(`${chat.id}`);\n+\u250a   \u250a 99\u250a    },\n+\u250a   \u250a100\u250a    [navigate]\n+\u250a   \u250a101\u250a  );\n+\u250a   \u250a102\u250a\n \u250a 91\u250a103\u250a  return (\n \u250a 92\u250a104\u250a    <Container>\n \u250a 93\u250a105\u250a      <StyledList>\n \u250a 94\u250a106\u250a        {chats.map((chat) => (\n-\u250a 95\u250a   \u250a          <StyledListItem key={chat.id} button>\n+\u250a   \u250a107\u250a          <StyledListItem\n+\u250a   \u250a108\u250a            key={chat.id}\n+\u250a   \u250a109\u250a            data-testid="chat"\n+\u250a   \u250a110\u250a            button\n+\u250a   \u250a111\u250a            onClick={navToChat.bind(null, chat)}>\n \u250a 96\u250a112\u250a            <ChatPicture\n \u250a 97\u250a113\u250a              data-testid="picture"\n \u250a 98\u250a114\u250a              src={chat.picture}\n')),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"useNavigate")," object provides a ",(0,s.kt)("inlineCode",{parentName:"p"},"navigate")," function which changes url. It works relatively to the path specified by the closest ",(0,s.kt)("inlineCode",{parentName:"p"},"<Route path={'my-closest-parent-path'}/>")," parent. By default, ",(0,s.kt)("inlineCode",{parentName:"p"},"navigate('new-path')")," adds the input string preced by a ",(0,s.kt)("inlineCode",{parentName:"p"},"/")," to the current url. in this generic case, it will lead to the path ",(0,s.kt)("inlineCode",{parentName:"p"},"'/my-closest-parent-path/new-path'"),"."),(0,s.kt)("p",null,"More use of ",(0,s.kt)("inlineCode",{parentName:"p"},"useNavigate")," in the ",(0,s.kt)("a",{parentName:"p",href:"https://reactrouter.com/docs/en/v6/hooks/use-navigate"},"official doc")),(0,s.kt)("p",null,"In our specific case, if our selected chat has an id ",(0,s.kt)("inlineCode",{parentName:"p"},"1"),", then  ",(0,s.kt)("inlineCode",{parentName:"p"},"navigate('${chat.id}')")," found in ChatList, which closest Route parent is ",(0,s.kt)("inlineCode",{parentName:"p"},"<Route path={'chats'}/>"),", will lead to url ",(0,s.kt)("inlineCode",{parentName:"p"},"/chats/1"),"."),(0,s.kt)("p",null,"The final screen will be composed out of 3 components:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"A navigation bar."),(0,s.kt)("li",{parentName:"ul"},"A messages list."),(0,s.kt)("li",{parentName:"ul"},"A message input.")),(0,s.kt)("p",null,"We will create a new directory under the path ",(0,s.kt)("inlineCode",{parentName:"p"},"public/assets")," and inside we will download and place a couple of assets which are necessary for our view:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://raw.githubusercontent.com/Urigo/WhatsApp-Clone-Client-Angular/master/src/assets/chat-background.jpg"},"chat-background.jpg")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"https://raw.githubusercontent.com/Urigo/WhatsApp-Clone-Client-Angular/master/src/assets/message-mine.png"},"message-mine.png"))),(0,s.kt)("p",null,"In the main ",(0,s.kt)("inlineCode",{parentName:"p"},"index.ts")," file of the screen we will simply import all 3 in the right order.\nWe will start with the most simple one - the ",(0,s.kt)("inlineCode",{parentName:"p"},"ChatRoomNavbar"),".\nThe navbar should show the picture of the chat we're currently at and its name,\nalong with a back button that will bring us back to the ",(0,s.kt)("inlineCode",{parentName:"p"},"ChatsListScreen"),":"),(0,s.kt)("h4",{id:"client-step-66-implement-chatroomscreen-components"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/d75927b70aa0e2f66bd30d907578a58bd40d8ba3"},(0,s.kt)("strong",{parentName:"a"},"Client")," Step 6.6: Implement ChatRoomScreen components")),(0,s.kt)("h5",{id:"added-srccomponentschatroomscreenchatnavbartsx"},"Added src","/","components","/","ChatRoomScreen","/","ChatNavbar.tsx"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,59 @@\n+\u250a  \u250a 1\u250aimport Button from '@material-ui/core/Button';\n+\u250a  \u250a 2\u250aimport Toolbar from '@material-ui/core/Toolbar';\n+\u250a  \u250a 3\u250aimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\n+\u250a  \u250a 4\u250aimport React from 'react';\n+\u250a  \u250a 5\u250aimport { useCallback } from 'react';\n+\u250a  \u250a 6\u250aimport styled from 'styled-components';\n+\u250a  \u250a 7\u250aimport { useNavigate } from 'react-router-dom';\n+\u250a  \u250a 8\u250aimport { ChatQueryResult } from './index';\n+\u250a  \u250a 9\u250a\n+\u250a  \u250a10\u250aconst Container = styled(Toolbar)`\n+\u250a  \u250a11\u250a  padding: 0;\n+\u250a  \u250a12\u250a  display: flex;\n+\u250a  \u250a13\u250a  flex-direction: row;\n+\u250a  \u250a14\u250a  background-color: var(--primary-bg);\n+\u250a  \u250a15\u250a  color: var(--primary-text);\n+\u250a  \u250a16\u250a`;\n+\u250a  \u250a17\u250a\n+\u250a  \u250a18\u250aconst BackButton = styled(Button)`\n+\u250a  \u250a19\u250a  svg {\n+\u250a  \u250a20\u250a    color: var(--primary-text);\n+\u250a  \u250a21\u250a  }\n+\u250a  \u250a22\u250a`;\n+\u250a  \u250a23\u250a\n+\u250a  \u250a24\u250aconst Picture = styled.img`\n+\u250a  \u250a25\u250a  height: 40px;\n+\u250a  \u250a26\u250a  width: 40px;\n+\u250a  \u250a27\u250a  margin-top: 3px;\n+\u250a  \u250a28\u250a  margin-left: -22px;\n+\u250a  \u250a29\u250a  object-fit: cover;\n+\u250a  \u250a30\u250a  padding: 5px;\n+\u250a  \u250a31\u250a  border-radius: 50%;\n+\u250a  \u250a32\u250a`;\n+\u250a  \u250a33\u250a\n+\u250a  \u250a34\u250aconst Name = styled.div`\n+\u250a  \u250a35\u250a  line-height: 56px;\n+\u250a  \u250a36\u250a`;\n+\u250a  \u250a37\u250a\n+\u250a  \u250a38\u250ainterface ChatNavbarProps {\n+\u250a  \u250a40\u250a  chat: ChatQueryResult;\n+\u250a  \u250a41\u250a}\n+\u250a  \u250a42\u250a\n+\u250a  \u250a43\u250aconst ChatNavbar: React.FC<ChatNavbarProps> = ({ chat }) => {\n+\u250a  \u250a44\u250a  const navigate = useNavigate();\n+\u250a  \u250a44\u250a  const navBack = useCallback(() => {\n+\u250a  \u250a45\u250a    navigate('/chats', { replace: true });\n+\u250a  \u250a46\u250a  }, [navigate]);\n+\u250a  \u250a47\u250a\n+\u250a  \u250a48\u250a  return (\n+\u250a  \u250a49\u250a    <Container>\n+\u250a  \u250a50\u250a      <BackButton onClick={navBack}>\n+\u250a  \u250a51\u250a        <ArrowBackIcon />\n+\u250a  \u250a52\u250a      </BackButton>\n+\u250a  \u250a53\u250a      <Picture src={chat.picture} />\n+\u250a  \u250a54\u250a      <Name>{chat.name}</Name>\n+\u250a  \u250a55\u250a    </Container>\n+\u250a  \u250a56\u250a  );\n+\u250a  \u250a57\u250a};\n+\u250a  \u250a58\u250a\n+\u250a  \u250a59\u250aexport default ChatNavbar;\n")),(0,s.kt)("p",null,"Note that we use ",(0,s.kt)("inlineCode",{parentName:"p"},"navigate")," function in another way here. Our goal is to go back to a previous url, thus we need to replace our reference path, not to append a new path to it. The second optional input of ",(0,s.kt)("a",{parentName:"p",href:"https://reactrouter.com/docs/en/v6/hooks/use-navigate"},"navigate")," function set as ",(0,s.kt)("inlineCode",{parentName:"p"},"{ replace: true }")," gives this option."),(0,s.kt)("p",null,"Next, would be the ",(0,s.kt)("inlineCode",{parentName:"p"},"MesagesList")," component, where we will see a scrollable list of all the messages of the active chat:"),(0,s.kt)("h4",{id:"client-step-66-implement-chatroomscreen-components-1"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/d75927b70aa0e2f66bd30d907578a58bd40d8ba3"},(0,s.kt)("strong",{parentName:"a"},"Client")," Step 6.6: Implement ChatRoomScreen components")),(0,s.kt)("h5",{id:"added-srccomponentschatroomscreenmessageslisttsx"},"Added src","/","components","/","ChatRoomScreen","/","MessagesList.tsx"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,78 @@\n+\u250a  \u250a 1\u250aimport moment from 'moment';\n+\u250a  \u250a 2\u250aimport React from 'react';\n+\u250a  \u250a 3\u250aimport styled from 'styled-components';\n+\u250a  \u250a 4\u250aimport { ChatQueryMessage } from './index';\n+\u250a  \u250a 5\u250a\n+\u250a  \u250a 6\u250aconst Container = styled.div`\n+\u250a  \u250a 7\u250a  display: block;\n+\u250a  \u250a 8\u250a  flex: 2;\n+\u250a  \u250a 9\u250a  overflow-y: overlay;\n+\u250a  \u250a10\u250a  padding: 0 15px;\n+\u250a  \u250a11\u250a`;\n+\u250a  \u250a12\u250a\n+\u250a  \u250a13\u250aconst MessageItem = styled.div`\n+\u250a  \u250a14\u250a  float: right;\n+\u250a  \u250a15\u250a  background-color: #dcf8c6;\n+\u250a  \u250a16\u250a  display: inline-block;\n+\u250a  \u250a17\u250a  position: relative;\n+\u250a  \u250a18\u250a  max-width: 100%;\n+\u250a  \u250a19\u250a  border-radius: 7px;\n+\u250a  \u250a20\u250a  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.15);\n+\u250a  \u250a21\u250a  margin-top: 10px;\n+\u250a  \u250a22\u250a  margin-bottom: 10px;\n+\u250a  \u250a23\u250a  clear: both;\n+\u250a  \u250a24\u250a\n+\u250a  \u250a25\u250a  &::after {\n+\u250a  \u250a26\u250a    content: '';\n+\u250a  \u250a27\u250a    display: table;\n+\u250a  \u250a28\u250a    clear: both;\n+\u250a  \u250a29\u250a  }\n+\u250a  \u250a30\u250a\n+\u250a  \u250a31\u250a  &::before {\n+\u250a  \u250a32\u250a    background-image: url(/assets/message-mine.png);\n+\u250a  \u250a33\u250a    content: '';\n+\u250a  \u250a34\u250a    position: absolute;\n+\u250a  \u250a35\u250a    bottom: 3px;\n+\u250a  \u250a36\u250a    width: 12px;\n+\u250a  \u250a37\u250a    height: 19px;\n+\u250a  \u250a38\u250a    right: -11px;\n+\u250a  \u250a39\u250a    background-position: 50% 50%;\n+\u250a  \u250a40\u250a    background-repeat: no-repeat;\n+\u250a  \u250a41\u250a    background-size: contain;\n+\u250a  \u250a42\u250a  }\n+\u250a  \u250a43\u250a`;\n+\u250a  \u250a44\u250a\n+\u250a  \u250a45\u250aconst Contents = styled.div`\n+\u250a  \u250a46\u250a  padding: 5px 7px;\n+\u250a  \u250a47\u250a  word-wrap: break-word;\n+\u250a  \u250a48\u250a\n+\u250a  \u250a49\u250a  &::after {\n+\u250a  \u250a50\u250a    content: ' \\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0';\n+\u250a  \u250a51\u250a    display: inline;\n+\u250a  \u250a52\u250a  }\n+\u250a  \u250a53\u250a`;\n+\u250a  \u250a54\u250a\n+\u250a  \u250a55\u250aconst Timestamp = styled.div`\n+\u250a  \u250a56\u250a  position: absolute;\n+\u250a  \u250a57\u250a  bottom: 2px;\n+\u250a  \u250a58\u250a  right: 7px;\n+\u250a  \u250a59\u250a  color: gray;\n+\u250a  \u250a60\u250a  font-size: 12px;\n+\u250a  \u250a61\u250a`;\n+\u250a  \u250a62\u250a\n+\u250a  \u250a63\u250ainterface MessagesListProps {\n+\u250a  \u250a64\u250a  messages: Array<ChatQueryMessage>;\n+\u250a  \u250a65\u250a}\n+\u250a  \u250a66\u250a\n+\u250a  \u250a67\u250aconst MessagesList: React.FC<MessagesListProps> = ({ messages }) => (\n+\u250a  \u250a68\u250a  <Container>\n+\u250a  \u250a69\u250a    {messages.map((message: any) => (\n+\u250a  \u250a70\u250a      <MessageItem key={message.id}>\n+\u250a  \u250a71\u250a        <Contents>{message.content}</Contents>\n+\u250a  \u250a72\u250a        <Timestamp>{moment(message.createdAt).format('HH:mm')}</Timestamp>\n+\u250a  \u250a73\u250a      </MessageItem>\n+\u250a  \u250a74\u250a    ))}\n+\u250a  \u250a75\u250a  </Container>\n+\u250a  \u250a76\u250a);\n+\u250a  \u250a77\u250a\n+\u250a  \u250a78\u250aexport default MessagesList;\n")),(0,s.kt)("p",null,"And finally, would be the ",(0,s.kt)("inlineCode",{parentName:"p"},"MessageInput")," component which will trigger an event whenever we type and submit a new message:"),(0,s.kt)("h4",{id:"client-step-66-implement-chatroomscreen-components-2"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/d75927b70aa0e2f66bd30d907578a58bd40d8ba3"},(0,s.kt)("strong",{parentName:"a"},"Client")," Step 6.6: Implement ChatRoomScreen components")),(0,s.kt)("h5",{id:"added-srccomponentschatroomscreenmessageinputtsx"},"Added src","/","components","/","ChatRoomScreen","/","MessageInput.tsx"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,53 @@\n+\u250a  \u250a 1\u250aimport Button from '@material-ui/core/Button';\n+\u250a  \u250a 2\u250aimport SendIcon from '@material-ui/icons/Send';\n+\u250a  \u250a 3\u250aimport React from 'react';\n+\u250a  \u250a 4\u250aimport styled from 'styled-components';\n+\u250a  \u250a 5\u250a\n+\u250a  \u250a 6\u250aconst Container = styled.div`\n+\u250a  \u250a 7\u250a  display: flex;\n+\u250a  \u250a 8\u250a  height: 50px;\n+\u250a  \u250a 9\u250a  padding: 5px;\n+\u250a  \u250a10\u250a  width: calc(100% - 10px);\n+\u250a  \u250a11\u250a`;\n+\u250a  \u250a12\u250a\n+\u250a  \u250a13\u250aconst ActualInput = styled.input`\n+\u250a  \u250a14\u250a  width: calc(100% - 50px);\n+\u250a  \u250a15\u250a  border: none;\n+\u250a  \u250a16\u250a  border-radius: 999px;\n+\u250a  \u250a17\u250a  padding: 10px;\n+\u250a  \u250a18\u250a  padding-left: 20px;\n+\u250a  \u250a19\u250a  padding-right: 20px;\n+\u250a  \u250a20\u250a  font-size: 15px;\n+\u250a  \u250a21\u250a  outline: none;\n+\u250a  \u250a22\u250a  box-shadow: 0 1px silver;\n+\u250a  \u250a23\u250a  font-size: 18px;\n+\u250a  \u250a24\u250a  line-height: 45px;\n+\u250a  \u250a25\u250a`;\n+\u250a  \u250a26\u250a\n+\u250a  \u250a27\u250aconst SendButton = styled(Button)`\n+\u250a  \u250a28\u250a  min-width: 50px !important;\n+\u250a  \u250a29\u250a  width: 50px !important;\n+\u250a  \u250a30\u250a  border-radius: 999px !important;\n+\u250a  \u250a31\u250a  background-color: var(--primary-bg) !important;\n+\u250a  \u250a32\u250a  margin: 0 5px !important;\n+\u250a  \u250a33\u250a  margin-right: 0 !important;\n+\u250a  \u250a34\u250a  color: white !important;\n+\u250a  \u250a35\u250a  padding-left: 20px !important;\n+\u250a  \u250a36\u250a\n+\u250a  \u250a37\u250a  svg {\n+\u250a  \u250a38\u250a    margin-left: -3px;\n+\u250a  \u250a39\u250a  }\n+\u250a  \u250a40\u250a`;\n+\u250a  \u250a41\u250a\n+\u250a  \u250a42\u250aconst MessageInput: React.FC = () => {\n+\u250a  \u250a43\u250a  return (\n+\u250a  \u250a44\u250a    <Container>\n+\u250a  \u250a45\u250a      <ActualInput type=\"text\" placeholder=\"Type a message\" />\n+\u250a  \u250a46\u250a      <SendButton variant=\"contained\" color=\"primary\">\n+\u250a  \u250a47\u250a        <SendIcon />\n+\u250a  \u250a48\u250a      </SendButton>\n+\u250a  \u250a49\u250a    </Container>\n+\u250a  \u250a50\u250a  );\n+\u250a  \u250a51\u250a};\n+\u250a  \u250a52\u250a\n+\u250a  \u250a53\u250aexport default MessageInput;\n")),(0,s.kt)("p",null,"Now that we have all 3 components, we will put them all together in the main ",(0,s.kt)("inlineCode",{parentName:"p"},"index.ts")," file:"),(0,s.kt)("h4",{id:"client-step-66-implement-chatroomscreen-components-3"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/d75927b70aa0e2f66bd30d907578a58bd40d8ba3"},(0,s.kt)("strong",{parentName:"a"},"Client")," Step 6.6: Implement ChatRoomScreen components")),(0,s.kt)("h5",{id:"changed-srccomponentschatroomscreenindextsx"},"Changed src","/","components","/","ChatRoomScreen","/","index.tsx"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,5 +1,17 @@\n \u250a 1\u250a 1\u250aimport React from 'react';\n \u250a 2\u250a 2\u250aimport { useMemo, useState } from 'react';\n+\u250a  \u250a 3\u250aimport styled from 'styled-components';\n+\u250a  \u250a 4\u250aimport ChatNavbar from './ChatNavbar';\n+\u250a  \u250a 5\u250aimport MessageInput from './MessageInput';\n+\u250a  \u250a 6\u250aimport MessagesList from './MessagesList';\n+\u250a  \u250a 7\u250a\n+\u250a  \u250a 8\u250a\n+\u250a  \u250a 9\u250aconst Container = styled.div`\n+\u250a  \u250a10\u250a  background: url(/assets/chat-background.jpg);\n+\u250a  \u250a11\u250a  display: flex;\n+\u250a  \u250a12\u250a  flex-flow: column;\n+\u250a  \u250a13\u250a  height: 100vh;\n+\u250a  \u250a14\u250a`;\n \u250a 3\u250a15\u250a\n \u250a 4\u250a16\u250aconst getChatQuery = `\n \u250a 5\u250a17\u250a  query GetChat($chatId: ID!) {\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -18,15 +30,16 @@\n \u250a18\u250a30\u250a\n \u250a19\u250a31\u250ainterface ChatRoomScreenParams {\n \u250a20\u250a32\u250a  chatId: string;\n+\u250a  \u250a33\u250a  history: History;\n \u250a21\u250a34\u250a}\n \u250a22\u250a35\u250a\n-\u250a23\u250a  \u250ainterface ChatQueryMessage {\n+\u250a  \u250a36\u250aexport interface ChatQueryMessage {\n \u250a24\u250a37\u250a  id: string;\n \u250a25\u250a38\u250a  content: string;\n \u250a26\u250a39\u250a  createdAt: Date;\n \u250a27\u250a40\u250a}\n \u250a28\u250a41\u250a\n-\u250a29\u250a  \u250ainterface ChatQueryResult {\n+\u250a  \u250a42\u250aexport interface ChatQueryResult {\n \u250a30\u250a43\u250a  id: string;\n \u250a31\u250a44\u250a  name: string;\n \u250a32\u250a45\u250a  picture: string;\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},'@@ -58,18 +74,11 @@\n \u250a58\u250a74\u250a  if (!chat) return null;\n \u250a59\u250a75\u250a\n \u250a60\u250a76\u250a  return (\n-\u250a61\u250a  \u250a    <div>\n-\u250a62\u250a  \u250a      <img src={chat.picture} alt="Profile" />\n-\u250a63\u250a  \u250a      <div>{chat.name}</div>\n-\u250a64\u250a  \u250a      <ul>\n-\u250a65\u250a  \u250a        {chat.messages.map((message) => (\n-\u250a66\u250a  \u250a          <li key={message.id}>\n-\u250a67\u250a  \u250a            <div>{message.content}</div>\n-\u250a68\u250a  \u250a            <div>{message.createdAt}</div>\n-\u250a69\u250a  \u250a          </li>\n-\u250a70\u250a  \u250a        ))}\n-\u250a71\u250a  \u250a      </ul>\n-\u250a72\u250a  \u250a    </div>\n+\u250a  \u250a77\u250a    <Container>\n+\u250a  \u250a78\u250a      <ChatNavbar chat={chat} />\n+\u250a  \u250a79\u250a      {chat.messages && <MessagesList messages={chat.messages} />}\n+\u250a  \u250a80\u250a      <MessageInput />\n+\u250a  \u250a81\u250a    </Container>\n \u250a73\u250a82\u250a  );\n \u250a74\u250a83\u250a};\n')),(0,s.kt)("p",null,"The view is complete! However the ",(0,s.kt)("inlineCode",{parentName:"p"},"MessageInput")," is not bound to our messages list.\nWe will use the triggered callback to update the chat state, whose changes should appear in the ",(0,s.kt)("inlineCode",{parentName:"p"},"MessagesList")," component in the following render phase:"),(0,s.kt)("h4",{id:"client-step-67-define-onsendmessage-callback"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/ea1eb6d15d05d974e76c636c2d24d034f16a6644"},(0,s.kt)("strong",{parentName:"a"},"Client")," Step 6.7: Define onSendMessage callback")),(0,s.kt)("h5",{id:"changed-srccomponentschatroomscreenmessageinputtsx"},"Changed src","/","components","/","ChatRoomScreen","/","MessageInput.tsx"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -2,6 +2,7 @@\n \u250a2\u250a2\u250aimport SendIcon from '@material-ui/icons/Send';\n \u250a3\u250a3\u250aimport React from 'react';\n \u250a4\u250a4\u250aimport styled from 'styled-components';\n+\u250a \u250a5\u250aimport { useState } from 'react';\n \u250a5\u250a6\u250a\n \u250a6\u250a7\u250aconst Container = styled.div`\n \u250a7\u250a8\u250a  display: flex;\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},'@@ -39,11 +40,43 @@\n \u250a39\u250a40\u250a  }\n \u250a40\u250a41\u250a`;\n \u250a41\u250a42\u250a\n-\u250a42\u250a  \u250aconst MessageInput: React.FC = () => {\n+\u250a  \u250a43\u250ainterface MessageInputProps {\n+\u250a  \u250a44\u250a  onSendMessage(content: string): any;\n+\u250a  \u250a45\u250a}\n+\u250a  \u250a46\u250a\n+\u250a  \u250a47\u250aconst MessageInput: React.FC<MessageInputProps> = ({ onSendMessage }) => {\n+\u250a  \u250a48\u250a  const [message, setMessage] = useState(\'\');\n+\u250a  \u250a49\u250a\n+\u250a  \u250a50\u250a  const onKeyPress = (e: any) => {\n+\u250a  \u250a51\u250a    if (e.charCode === 13) {\n+\u250a  \u250a52\u250a      submitMessage();\n+\u250a  \u250a53\u250a    }\n+\u250a  \u250a54\u250a  };\n+\u250a  \u250a55\u250a\n+\u250a  \u250a56\u250a  const onChange = ({ target }: any) => {\n+\u250a  \u250a57\u250a    setMessage(target.value);\n+\u250a  \u250a58\u250a  };\n+\u250a  \u250a59\u250a\n+\u250a  \u250a60\u250a  const submitMessage = () => {\n+\u250a  \u250a61\u250a    if (!message) return;\n+\u250a  \u250a62\u250a\n+\u250a  \u250a63\u250a    setMessage(\'\');\n+\u250a  \u250a64\u250a\n+\u250a  \u250a65\u250a    if (typeof onSendMessage === \'function\') {\n+\u250a  \u250a66\u250a      onSendMessage(message);\n+\u250a  \u250a67\u250a    }\n+\u250a  \u250a68\u250a  };\n+\u250a  \u250a69\u250a\n \u250a43\u250a70\u250a  return (\n \u250a44\u250a71\u250a    <Container>\n-\u250a45\u250a  \u250a      <ActualInput type="text" placeholder="Type a message" />\n-\u250a46\u250a  \u250a      <SendButton variant="contained" color="primary">\n+\u250a  \u250a72\u250a      <ActualInput\n+\u250a  \u250a73\u250a        type="text"\n+\u250a  \u250a74\u250a        placeholder="Type a message"\n+\u250a  \u250a75\u250a        value={message}\n+\u250a  \u250a76\u250a        onKeyPress={onKeyPress}\n+\u250a  \u250a77\u250a        onChange={onChange}\n+\u250a  \u250a78\u250a      />\n+\u250a  \u250a79\u250a      <SendButton variant="contained" color="primary" onClick={submitMessage}>\n \u250a47\u250a80\u250a        <SendIcon />\n \u250a48\u250a81\u250a      </SendButton>\n \u250a49\u250a82\u250a    </Container>\n')),(0,s.kt)("h5",{id:"changed-srccomponentschatroomscreenindextsx-1"},"Changed src","/","components","/","ChatRoomScreen","/","index.tsx"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,5 +1,5 @@\n \u250a1\u250a1\u250aimport React from 'react';\n-\u250a2\u250a \u250aimport { useMemo, useState } from 'react';\n+\u250a \u250a2\u250aimport { useCallback, useMemo, useState } from 'react';\n \u250a3\u250a3\u250aimport styled from 'styled-components';\n \u250a4\u250a4\u250aimport ChatNavbar from './ChatNavbar';\n \u250a5\u250a5\u250aimport MessageInput from './MessageInput';\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -71,13 +71,31 @@\n \u250a 71\u250a 71\u250a    setChat(chat);\n \u250a 72\u250a 72\u250a  }, [chatId]);\n \u250a 73\u250a 73\u250a\n+\u250a   \u250a 74\u250a  const onSendMessage = useCallback(\n+\u250a   \u250a 75\u250a    (content: string) => {\n+\u250a   \u250a 76\u250a      if (!chat) return null;\n+\u250a   \u250a 77\u250a\n+\u250a   \u250a 78\u250a      const message = {\n+\u250a   \u250a 79\u250a        id: (chat.messages.length + 10).toString(),\n+\u250a   \u250a 80\u250a        createdAt: new Date(),\n+\u250a   \u250a 81\u250a        content,\n+\u250a   \u250a 82\u250a      };\n+\u250a   \u250a 83\u250a\n+\u250a   \u250a 84\u250a      setChat({\n+\u250a   \u250a 85\u250a        ...chat,\n+\u250a   \u250a 86\u250a        messages: chat.messages.concat(message),\n+\u250a   \u250a 87\u250a      });\n+\u250a   \u250a 88\u250a    },\n+\u250a   \u250a 89\u250a    [chat]\n+\u250a   \u250a 90\u250a  );\n+\u250a   \u250a 91\u250a\n \u250a 74\u250a 92\u250a  if (!chat) return null;\n \u250a 75\u250a 93\u250a\n \u250a 76\u250a 94\u250a  return (\n \u250a 77\u250a 95\u250a    <Container>\n \u250a 78\u250a 96\u250a      <ChatNavbar chat={chat} />\n \u250a 79\u250a 97\u250a      {chat.messages && <MessagesList messages={chat.messages} />}\n-\u250a 80\u250a   \u250a      <MessageInput />\n+\u250a   \u250a 98\u250a      <MessageInput onSendMessage={onSendMessage} />\n \u250a 81\u250a 99\u250a    </Container>\n \u250a 82\u250a100\u250a  );\n \u250a 83\u250a101\u250a};\n")),(0,s.kt)("p",null,"This is how the entire flow should look like:"),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/7648874/54739741-27012280-4bf4-11e9-97cb-c715482e2e70.gif",alt:"flow-demo"})),(0,s.kt)("p",null,"An edge case that should be taken care of is when the messages list length in the view exceeds the length of the container,\nin which case we will have to scroll down to the bottom of the view.\nThis way we can keep track of the most recent message.\nWe will use ",(0,s.kt)("inlineCode",{parentName:"p"},"ReactDOM")," to retrieve the native HTML element of the container and change the position of the scroller whenever a messages was sent:"),(0,s.kt)("h4",{id:"client-step-68-reset-scroller-on-message-sent"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/53ec8c037f7686068d4f06062838c8cd7c8df88a"},(0,s.kt)("strong",{parentName:"a"},"Client")," Step 6.8: Reset scroller on message sent")),(0,s.kt)("h5",{id:"changed-srccomponentschatroomscreenmessageslisttsx"},"Changed src","/","components","/","ChatRoomScreen","/","MessagesList.tsx"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,5 +1,7 @@\n \u250a1\u250a1\u250aimport moment from 'moment';\n \u250a2\u250a2\u250aimport React from 'react';\n+\u250a \u250a3\u250aimport { useEffect, useRef } from 'react';\n+\u250a \u250a4\u250aimport ReactDOM from 'react-dom';\n \u250a3\u250a5\u250aimport styled from 'styled-components';\n \u250a4\u250a6\u250aimport { ChatQueryMessage } from './index';\n \u250a5\u250a7\u250a\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -64,15 +66,26 @@\n \u250a64\u250a66\u250a  messages: Array<ChatQueryMessage>;\n \u250a65\u250a67\u250a}\n \u250a66\u250a68\u250a\n-\u250a67\u250a  \u250aconst MessagesList: React.FC<MessagesListProps> = ({ messages }) => (\n-\u250a68\u250a  \u250a  <Container>\n-\u250a69\u250a  \u250a    {messages.map((message: any) => (\n-\u250a70\u250a  \u250a      <MessageItem key={message.id}>\n-\u250a71\u250a  \u250a        <Contents>{message.content}</Contents>\n-\u250a72\u250a  \u250a        <Timestamp>{moment(message.createdAt).format('HH:mm')}</Timestamp>\n-\u250a73\u250a  \u250a      </MessageItem>\n-\u250a74\u250a  \u250a    ))}\n-\u250a75\u250a  \u250a  </Container>\n-\u250a76\u250a  \u250a);\n+\u250a  \u250a69\u250aconst MessagesList: React.FC<MessagesListProps> = ({ messages }) => {\n+\u250a  \u250a70\u250a  const selfRef = useRef(null);\n+\u250a  \u250a71\u250a\n+\u250a  \u250a72\u250a  useEffect(() => {\n+\u250a  \u250a73\u250a    if (!selfRef.current) return;\n+\u250a  \u250a74\u250a\n+\u250a  \u250a75\u250a    const selfDOMNode = ReactDOM.findDOMNode(selfRef.current) as HTMLElement;\n+\u250a  \u250a76\u250a    selfDOMNode.scrollTop = Number.MAX_SAFE_INTEGER;\n+\u250a  \u250a77\u250a  }, [messages.length]);\n+\u250a  \u250a78\u250a\n+\u250a  \u250a79\u250a  return (\n+\u250a  \u250a80\u250a    <Container ref={selfRef}>\n+\u250a  \u250a81\u250a      {messages.map((message: any) => (\n+\u250a  \u250a82\u250a        <MessageItem key={message.id}>\n+\u250a  \u250a83\u250a          <Contents>{message.content}</Contents>\n+\u250a  \u250a84\u250a          <Timestamp>{moment(message.createdAt).format('HH:mm')}</Timestamp>\n+\u250a  \u250a85\u250a        </MessageItem>\n+\u250a  \u250a86\u250a      ))}\n+\u250a  \u250a87\u250a    </Container>\n+\u250a  \u250a88\u250a  );\n+\u250a  \u250a89\u250a};\n \u250a77\u250a90\u250a\n \u250a78\u250a91\u250aexport default MessagesList;\n")),(0,s.kt)("p",null,"There are many things which are incomplete in the current implementation. The functionality exists in the UI, but no messages are really being sent and stored in the database. In the next chapters we will learn how to:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Cache query results with Apollo-Client."),(0,s.kt)("li",{parentName:"ul"},"Send messages with GraphQL mutations")),(0,s.kt)("hr",null),(0,s.kt)("p",null,"TODO: Add this to router chapter - ",(0,s.kt)("a",{parentName:"p",href:"https://www.pluralsight.com/guides/react-router-typescript"},"https://www.pluralsight.com/guides/react-router-typescript"),"\nAnd this - ",(0,s.kt)("a",{parentName:"p",href:"https://stackoverflow.com/questions/49342390/typescript-how-to-add-type-check-for-history-object-in-react"},"https://stackoverflow.com/questions/49342390/typescript-how-to-add-type-check-for-history-object-in-react")),(0,s.kt)("p",null,"TODO: ",(0,s.kt)("a",{parentName:"p",href:"https://medium.com/@jrwebdev/react-higher-order-component-patterns-in-typescript-42278f7590fb"},"https://medium.com/@jrwebdev/react-higher-order-component-patterns-in-typescript-42278f7590fb")),(0,s.kt)("p",null,"TODO: ",(0,s.kt)("a",{parentName:"p",href:"https://www.cypress.io/blog/2019/05/13/code-create-react-app-v3-and-its-cypress-tests-using-typescript/#"},"https://www.cypress.io/blog/2019/05/13/code-create-react-app-v3-and-its-cypress-tests-using-typescript/#")),(0,s.kt)("p",null,"TODO: Schema says there\u2019s always an array with messages, is it really true? Is newly created chat resolves an empty array, null will throw an error?"),(0,s.kt)("p",null,"TODO: Same thing with ",(0,s.kt)("inlineCode",{parentName:"p"},"chats: [Chat!]!"),", do we always return an array here?"),(0,s.kt)("p",null,"TODO: _root and type all resolvers"),(0,s.kt)("p",null,"TODO: How to import schema together with jest, should I changed from ts-jest?"),(0,s.kt)("p",null,"TODO: remove all that part including the file in the commit"),(0,s.kt)("p",null,"TODO: Add all the new files and changes on 6.6"),(0,s.kt)("p",null,"TODO: Add all the new files and changes on 6.7"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:"left"},(0,s.kt)("a",{parentName:"th",href:"https://github.com/Urigo/WhatsApp-Clone-Tutorial/tree/master@next/.tortilla/manuals/views/step5.md"},"< Previous Step")),(0,s.kt)("th",{parentName:"tr",align:"right"},(0,s.kt)("a",{parentName:"th",href:"https://github.com/Urigo/WhatsApp-Clone-Tutorial/tree/master@next/.tortilla/manuals/views/step7.md"},"Next Step >"))))))}m.isMDXComponent=!0}}]);