"use strict";(self.webpackChunkovrsea_whatsapp_tuto=self.webpackChunkovrsea_whatsapp_tuto||[]).push([[7292],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var s=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,s,a=function(e,t){if(null==e)return{};var n,s,a={},r=Object.keys(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=s.createContext({}),c=function(e){var t=s.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return s.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},u=s.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),m=a,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||r;return n?s.createElement(h,o(o({ref:t},p),{},{components:n})):s.createElement(h,o({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var c=2;c<r;c++)o[c]=n[c];return s.createElement.apply(null,o)}return s.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8371:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>c});var s=n(7462),a=(n(7294),n(3905));const r={sidebar_label:"Step 14: Migrating to PostgreSQL",sidebar_position:14},o="Step 14: Migrating to PostgreSQL",i={unversionedId:"tuto-whatsapp/step14",id:"version-1.0.0/tuto-whatsapp/step14",title:"Step 14: Migrating to PostgreSQL",description:"[//]: # (head-end)",source:"@site/versioned_docs/version-1.0.0/tuto-whatsapp/step14.md",sourceDirName:"tuto-whatsapp",slug:"/tuto-whatsapp/step14",permalink:"/docs/1.0.0/tuto-whatsapp/step14",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/versioned_docs/version-1.0.0/tuto-whatsapp/step14.md",tags:[],version:"1.0.0",sidebarPosition:14,frontMatter:{sidebar_label:"Step 14: Migrating to PostgreSQL",sidebar_position:14},sidebar:"tutorialSidebar",previous:{title:"Step 13: Authentication",permalink:"/docs/1.0.0/tuto-whatsapp/step13"},next:{title:"Step 15: Using a REST API",permalink:"/docs/1.0.0/tuto-whatsapp/step15"}},l={},c=[{value:"Installing PostgreSQL on your machine",id:"installing-postgresql-on-your-machine",level:2},{value:"Windows / Mac OS X",id:"windows--mac-os-x",level:3},{value:"Ubuntu / Debian",id:"ubuntu--debian",level:3},{value:"Docker",id:"docker",level:3},{value:"<strong>Server</strong> Step 11.1: Installing PostgreSQL Client",id:"server-step-111-installing-postgresql-client",level:4},{value:"Added docker-compose.yaml",id:"added-docker-composeyaml",level:5},{value:"Other environments",id:"other-environments",level:3},{value:"Creating Database, Database User and Tables",id:"creating-database-database-user-and-tables",level:2},{value:"Installing PostgreSQL on our backend project",id:"installing-postgresql-on-our-backend-project",level:2},{value:"Connecting to our database",id:"connecting-to-our-database",level:3},{value:"<strong>Server</strong> Step 11.2: Connecting to database",id:"server-step-112-connecting-to-database",level:4},{value:"Changed db.ts",id:"changed-dbts",level:5},{value:"Add Database Client to GraphQL Context",id:"add-database-client-to-graphql-context",level:3},{value:"<strong>Server</strong> Step 11.3: Add Database Client to GraphQL Context",id:"server-step-113-add-database-client-to-graphql-context",level:4},{value:"Changed context.ts",id:"changed-contextts",level:5},{value:"Changed index.ts",id:"changed-indexts",level:5},{value:"Update entity typings",id:"update-entity-typings",level:3},{value:"<strong>Server</strong> Step 11.4: Update Entity Types",id:"server-step-114-update-entity-types",level:4},{value:"Changed db.ts",id:"changed-dbts-1",level:5},{value:"Add Sample Data",id:"add-sample-data",level:3},{value:"<strong>Server</strong> Step 11.5: Add Sample Data",id:"server-step-115-add-sample-data",level:4},{value:"Changed db.ts",id:"changed-dbts-2",level:5},{value:"Changed env.ts",id:"changed-envts",level:5},{value:"Updating Resolvers",id:"updating-resolvers",level:3},{value:"<strong>Server</strong> Step 11.6: Updating Resolvers with SQL",id:"server-step-116-updating-resolvers-with-sql",level:4},{value:"Changed schema/resolvers.ts",id:"changed-schemaresolversts",level:5},{value:"Updating Subscriptions w/ PostgreSQL PubSub mechanism",id:"updating-subscriptions-w-postgresql-pubsub-mechanism",level:3},{value:"<strong>Server</strong> Step 11.7: Updating Subscriptions w/ PostgreSQL PubSub mechanism",id:"server-step-117-updating-subscriptions-w-postgresql-pubsub-mechanism",level:4},{value:"Changed index.ts",id:"changed-indexts-1",level:5},{value:"Updating Tests",id:"updating-tests",level:3},{value:"<strong>Server</strong> Step 11.8: Updating Tests with SQL",id:"server-step-118-updating-tests-with-sql",level:4},{value:"Changed tests/mutations/addChat.test.ts",id:"changed-testsmutationsaddchattestts",level:5},{value:"Changed tests/mutations/addMessage.test.ts",id:"changed-testsmutationsaddmessagetestts",level:5},{value:"Changed tests/mutations/removeChat.test.ts",id:"changed-testsmutationsremovechattestts",level:5},{value:"Changed tests/queries/getChat.test.ts",id:"changed-testsqueriesgetchattestts",level:5},{value:"Changed tests/queries/getChats.test.ts",id:"changed-testsqueriesgetchatstestts",level:5},{value:"Changed tests/queries/getMe.test.ts",id:"changed-testsqueriesgetmetestts",level:5},{value:"Changed tests/queries/getUsers.test.ts",id:"changed-testsqueriesgetuserstestts",level:5},{value:"<strong>Server</strong> Step 11.8: Updating Tests with SQL",id:"server-step-118-updating-tests-with-sql-1",level:4},{value:"Changed db.ts",id:"changed-dbts-3",level:5},{value:"<strong>Server</strong> Step 11.8: Updating Tests with SQL",id:"server-step-118-updating-tests-with-sql-2",level:4},{value:"Changed package.json",id:"changed-packagejson",level:5},{value:"Remove in-memory database",id:"remove-in-memory-database",level:3},{value:"<strong>Server</strong> Step 11.9: Removing in-memory database",id:"server-step-119-removing-in-memory-database",level:4},{value:"Changed db.ts",id:"changed-dbts-4",level:5}],p={toc:c};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,s.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"step-14-migrating-to-postgresql"},"Step 14: Migrating to PostgreSQL"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Which Relational Database? And Why?")),(0,a.kt)("p",null,"We\u2019ve used to have an in-memory database so far that keeps our entities on memory.\nBut in a real application, we need to save the data to disk, so that in case the process will stop, we won't loose all the data."),(0,a.kt)("p",null,"Advanced systems to store data are called databases and they include a lot of utilities that makes it easier for us to store and retrieve data."),(0,a.kt)("p",null,"There are many types of databases out there. In this part we will design our database according to the relational database principles with the benefits of SQL."),(0,a.kt)("p",null,"We prefer to use PostgreSQL as our database system from now on; because PostgreSQL is a Relational Database implementation that has tables, constraints, triggers, roles, stored procedures and views together with foreign tables from external data sources and many features from NoSQL."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Database Design")),(0,a.kt)("p",null,"While we were defining our entity types and schema inside our array-based in-memory database, we have already designed the basic parts of them.\nIn this part, we will design our relational database with base and relation tables."),(0,a.kt)("p",null,"Initially we can decide the base fields without relations:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"* User\n    * id\n    * name\n    * username\n    * password\n    * picture\n* Message\n    * id\n    * content\n    * created_at\n* Chat\n    * id\n")),(0,a.kt)("p",null,"Before creating tables, we should design our database structure according to ",(0,a.kt)("a",{parentName:"p",href:"https://www.essentialsql.com/get-ready-to-learn-sql-database-normalization-explained-in-simple-english/"},"Database Normalization principles")," to prevent duplicated data and modification anomalies."),(0,a.kt)("p",null,"Initially we will have 3 base tables in our database; ",(0,a.kt)("inlineCode",{parentName:"p"},"user"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"chat"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"message"),"; and there are some relations between those 3 tables.\nThese relations will be defined in other relation tables together with different primary key and foreign key definitions."),(0,a.kt)("p",null,"There are four types of relations in relational databases:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"One to one",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"This relationship means A entity type can have a relationship with only one instance of B entity type while B entity type can have a relationship with only one instance of A entity type. For example, one user can have only one profile while a profile belongs to only one user."))),(0,a.kt)("li",{parentName:"ul"},"Many to one",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"This relationship means A entity type can have a relationship with multiple instances of B entity type while B entity type can have a relationship with only one instance of A entity type. For example, a chat can have multiple messages while a message belongs to only one chat. But ",(0,a.kt)("inlineCode",{parentName:"li"},"many to one")," as a word means multiple photos belong to the same chat."))),(0,a.kt)("li",{parentName:"ul"},"One to many",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"This relationship has the same logic with Many to one. However, ",(0,a.kt)("inlineCode",{parentName:"li"},"One to many")," as a word means a chat can have multiple messages while those messages cannot have multiple chats but only one."))),(0,a.kt)("li",{parentName:"ul"},"Many to many",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"This relationship means A entity type can have a relationship with multiple instances of B entity type while B entity type can have a relationship with multiple instances of A entity type dependently or independently. For example; a chat can have multiple users, and a user can have multiple chats.")))),(0,a.kt)("p",null,"You can read more about those relations in ",(0,a.kt)("a",{parentName:"p",href:"https://www.techrepublic.com/article/relational-databases-defining-relationships-between-database-tables/"},"here"),"."),(0,a.kt)("p",null,"In our existing entity declarations and schema, we have 6 relationships:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Message has a One To Many relationship under the name of ",(0,a.kt)("inlineCode",{parentName:"li"},"chat")," inside our schema; so one message can have one chat while one chat can have multiple messages.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-gql"},"type Message {\n  chat: Chat\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Message has another One To Many relationship under the name of ",(0,a.kt)("inlineCode",{parentName:"li"},"sender")," inside our schema; so one message can have one sender while one sender user can have multiple messages.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-gql"},"type Message {\n  sender: User\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Message has one more One To Many relationship under the name of ",(0,a.kt)("inlineCode",{parentName:"li"},"recipient")," inside our schema; so one message can have one recipient while one recipient user can have multiple messages.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-gql"},"type Message {\n  recipient: User\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Chat has a One To Many relationship under the name of ",(0,a.kt)("inlineCode",{parentName:"li"},"messages"),", because one chat can have multiple messages while one message can have only one chat. Notice that this relationship is the reversed version of the first relationship in Message.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-gql"},"`type Chat {\n  messages: [Message]\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Chat has another Many To Many relationship under the name of ",(0,a.kt)("inlineCode",{parentName:"li"},"participants"),", because one chat can have multiple participants while a participant can have multiple chats as well.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-gql"},"type Chat {\n  participants: [User]\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"User has a Many To Many relationship under the name of ",(0,a.kt)("inlineCode",{parentName:"li"},"chats"),", because one user can have multiple chats, while it has the same situation for chats.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-gql"},"type User {\n  chats: [Chat]\n}\n")),(0,a.kt)("p",null,"So we should decide the dependencies between each other to add columns and tables to our database."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"User is independent in all relationships, so we will keep its columns as it is"),(0,a.kt)("li",{parentName:"ul"},"Message is dependent on User in two cases so we can define this relationship as two different new foreign keys pointing to User\u2019s id under the columns ",(0,a.kt)("inlineCode",{parentName:"li"},"sender_user_id"),". But we don\u2019t need ",(0,a.kt)("inlineCode",{parentName:"li"},"recipient_user_id")," because ",(0,a.kt)("inlineCode",{parentName:"li"},"recipient")," can be found under Chat\u2019s participants."),(0,a.kt)("li",{parentName:"ul"},"Chat is also independent because it will be better to keep those relations inside Message."),(0,a.kt)("li",{parentName:"ul"},"Message is dependent to Chat so we can define this relationship as a new foreign key that points to Chat\u2019s id under the column named ",(0,a.kt)("inlineCode",{parentName:"li"},"chat_id"),"."),(0,a.kt)("li",{parentName:"ul"},"We need to have another table that defines the relationship between multiple chats and users.")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"We don\u2019t need to duplicate relations in each entities, because SQL has the power to reverse each relations even if they are defined only in one entity. This is one of the rule of Database Normalization.")),(0,a.kt)("p",null,"Finally we can decide on our tables;"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"* `chats` table;\n    * `id` ->\n        * `PRIMARY KEY` - `SERIAL`\n        * `SERIAL` will automatically increase the number of the new chat row. Check SQL docs about primary key and auto increment\n* `users` table;\n    * `id` ->\n        * `PRIMARY KEY` - `SERIAL`\n    * `name` ->\n        * `VARCHAR`\n    * `username` ->\n        * `VARCHAR` - `UNIQUE`\n        * `UNIQUE` means this value can exist in this table only once. We use this feature because `username` must be unique in users for each user (Unique can also be a combination of a number of columns)\n    * `password` ->\n        * `VARCHAR`\n    * `picture` ->\n        * `VARCHAR`\n* `chats_users` table;\n    * `chat_id` ->\n        * `FOREIGN KEY` points to `chat.id` ->\n            * `ON DELETE` -> `CASCADE`.\n            * This means that if chat that has this id is deleted, this row will be deleted automatically as well.\n    * `user_id` ->\n        * FOREIGN KEY points to `user.id` ->\n            * `ON DELETE` -> `CASCADE`.\n* `messages` table;\n    * `id` ->\n        * `PRIMARY KEY` - `SERIAL`\n    * `content` ->\n        * `VARCHAR`\n    * `created_at` ->\n        * `TIMESTAMP` ->\n            * `DEFAULT_VALUE = now()`\n            * This means it will automatically set this to the current timestamp in the new row.\n    * `chat_id` ->\n        * `FOREIGN KEY` points to `chat.id` ->\n            * `ON DELETE` -> `CASCADE`\n            * This means that if chat that has this id is deleted, this row will be deleted automatically as well. So the message will be deleted immediately after the chat is deleted.\n    * `sender_user_id` ->\n        * `FOREIGN_KEY` points to `user.id`\n            * `ON DELETE` -> `CASCADE`\n            * This means that if user that has this id is deleted, this message will be deleted.\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Notice that having a good dependency gives us an opportunity to benefit from ",(0,a.kt)("inlineCode",{parentName:"p"},"ON_DELETE")," feature of SQL. Otherwise, we need to delete each dependent row manually by hand.")),(0,a.kt)("h2",{id:"installing-postgresql-on-your-machine"},"Installing PostgreSQL on your machine"),(0,a.kt)("h3",{id:"windows--mac-os-x"},"Windows / Mac OS X"),(0,a.kt)("p",null,"You can download one-click installer for Windows and Mac OS X. During the installation, you must define a password and keep it somewhere safe."),(0,a.kt)("p",null,"[https://www.enterprisedb.com/downloads/postgres-postgresql-downloads]","(Download Installer)"),(0,a.kt)("h3",{id:"ubuntu--debian"},"Ubuntu / Debian"),(0,a.kt)("p",null,"If you have Debian package manager on your machine, you can install PostgreSQL in a single line in your Bash terminal;"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ sudo apt-get install postgresql postgresql-contrib\n")),(0,a.kt)("h3",{id:"docker"},"Docker"),(0,a.kt)("p",null,"You can use docker and ",(0,a.kt)("inlineCode",{parentName:"p"},"docker-compose")," to install and run your PostgreSQL database."),(0,a.kt)("p",null,"In order to do that, you'll need to define a docker-compose.yaml configuration file like so:"),(0,a.kt)("h4",{id:"server-step-111-installing-postgresql-client"},(0,a.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/6912f37567cb2fbf33250a1479f310a161eea149"},(0,a.kt)("strong",{parentName:"a"},"Server")," Step 11.1: Installing PostgreSQL Client")),(0,a.kt)("h5",{id:"added-docker-composeyaml"},"Added docker-compose.yaml"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},'@@ -0,0 +1,17 @@\n+\u250a  \u250a 1\u250aversion: "3.8"\n+\u250a  \u250a 2\u250anetworks:\n+\u250a  \u250a 3\u250a  tortilla:\n+\u250a  \u250a 4\u250aservices:\n+\u250a  \u250a 5\u250a  postgresql:\n+\u250a  \u250a 6\u250a    restart: always\n+\u250a  \u250a 7\u250a    image: postgres:12.2-alpine\n+\u250a  \u250a 8\u250a    ports:\n+\u250a  \u250a 9\u250a      - "5432:5432"\n+\u250a  \u250a10\u250a    environment:\n+\u250a  \u250a11\u250a      - POSTGRES_USER=testuser\n+\u250a  \u250a12\u250a      - POSTGRES_PASSWORD=testpassword\n+\u250a  \u250a13\u250a      - POSTGRES_DB=whatsapp\n+\u250a  \u250a14\u250a    volumes:\n+\u250a  \u250a15\u250a      - /var/lib/postgresql/data\n+\u250a  \u250a16\u250a    networks:\n+\u250a  \u250a17\u250a      - tortilla\ud83d\udeab\u21b5\n')),(0,a.kt)("p",null,"Then make sure you have Docker installed and then run on the command line:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose up -d\n")),(0,a.kt)("h3",{id:"other-environments"},"Other environments"),(0,a.kt)("p",null,"Check ",(0,a.kt)("a",{parentName:"p",href:"https://www.postgresql.org/download/"},"PostgreSQL website")," for installation instructions on other environments."),(0,a.kt)("p",null,"After following the above link, initialize the database using:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"postgresql-setup initdb\n")),(0,a.kt)("p",null,"Navigate to /var/lib/pgsql/11/data/pg_hba.conf and edit IPv4 local connections to:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# IPv4 local connections:\nhost    all             all             127.0.0.1/32            trust\n")),(0,a.kt)("p",null,"By doing so you are setting PostgreSQL permissions so your WhatsApp server can access the database."),(0,a.kt)("h2",{id:"creating-database-database-user-and-tables"},"Creating Database, Database User and Tables"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Make sure you have installed PostgreSQL on your environment first!")),(0,a.kt)("p",null,"We will use Bash terminal in order to access PostgreSQL using superuser:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ su - postgres\n")),(0,a.kt)("p",null,"You don't need to execute the previous command if you're using Windows. But you have to open the terminal with Administrator privileges."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ psql template1\n")),(0,a.kt)("p",null,"Then we will see the following PostgreSQL console:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"Welcome to psql 7.4.16, the PostgreSQL interactive terminal.\n\nType:  \\\\copyright for distribution terms\n       \\\\h for help with SQL commands\n       \\\\? for help on internal slash commands\n       \\\\g or terminate with semicolon to execute query\n       \\\\q to quit\n\ntemplate1\n")),(0,a.kt)("p",null,"So we can do the following SQL operations in order to create our new user, database and tables:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Create user for our database")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE DATABASE whatsapp;\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Create database")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE USER testuser WITH PASSWORD 'testpassword';\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Give permissions to that user")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"GRANT ALL PRIVILEGES ON DATABASE whatsapp to testuser;\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Connect database")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"\\connect whatsapp\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Create ",(0,a.kt)("inlineCode",{parentName:"li"},"chats")," table")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE chats(\n  id SERIAL PRIMARY KEY\n);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Create ",(0,a.kt)("inlineCode",{parentName:"li"},"users")," table")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE users(\n  id SERIAL PRIMARY KEY,\n  username VARCHAR (50) UNIQUE NOT NULL,\n  name VARCHAR (50) NOT NULL,\n  password VARCHAR (255) NOT NULL,\n  picture VARCHAR (255) NOT NULL\n);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Create ",(0,a.kt)("inlineCode",{parentName:"li"},"chats_users")," table")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE chats_users(\n  chat_id INTEGER NOT NULL REFERENCES chats(id) ON DELETE CASCADE,\n  user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE\n);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Create messages table")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE messages(\n  id SERIAL PRIMARY KEY,\n  content VARCHAR (355) NOT NULL,\n  created_at TIMESTAMP NOT NULL DEFAULT NOW(),\n  chat_id INTEGER NOT NULL REFERENCES chats(id) ON DELETE CASCADE,\n  sender_user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE\n);\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Give access for those tables")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO testuser;\nGRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO testuser;\n")),(0,a.kt)("h2",{id:"installing-postgresql-on-our-backend-project"},"Installing PostgreSQL on our backend project"),(0,a.kt)("p",null,"As we are using PostgreSQL, we will use ",(0,a.kt)("inlineCode",{parentName:"p"},"node-postgres")," as our database client in the backend."),(0,a.kt)("p",null,"First install necessary npm packages using yarn;"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ yarn add pg\n")),(0,a.kt)("p",null,"And we will also need TypeScript definitions for better development experience;"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ yarn add @types/pg --dev\n")),(0,a.kt)("p",null,"We will use ",(0,a.kt)("inlineCode",{parentName:"p"},"sql")," template literals (which is way easier and safer than native API) with ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/felixfbecker/node-sql-template-strings"},"this package"),"\nwhich allows you to have SQL highlighting in VSCode with ",(0,a.kt)("a",{parentName:"p",href:"https://marketplace.visualstudio.com/items?itemName=forbeslindesay.vscode-sql-template-literal"},"this extension")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ yarn add sql-template-strings\n")),(0,a.kt)("h3",{id:"connecting-to-our-database"},"Connecting to our database"),(0,a.kt)("p",null,"We will use connection pooling to prevent connection leaks and benefit from transactions in our complicated SQL queries. ",(0,a.kt)("a",{parentName:"p",href:"https://node-postgres.com/features/pooling"},"You can read more about the benefits of connection pooling.")),(0,a.kt)("p",null,"First we need to create a connection pool using our connection credentials;"),(0,a.kt)("h4",{id:"server-step-112-connecting-to-database"},(0,a.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/38d2acb8e801e45f2862bf5ba9b5d988390f3c31"},(0,a.kt)("strong",{parentName:"a"},"Server")," Step 11.2: Connecting to database")),(0,a.kt)("h5",{id:"changed-dbts"},"Changed db.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,3 +1,5 @@\n+\u250a \u250a1\u250aimport { Pool } from 'pg';\n+\u250a \u250a2\u250a\n \u250a1\u250a3\u250aexport type User = {\n \u250a2\u250a4\u250a  id: string;\n \u250a3\u250a5\u250a  name: string;\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -20,6 +22,16 @@\n \u250a20\u250a22\u250a  participants: string[];\n \u250a21\u250a23\u250a};\n \u250a22\u250a24\u250a\n+\u250a  \u250a25\u250aexport const dbConfig = {\n+\u250a  \u250a26\u250a  host: 'localhost',\n+\u250a  \u250a27\u250a  port: process.env.DB_PORT ? parseInt(process.env.DB_PORT) : 5432,\n+\u250a  \u250a28\u250a  user: 'testuser',\n+\u250a  \u250a29\u250a  password: 'testpassword',\n+\u250a  \u250a30\u250a  database: 'whatsapp',\n+\u250a  \u250a31\u250a};\n+\u250a  \u250a32\u250a\n+\u250a  \u250a33\u250aexport let pool: Pool = new Pool(dbConfig);\n+\u250a  \u250a34\u250a\n \u250a23\u250a35\u250aexport const users: User[] = [];\n \u250a24\u250a36\u250aexport const messages: Message[] = [];\n \u250a25\u250a37\u250aexport const chats: Chat[] = [];\n")),(0,a.kt)("h3",{id:"add-database-client-to-graphql-context"},"Add Database Client to GraphQL Context"),(0,a.kt)("p",null,"After that, we will request a client from this pool on each network request in our GraphQL context. So we need to update our context interface and context builder function."),(0,a.kt)("h4",{id:"server-step-113-add-database-client-to-graphql-context"},(0,a.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/df7717f8fd6ad724d4f5400b51c043686620a7f1"},(0,a.kt)("strong",{parentName:"a"},"Server")," Step 11.3: Add Database Client to GraphQL Context")),(0,a.kt)("h5",{id:"changed-contextts"},"Changed context.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,9 +1,11 @@\n \u250a 1\u250a 1\u250aimport { PubSub } from 'apollo-server-express';\n \u250a 2\u250a 2\u250aimport { User } from './db';\n \u250a 3\u250a 3\u250aimport { Response } from 'express';\n+\u250a  \u250a 4\u250aimport { PoolClient } from 'pg';\n \u250a 4\u250a 5\u250a\n \u250a 5\u250a 6\u250aexport type MyContext = {\n \u250a 6\u250a 7\u250a  pubsub: PubSub;\n \u250a 7\u250a 8\u250a  currentUser: User;\n \u250a 8\u250a 9\u250a  res: Response;\n+\u250a  \u250a10\u250a  db: PoolClient;\n \u250a 9\u250a11\u250a};\n")),(0,a.kt)("h5",{id:"changed-indexts"},"Changed index.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -3,14 +3,16 @@\n \u250a 3\u250a 3\u250aimport http from 'http';\n \u250a 4\u250a 4\u250aimport jwt from 'jsonwebtoken';\n \u250a 5\u250a 5\u250aimport { app } from './app';\n-\u250a 6\u250a  \u250aimport { users } from './db';\n+\u250a  \u250a 6\u250aimport { pool } from './db';\n \u250a 7\u250a 7\u250aimport { origin, port, secret } from './env';\n \u250a 8\u250a 8\u250aimport schema from './schema';\n+\u250a  \u250a 9\u250aimport { MyContext } from './context';\n+\u250a  \u250a10\u250aimport sql from 'sql-template-strings';\n \u250a 9\u250a11\u250a\n \u250a10\u250a12\u250aconst pubsub = new PubSub();\n \u250a11\u250a13\u250aconst server = new ApolloServer({\n \u250a12\u250a14\u250a  schema,\n-\u250a13\u250a  \u250a  context: (session: any) => {\n+\u250a  \u250a15\u250a  context: async (session: any) => {\n \u250a14\u250a16\u250a    // Access the request object\n \u250a15\u250a17\u250a    let req = session.connection\n \u250a16\u250a18\u250a      ? session.connection.context.request\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -24,12 +26,24 @@\n \u250a24\u250a26\u250a    let currentUser;\n \u250a25\u250a27\u250a    if (req.cookies.authToken) {\n \u250a26\u250a28\u250a      const username = jwt.verify(req.cookies.authToken, secret) as string;\n-\u250a27\u250a  \u250a      currentUser = username && users.find((u) => u.username === username);\n+\u250a  \u250a29\u250a      if (username) {\n+\u250a  \u250a30\u250a        const { rows } = await pool.query(\n+\u250a  \u250a31\u250a          sql`SELECT * FROM users WHERE username = ${username}`\n+\u250a  \u250a32\u250a        );\n+\u250a  \u250a33\u250a        currentUser = rows[0];\n+\u250a  \u250a34\u250a      }\n+\u250a  \u250a35\u250a    }\n+\u250a  \u250a36\u250a\n+\u250a  \u250a37\u250a    let db;\n+\u250a  \u250a38\u250a\n+\u250a  \u250a39\u250a    if (!session.connection) {\n+\u250a  \u250a40\u250a      db = await pool.connect();\n \u250a28\u250a41\u250a    }\n \u250a29\u250a42\u250a\n \u250a30\u250a43\u250a    return {\n \u250a31\u250a44\u250a      currentUser,\n \u250a32\u250a45\u250a      pubsub,\n+\u250a  \u250a46\u250a      db,\n \u250a33\u250a47\u250a      res: session.res,\n \u250a34\u250a48\u250a    };\n \u250a35\u250a49\u250a  },\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -41,6 +55,11 @@\n \u250a41\u250a55\u250a      };\n \u250a42\u250a56\u250a    },\n \u250a43\u250a57\u250a  },\n+\u250a  \u250a58\u250a  formatResponse: (res: any, { context }: { context: MyContext }) => {\n+\u250a  \u250a59\u250a    context.db.release();\n+\u250a  \u250a60\u250a\n+\u250a  \u250a61\u250a    return res;\n+\u250a  \u250a62\u250a  },\n \u250a44\u250a63\u250a});\n \u250a45\u250a64\u250a\n \u250a46\u250a65\u250aserver.applyMiddleware({\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"However we need to release that client to the pool after the network connection ends to prevent connection leaks. So, let\u2019s use ",(0,a.kt)("inlineCode",{parentName:"p"},"formatResponse")," to do this operation.\nWe don't need connection pooling for subscriptions, because it can cause the connection open in all websocket connection. That's why, we don't request a new client from the pool if it is a subscription.")),(0,a.kt)("h3",{id:"update-entity-typings"},"Update entity typings"),(0,a.kt)("p",null,"We should update our entity typings according to our new database tables and columns."),(0,a.kt)("h4",{id:"server-step-114-update-entity-types"},(0,a.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/c831a4dedaaad08729280685c3bacd8032ae54fe"},(0,a.kt)("strong",{parentName:"a"},"Server")," Step 11.4: Update Entity Types")),(0,a.kt)("h5",{id:"changed-dbts-1"},"Changed db.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -11,15 +11,13 @@\n \u250a11\u250a11\u250aexport type Message = {\n \u250a12\u250a12\u250a  id: string;\n \u250a13\u250a13\u250a  content: string;\n-\u250a14\u250a  \u250a  createdAt: Date;\n-\u250a15\u250a  \u250a  sender: string;\n-\u250a16\u250a  \u250a  recipient: string;\n+\u250a  \u250a14\u250a  created_at: Date;\n+\u250a  \u250a15\u250a  chat_id: string;\n+\u250a  \u250a16\u250a  sender_user_id: string;\n \u250a17\u250a17\u250a};\n \u250a18\u250a18\u250a\n \u250a19\u250a19\u250aexport type Chat = {\n \u250a20\u250a20\u250a  id: string;\n-\u250a21\u250a  \u250a  messages: string[];\n-\u250a22\u250a  \u250a  participants: string[];\n \u250a23\u250a21\u250a};\n \u250a24\u250a22\u250a\n \u250a25\u250a23\u250aexport const dbConfig = {\n")),(0,a.kt)("h3",{id:"add-sample-data"},"Add Sample Data"),(0,a.kt)("p",null,"We need to update the ",(0,a.kt)("inlineCode",{parentName:"p"},"resetDb")," function to add a sample data to our new relational database instead of in-memory database. But we will call ",(0,a.kt)("inlineCode",{parentName:"p"},"resetDb")," if it is asked by using the environmental variable."),(0,a.kt)("h4",{id:"server-step-115-add-sample-data"},(0,a.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/5e7ccae20da00fb92eb01584cc1ee543d3a2fd8e"},(0,a.kt)("strong",{parentName:"a"},"Server")," Step 11.5: Add Sample Data")),(0,a.kt)("h5",{id:"changed-dbts-2"},"Changed db.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,4 +1,6 @@\n \u250a1\u250a1\u250aimport { Pool } from 'pg';\n+\u250a \u250a2\u250aimport sql from 'sql-template-strings';\n+\u250a \u250a3\u250aimport { resetDb as envResetDb } from './env';\n \u250a2\u250a4\u250a\n \u250a3\u250a5\u250aexport type User = {\n \u250a4\u250a6\u250a  id: string;\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -34,121 +36,181 @@\n \u250a 34\u250a 36\u250aexport const messages: Message[] = [];\n \u250a 35\u250a 37\u250aexport const chats: Chat[] = [];\n \u250a 36\u250a 38\u250a\n-\u250a 37\u250a   \u250aexport const resetDb = () => {\n-\u250a 38\u250a   \u250a  users.splice(\n-\u250a 39\u250a   \u250a    0,\n-\u250a 40\u250a   \u250a    Infinity,\n-\u250a 41\u250a   \u250a    ...[\n-\u250a 42\u250a   \u250a      {\n-\u250a 43\u250a   \u250a        id: '1',\n-\u250a 44\u250a   \u250a        name: 'Ray Edwards',\n-\u250a 45\u250a   \u250a        username: 'ray',\n-\u250a 46\u250a   \u250a        password:\n-\u250a 47\u250a   \u250a          '$2a$08$NO9tkFLCoSqX1c5wk3s7z.JfxaVMKA.m7zUDdDwEquo4rvzimQeJm', // 111\n-\u250a 48\u250a   \u250a        picture: 'https://randomuser.me/api/portraits/thumb/lego/1.jpg',\n-\u250a 49\u250a   \u250a      },\n-\u250a 50\u250a   \u250a      {\n-\u250a 51\u250a   \u250a        id: '2',\n-\u250a 52\u250a   \u250a        name: 'Ethan Gonzalez',\n-\u250a 53\u250a   \u250a        username: 'ethan',\n-\u250a 54\u250a   \u250a        password:\n-\u250a 55\u250a   \u250a          '$2a$08$xE4FuCi/ifxjL2S8CzKAmuKLwv18ktksSN.F3XYEnpmcKtpbpeZgO', // 222\n-\u250a 56\u250a   \u250a        picture: 'https://randomuser.me/api/portraits/thumb/men/1.jpg',\n-\u250a 57\u250a   \u250a      },\n-\u250a 58\u250a   \u250a      {\n-\u250a 59\u250a   \u250a        id: '3',\n-\u250a 60\u250a   \u250a        name: 'Bryan Wallace',\n-\u250a 61\u250a   \u250a        username: 'bryan',\n-\u250a 62\u250a   \u250a        password:\n-\u250a 63\u250a   \u250a          '$2a$08$UHgH7J8G6z1mGQn2qx2kdeWv0jvgHItyAsL9hpEUI3KJmhVW5Q1d.', // 333\n-\u250a 64\u250a   \u250a        picture: 'https://randomuser.me/api/portraits/thumb/men/2.jpg',\n-\u250a 65\u250a   \u250a      },\n-\u250a 66\u250a   \u250a      {\n-\u250a 67\u250a   \u250a        id: '4',\n-\u250a 68\u250a   \u250a        name: 'Avery Stewart',\n-\u250a 69\u250a   \u250a        username: 'avery',\n-\u250a 70\u250a   \u250a        password:\n-\u250a 71\u250a   \u250a          '$2a$08$wR1k5Q3T9FC7fUgB7Gdb9Os/GV7dGBBf4PLlWT7HERMFhmFDt47xi', // 444\n-\u250a 72\u250a   \u250a        picture: 'https://randomuser.me/api/portraits/thumb/women/1.jpg',\n-\u250a 73\u250a   \u250a      },\n-\u250a 74\u250a   \u250a      {\n-\u250a 75\u250a   \u250a        id: '5',\n-\u250a 76\u250a   \u250a        name: 'Katie Peterson',\n-\u250a 77\u250a   \u250a        username: 'katie',\n-\u250a 78\u250a   \u250a        password:\n-\u250a 79\u250a   \u250a          '$2a$08$6.mbXqsDX82ZZ7q5d8Osb..JrGSsNp4R3IKj7mxgF6YGT0OmMw242', // 555\n-\u250a 80\u250a   \u250a        picture: 'https://randomuser.me/api/portraits/thumb/women/2.jpg',\n-\u250a 81\u250a   \u250a      },\n-\u250a 82\u250a   \u250a    ]\n+\u250a   \u250a 39\u250aexport const resetDb = async () => {\n+\u250a   \u250a 40\u250a  await pool.query(sql`DELETE FROM users`);\n+\u250a   \u250a 41\u250a\n+\u250a   \u250a 42\u250a  const sampleUsers = [\n+\u250a   \u250a 43\u250a    {\n+\u250a   \u250a 44\u250a      id: '1',\n+\u250a   \u250a 45\u250a      name: 'Ray Edwards',\n+\u250a   \u250a 46\u250a      username: 'ray',\n+\u250a   \u250a 47\u250a      password: '$2a$08$NO9tkFLCoSqX1c5wk3s7z.JfxaVMKA.m7zUDdDwEquo4rvzimQeJm', // 111\n+\u250a   \u250a 48\u250a      picture: 'https://randomuser.me/api/portraits/thumb/lego/1.jpg',\n+\u250a   \u250a 49\u250a    },\n+\u250a   \u250a 50\u250a    {\n+\u250a   \u250a 51\u250a      id: '2',\n+\u250a   \u250a 52\u250a      name: 'Ethan Gonzalez',\n+\u250a   \u250a 53\u250a      username: 'ethan',\n+\u250a   \u250a 54\u250a      password: '$2a$08$xE4FuCi/ifxjL2S8CzKAmuKLwv18ktksSN.F3XYEnpmcKtpbpeZgO', // 222\n+\u250a   \u250a 55\u250a      picture: 'https://randomuser.me/api/portraits/thumb/men/1.jpg',\n+\u250a   \u250a 56\u250a    },\n+\u250a   \u250a 57\u250a    {\n+\u250a   \u250a 58\u250a      id: '3',\n+\u250a   \u250a 59\u250a      name: 'Bryan Wallace',\n+\u250a   \u250a 60\u250a      username: 'bryan',\n+\u250a   \u250a 61\u250a      password: '$2a$08$UHgH7J8G6z1mGQn2qx2kdeWv0jvgHItyAsL9hpEUI3KJmhVW5Q1d.', // 333\n+\u250a   \u250a 62\u250a      picture: 'https://randomuser.me/api/portraits/thumb/men/2.jpg',\n+\u250a   \u250a 63\u250a    },\n+\u250a   \u250a 64\u250a    {\n+\u250a   \u250a 65\u250a      id: '4',\n+\u250a   \u250a 66\u250a      name: 'Avery Stewart',\n+\u250a   \u250a 67\u250a      username: 'avery',\n+\u250a   \u250a 68\u250a      password: '$2a$08$wR1k5Q3T9FC7fUgB7Gdb9Os/GV7dGBBf4PLlWT7HERMFhmFDt47xi', // 444\n+\u250a   \u250a 69\u250a      picture: 'https://randomuser.me/api/portraits/thumb/women/1.jpg',\n+\u250a   \u250a 70\u250a    },\n+\u250a   \u250a 71\u250a    {\n+\u250a   \u250a 72\u250a      id: '5',\n+\u250a   \u250a 73\u250a      name: 'Katie Peterson',\n+\u250a   \u250a 74\u250a      username: 'katie',\n+\u250a   \u250a 75\u250a      password: '$2a$08$6.mbXqsDX82ZZ7q5d8Osb..JrGSsNp4R3IKj7mxgF6YGT0OmMw242', // 555\n+\u250a   \u250a 76\u250a      picture: 'https://randomuser.me/api/portraits/thumb/women/2.jpg',\n+\u250a   \u250a 77\u250a    },\n+\u250a   \u250a 78\u250a  ];\n+\u250a   \u250a 79\u250a\n+\u250a   \u250a 80\u250a  for (const sampleUser of sampleUsers) {\n+\u250a   \u250a 81\u250a    await pool.query(sql`\n+\u250a   \u250a 82\u250a      INSERT INTO users(id, name, username, password, picture)\n+\u250a   \u250a 83\u250a      VALUES(${sampleUser.id}, ${sampleUser.name}, ${sampleUser.username}, ${\n+\u250a   \u250a 84\u250a      sampleUser.password\n+\u250a   \u250a 85\u250a    }, ${sampleUser.picture})\n+\u250a   \u250a 86\u250a    `);\n+\u250a   \u250a 87\u250a  }\n+\u250a   \u250a 88\u250a\n+\u250a   \u250a 89\u250a  await pool.query(\n+\u250a   \u250a 90\u250a    sql`SELECT setval('users_id_seq', (SELECT max(id) FROM users))`\n \u250a 83\u250a 91\u250a  );\n \u250a 84\u250a 92\u250a\n-\u250a 85\u250a   \u250a  messages.splice(\n-\u250a 86\u250a   \u250a    0,\n-\u250a 87\u250a   \u250a    Infinity,\n-\u250a 88\u250a   \u250a    ...[\n-\u250a 89\u250a   \u250a      {\n-\u250a 90\u250a   \u250a        id: '1',\n-\u250a 91\u250a   \u250a        content: 'You on your way?',\n-\u250a 92\u250a   \u250a        createdAt: new Date(new Date('1-1-2019').getTime() - 60 * 1000 * 1000),\n-\u250a 93\u250a   \u250a        sender: '1',\n-\u250a 94\u250a   \u250a        recipient: '2',\n-\u250a 95\u250a   \u250a      },\n-\u250a 96\u250a   \u250a      {\n-\u250a 97\u250a   \u250a        id: '2',\n-\u250a 98\u250a   \u250a        content: \"Hey, it's me\",\n-\u250a 99\u250a   \u250a        createdAt: new Date(\n-\u250a100\u250a   \u250a          new Date('1-1-2019').getTime() - 2 * 60 * 1000 * 1000\n-\u250a101\u250a   \u250a        ),\n-\u250a102\u250a   \u250a        sender: '1',\n-\u250a103\u250a   \u250a        recipient: '3',\n-\u250a104\u250a   \u250a      },\n-\u250a105\u250a   \u250a      {\n-\u250a106\u250a   \u250a        id: '3',\n-\u250a107\u250a   \u250a        content: 'I should buy a boat',\n-\u250a108\u250a   \u250a        createdAt: new Date(\n-\u250a109\u250a   \u250a          new Date('1-1-2019').getTime() - 24 * 60 * 1000 * 1000\n-\u250a110\u250a   \u250a        ),\n-\u250a111\u250a   \u250a        sender: '1',\n-\u250a112\u250a   \u250a        recipient: '4',\n-\u250a113\u250a   \u250a      },\n-\u250a114\u250a   \u250a      {\n-\u250a115\u250a   \u250a        id: '4',\n-\u250a116\u250a   \u250a        content: 'This is wicked good ice cream.',\n-\u250a117\u250a   \u250a        createdAt: new Date(\n-\u250a118\u250a   \u250a          new Date('1-1-2019').getTime() - 14 * 24 * 60 * 1000 * 1000\n-\u250a119\u250a   \u250a        ),\n-\u250a120\u250a   \u250a        sender: '1',\n-\u250a121\u250a   \u250a        recipient: '5',\n-\u250a122\u250a   \u250a      },\n-\u250a123\u250a   \u250a    ]\n+\u250a   \u250a 93\u250a  await pool.query(sql`DELETE FROM chats`);\n+\u250a   \u250a 94\u250a\n+\u250a   \u250a 95\u250a  const sampleChats = [\n+\u250a   \u250a 96\u250a    {\n+\u250a   \u250a 97\u250a      id: '1',\n+\u250a   \u250a 98\u250a    },\n+\u250a   \u250a 99\u250a    {\n+\u250a   \u250a100\u250a      id: '2',\n+\u250a   \u250a101\u250a    },\n+\u250a   \u250a102\u250a    {\n+\u250a   \u250a103\u250a      id: '3',\n+\u250a   \u250a104\u250a    },\n+\u250a   \u250a105\u250a    {\n+\u250a   \u250a106\u250a      id: '4',\n+\u250a   \u250a107\u250a    },\n+\u250a   \u250a108\u250a  ];\n+\u250a   \u250a109\u250a\n+\u250a   \u250a110\u250a  for (const sampleChat of sampleChats) {\n+\u250a   \u250a111\u250a    await pool.query(sql`\n+\u250a   \u250a112\u250a      INSERT INTO chats(id)\n+\u250a   \u250a113\u250a      VALUES(${sampleChat.id})\n+\u250a   \u250a114\u250a    `);\n+\u250a   \u250a115\u250a  }\n+\u250a   \u250a116\u250a\n+\u250a   \u250a117\u250a  await pool.query(\n+\u250a   \u250a118\u250a    sql`SELECT setval('chats_id_seq', (SELECT max(id) FROM chats))`\n \u250a124\u250a119\u250a  );\n \u250a125\u250a120\u250a\n-\u250a126\u250a   \u250a  chats.splice(\n-\u250a127\u250a   \u250a    0,\n-\u250a128\u250a   \u250a    Infinity,\n-\u250a129\u250a   \u250a    ...[\n-\u250a130\u250a   \u250a      {\n-\u250a131\u250a   \u250a        id: '1',\n-\u250a132\u250a   \u250a        participants: ['1', '2'],\n-\u250a133\u250a   \u250a        messages: ['1'],\n-\u250a134\u250a   \u250a      },\n-\u250a135\u250a   \u250a      {\n-\u250a136\u250a   \u250a        id: '2',\n-\u250a137\u250a   \u250a        participants: ['1', '3'],\n-\u250a138\u250a   \u250a        messages: ['2'],\n-\u250a139\u250a   \u250a      },\n-\u250a140\u250a   \u250a      {\n-\u250a141\u250a   \u250a        id: '3',\n-\u250a142\u250a   \u250a        participants: ['1', '4'],\n-\u250a143\u250a   \u250a        messages: ['3'],\n-\u250a144\u250a   \u250a      },\n-\u250a145\u250a   \u250a      {\n-\u250a146\u250a   \u250a        id: '4',\n-\u250a147\u250a   \u250a        participants: ['1', '5'],\n-\u250a148\u250a   \u250a        messages: ['4'],\n-\u250a149\u250a   \u250a      },\n-\u250a150\u250a   \u250a    ]\n+\u250a   \u250a121\u250a  await pool.query(sql`DELETE FROM chats_users`);\n+\u250a   \u250a122\u250a\n+\u250a   \u250a123\u250a  const sampleChatsUsers = [\n+\u250a   \u250a124\u250a    {\n+\u250a   \u250a125\u250a      chat_id: '1',\n+\u250a   \u250a126\u250a      user_id: '1',\n+\u250a   \u250a127\u250a    },\n+\u250a   \u250a128\u250a    {\n+\u250a   \u250a129\u250a      chat_id: '1',\n+\u250a   \u250a130\u250a      user_id: '2',\n+\u250a   \u250a131\u250a    },\n+\u250a   \u250a132\u250a    {\n+\u250a   \u250a133\u250a      chat_id: '2',\n+\u250a   \u250a134\u250a      user_id: '1',\n+\u250a   \u250a135\u250a    },\n+\u250a   \u250a136\u250a    {\n+\u250a   \u250a137\u250a      chat_id: '2',\n+\u250a   \u250a138\u250a      user_id: '3',\n+\u250a   \u250a139\u250a    },\n+\u250a   \u250a140\u250a    {\n+\u250a   \u250a141\u250a      chat_id: '3',\n+\u250a   \u250a142\u250a      user_id: '1',\n+\u250a   \u250a143\u250a    },\n+\u250a   \u250a144\u250a    {\n+\u250a   \u250a145\u250a      chat_id: '3',\n+\u250a   \u250a146\u250a      user_id: '4',\n+\u250a   \u250a147\u250a    },\n+\u250a   \u250a148\u250a    {\n+\u250a   \u250a149\u250a      chat_id: '4',\n+\u250a   \u250a150\u250a      user_id: '1',\n+\u250a   \u250a151\u250a    },\n+\u250a   \u250a152\u250a    {\n+\u250a   \u250a153\u250a      chat_id: '4',\n+\u250a   \u250a154\u250a      user_id: '5',\n+\u250a   \u250a155\u250a    },\n+\u250a   \u250a156\u250a  ];\n+\u250a   \u250a157\u250a\n+\u250a   \u250a158\u250a  for (const sampleChatUser of sampleChatsUsers) {\n+\u250a   \u250a159\u250a    await pool.query(sql`\n+\u250a   \u250a160\u250a      INSERT INTO chats_users(chat_id, user_id)\n+\u250a   \u250a161\u250a      VALUES(${sampleChatUser.chat_id}, ${sampleChatUser.user_id})\n+\u250a   \u250a162\u250a    `);\n+\u250a   \u250a163\u250a  }\n+\u250a   \u250a164\u250a\n+\u250a   \u250a165\u250a  await pool.query(sql`DELETE FROM messages`);\n+\u250a   \u250a166\u250a\n+\u250a   \u250a167\u250a  const baseTime = new Date('1 Jan 2019 GMT').getTime();\n+\u250a   \u250a168\u250a\n+\u250a   \u250a169\u250a  const sampleMessages = [\n+\u250a   \u250a170\u250a    {\n+\u250a   \u250a171\u250a      id: '1',\n+\u250a   \u250a172\u250a      content: 'You on your way?',\n+\u250a   \u250a173\u250a      created_at: new Date(baseTime - 60 * 1000 * 1000),\n+\u250a   \u250a174\u250a      chat_id: '1',\n+\u250a   \u250a175\u250a      sender_user_id: '1',\n+\u250a   \u250a176\u250a    },\n+\u250a   \u250a177\u250a    {\n+\u250a   \u250a178\u250a      id: '2',\n+\u250a   \u250a179\u250a      content: \"Hey, it's me\",\n+\u250a   \u250a180\u250a      created_at: new Date(baseTime - 2 * 60 * 1000 * 1000),\n+\u250a   \u250a181\u250a      chat_id: '2',\n+\u250a   \u250a182\u250a      sender_user_id: '1',\n+\u250a   \u250a183\u250a    },\n+\u250a   \u250a184\u250a    {\n+\u250a   \u250a185\u250a      id: '3',\n+\u250a   \u250a186\u250a      content: 'I should buy a boat',\n+\u250a   \u250a187\u250a      created_at: new Date(baseTime - 24 * 60 * 1000 * 1000),\n+\u250a   \u250a188\u250a      chat_id: '3',\n+\u250a   \u250a189\u250a      sender_user_id: '1',\n+\u250a   \u250a190\u250a    },\n+\u250a   \u250a191\u250a    {\n+\u250a   \u250a192\u250a      id: '4',\n+\u250a   \u250a193\u250a      content: 'This is wicked good ice cream.',\n+\u250a   \u250a194\u250a      created_at: new Date(baseTime - 14 * 24 * 60 * 1000 * 1000),\n+\u250a   \u250a195\u250a      chat_id: '4',\n+\u250a   \u250a196\u250a      sender_user_id: '1',\n+\u250a   \u250a197\u250a    },\n+\u250a   \u250a198\u250a  ];\n+\u250a   \u250a199\u250a\n+\u250a   \u250a200\u250a  for (const sampleMessage of sampleMessages) {\n+\u250a   \u250a201\u250a    await pool.query(sql`\n+\u250a   \u250a202\u250a      INSERT INTO messages(id, content, created_at, chat_id, sender_user_id)\n+\u250a   \u250a203\u250a      VALUES(${sampleMessage.id}, ${sampleMessage.content}, ${\n+\u250a   \u250a204\u250a      sampleMessage.created_at\n+\u250a   \u250a205\u250a    }, ${sampleMessage.chat_id}, ${sampleMessage.sender_user_id})\n+\u250a   \u250a206\u250a    `);\n+\u250a   \u250a207\u250a  }\n+\u250a   \u250a208\u250a\n+\u250a   \u250a209\u250a  await pool.query(\n+\u250a   \u250a210\u250a    sql`SELECT setval('messages_id_seq', (SELECT max(id) FROM messages))`\n \u250a151\u250a211\u250a  );\n \u250a152\u250a212\u250a};\n \u250a153\u250a213\u250a\n-\u250a154\u250a   \u250aresetDb();\n+\u250a   \u250a214\u250aif (envResetDb) {\n+\u250a   \u250a215\u250a  resetDb();\n+\u250a   \u250a216\u250a}\n")),(0,a.kt)("h5",{id:"changed-envts"},"Changed env.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -4,3 +4,4 @@\n \u250a4\u250a4\u250aexport const secret = process.env.JWT_SECRET || '70p53cr37';\n \u250a5\u250a5\u250aexport const origin = process.env.ORIGIN || 'http://localhost:3000';\n \u250a6\u250a6\u250aexport const port = process.env.PORT || 4000;\n+\u250a \u250a7\u250aexport const resetDb = process.env.RESET_DB || false;\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"When you update tables with your own ID values, you have to update ",(0,a.kt)("inlineCode",{parentName:"p"},"SEQUENCE"),"; because PostgreSQL calculates the next ID value using ",(0,a.kt)("inlineCode",{parentName:"p"},"SEQUENCE"),"s.")),(0,a.kt)("h3",{id:"updating-resolvers"},"Updating Resolvers"),(0,a.kt)("p",null,"We will benefit from transactions for complicated SQL queries in mutation. Transactions will help us to rollback our changes if there is an exception in the middle of our operations."),(0,a.kt)("h4",{id:"server-step-116-updating-resolvers-with-sql"},(0,a.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/4eee41455e4f785eb94813d1b2f3b100a9251097"},(0,a.kt)("strong",{parentName:"a"},"Server")," Step 11.6: Updating Resolvers with SQL")),(0,a.kt)("h5",{id:"changed-schemaresolversts"},"Changed schema","/","resolvers.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,75 +1,105 @@\n \u250a  1\u250a  1\u250aimport { withFilter } from 'apollo-server-express';\n \u250a  2\u250a  2\u250aimport { DateTimeResolver, URLResolver } from 'graphql-scalars';\n-\u250a  3\u250a   \u250aimport { User, Message, Chat, chats, messages, users } from '../db';\n+\u250a   \u250a  3\u250aimport { Message, Chat, pool } from '../db';\n \u250a  4\u250a  4\u250aimport { Resolvers } from '../types/graphql';\n \u250a  5\u250a  5\u250aimport { secret, expiration } from '../env';\n \u250a  6\u250a  6\u250aimport bcrypt from 'bcrypt';\n \u250a  7\u250a  7\u250aimport jwt from 'jsonwebtoken';\n \u250a  8\u250a  8\u250aimport { validateLength, validatePassword } from '../validators';\n+\u250a   \u250a  9\u250aimport sql from 'sql-template-strings';\n \u250a  9\u250a 10\u250a\n \u250a 10\u250a 11\u250aconst resolvers: Resolvers = {\n \u250a 11\u250a 12\u250a  Date: DateTimeResolver,\n \u250a 12\u250a 13\u250a  URL: URLResolver,\n \u250a 13\u250a 14\u250a\n \u250a 14\u250a 15\u250a  Message: {\n-\u250a 15\u250a   \u250a    chat(message) {\n-\u250a 16\u250a   \u250a      return (\n-\u250a 17\u250a   \u250a        chats.find((c) => c.messages.some((m) => m === message.id)) || null\n-\u250a 18\u250a   \u250a      );\n+\u250a   \u250a 16\u250a    createdAt(message) {\n+\u250a   \u250a 17\u250a      return new Date(message.created_at);\n+\u250a   \u250a 18\u250a    },\n+\u250a   \u250a 19\u250a\n+\u250a   \u250a 20\u250a    async chat(message, args, { db }) {\n+\u250a   \u250a 21\u250a      const { rows } = await db.query(sql`\n+\u250a   \u250a 22\u250a        SELECT * FROM chats WHERE id = ${message.chat_id}\n+\u250a   \u250a 23\u250a      `);\n+\u250a   \u250a 24\u250a      return rows[0] || null;\n \u250a 19\u250a 25\u250a    },\n \u250a 20\u250a 26\u250a\n-\u250a 21\u250a   \u250a    sender(message) {\n-\u250a 22\u250a   \u250a      return users.find((u) => u.id === message.sender) || null;\n+\u250a   \u250a 27\u250a    async sender(message, args, { db }) {\n+\u250a   \u250a 28\u250a      const { rows } = await db.query(sql`\n+\u250a   \u250a 29\u250a        SELECT * FROM users WHERE id = ${message.sender_user_id}\n+\u250a   \u250a 30\u250a      `);\n+\u250a   \u250a 31\u250a      return rows[0] || null;\n \u250a 23\u250a 32\u250a    },\n \u250a 24\u250a 33\u250a\n-\u250a 25\u250a   \u250a    recipient(message) {\n-\u250a 26\u250a   \u250a      return users.find((u) => u.id === message.recipient) || null;\n+\u250a   \u250a 34\u250a    async recipient(message, args, { db }) {\n+\u250a   \u250a 35\u250a      const { rows } = await db.query(sql`\n+\u250a   \u250a 36\u250a        SELECT users.* FROM users, chats_users\n+\u250a   \u250a 37\u250a        WHERE chats_users.user_id != ${message.sender_user_id}\n+\u250a   \u250a 38\u250a        AND chats_users.chat_id = ${message.chat_id}\n+\u250a   \u250a 39\u250a      `);\n+\u250a   \u250a 40\u250a      return rows[0] || null;\n \u250a 27\u250a 41\u250a    },\n \u250a 28\u250a 42\u250a\n \u250a 29\u250a 43\u250a    isMine(message, args, { currentUser }) {\n-\u250a 30\u250a   \u250a      return message.sender === currentUser.id;\n+\u250a   \u250a 44\u250a      return message.sender_user_id === currentUser.id;\n \u250a 31\u250a 45\u250a    },\n \u250a 32\u250a 46\u250a  },\n \u250a 33\u250a 47\u250a\n \u250a 34\u250a 48\u250a  Chat: {\n-\u250a 35\u250a   \u250a    name(chat, args, { currentUser }) {\n+\u250a   \u250a 49\u250a    async name(chat, args, { currentUser, db }) {\n \u250a 36\u250a 50\u250a      if (!currentUser) return null;\n \u250a 37\u250a 51\u250a\n-\u250a 38\u250a   \u250a      const participantId = chat.participants.find((p) => p !== currentUser.id);\n-\u250a 39\u250a   \u250a\n-\u250a 40\u250a   \u250a      if (!participantId) return null;\n+\u250a   \u250a 52\u250a      const { rows } = await db.query(sql`\n+\u250a   \u250a 53\u250a        SELECT users.* FROM users, chats_users\n+\u250a   \u250a 54\u250a        WHERE users.id != ${currentUser.id}\n+\u250a   \u250a 55\u250a        AND users.id = chats_users.user_id\n+\u250a   \u250a 56\u250a        AND chats_users.chat_id = ${chat.id}`);\n \u250a 41\u250a 57\u250a\n-\u250a 42\u250a   \u250a      const participant = users.find((u) => u.id === participantId);\n+\u250a   \u250a 58\u250a      const participant = rows[0];\n \u250a 43\u250a 59\u250a\n \u250a 44\u250a 60\u250a      return participant ? participant.name : null;\n \u250a 45\u250a 61\u250a    },\n \u250a 46\u250a 62\u250a\n-\u250a 47\u250a   \u250a    picture(chat, args, { currentUser }) {\n+\u250a   \u250a 63\u250a    async picture(chat, args, { currentUser, db }) {\n \u250a 48\u250a 64\u250a      if (!currentUser) return null;\n \u250a 49\u250a 65\u250a\n-\u250a 50\u250a   \u250a      const participantId = chat.participants.find((p) => p !== currentUser.id);\n+\u250a   \u250a 66\u250a      const { rows } = await db.query(sql`\n+\u250a   \u250a 67\u250a        SELECT users.* FROM users, chats_users\n+\u250a   \u250a 68\u250a        WHERE users.id != ${currentUser.id}\n+\u250a   \u250a 69\u250a        AND users.id = chats_users.user_id\n+\u250a   \u250a 70\u250a        AND chats_users.chat_id = ${chat.id}`);\n \u250a 51\u250a 71\u250a\n-\u250a 52\u250a   \u250a      if (!participantId) return null;\n-\u250a 53\u250a   \u250a\n-\u250a 54\u250a   \u250a      const participant = users.find((u) => u.id === participantId);\n+\u250a   \u250a 72\u250a      const participant = rows[0];\n \u250a 55\u250a 73\u250a\n \u250a 56\u250a 74\u250a      return participant ? participant.picture : null;\n \u250a 57\u250a 75\u250a    },\n \u250a 58\u250a 76\u250a\n-\u250a 59\u250a   \u250a    messages(chat) {\n-\u250a 60\u250a   \u250a      return messages.filter((m) => chat.messages.includes(m.id));\n+\u250a   \u250a 77\u250a    async messages(chat, args, { db }) {\n+\u250a   \u250a 78\u250a      const { rows } = await db.query(\n+\u250a   \u250a 79\u250a        sql`SELECT * FROM messages WHERE chat_id = ${chat.id}`\n+\u250a   \u250a 80\u250a      );\n+\u250a   \u250a 81\u250a\n+\u250a   \u250a 82\u250a      return rows;\n \u250a 61\u250a 83\u250a    },\n \u250a 62\u250a 84\u250a\n-\u250a 63\u250a   \u250a    lastMessage(chat) {\n-\u250a 64\u250a   \u250a      const lastMessage = chat.messages[chat.messages.length - 1];\n+\u250a   \u250a 85\u250a    async lastMessage(chat, args, { db }) {\n+\u250a   \u250a 86\u250a      const { rows } = await db.query(sql`\n+\u250a   \u250a 87\u250a        SELECT * FROM messages\n+\u250a   \u250a 88\u250a        WHERE chat_id = ${chat.id}\n+\u250a   \u250a 89\u250a        ORDER BY created_at DESC\n+\u250a   \u250a 90\u250a        LIMIT 1`);\n \u250a 65\u250a 91\u250a\n-\u250a 66\u250a   \u250a      return messages.find((m) => m.id === lastMessage) || null;\n+\u250a   \u250a 92\u250a      return rows[0];\n \u250a 67\u250a 93\u250a    },\n \u250a 68\u250a 94\u250a\n-\u250a 69\u250a   \u250a    participants(chat) {\n-\u250a 70\u250a   \u250a      return chat.participants\n-\u250a 71\u250a   \u250a        .map((p) => users.find((u) => u.id === p))\n-\u250a 72\u250a   \u250a        .filter(Boolean) as User[];\n+\u250a   \u250a 95\u250a    async participants(chat, args, { db }) {\n+\u250a   \u250a 96\u250a      const { rows } = await db.query(sql`\n+\u250a   \u250a 97\u250a        SELECT users.* FROM users, chats_users\n+\u250a   \u250a 98\u250a        WHERE chats_users.chat_id = ${chat.id}\n+\u250a   \u250a 99\u250a        AND chats_users.user_id = users.id\n+\u250a   \u250a100\u250a      `);\n+\u250a   \u250a101\u250a\n+\u250a   \u250a102\u250a      return rows;\n \u250a 73\u250a103\u250a    },\n \u250a 74\u250a104\u250a  },\n \u250a 75\u250a105\u250a\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -78,32 +108,48 @@\n \u250a 78\u250a108\u250a      return currentUser || null;\n \u250a 79\u250a109\u250a    },\n \u250a 80\u250a110\u250a\n-\u250a 81\u250a   \u250a    chats(root, args, { currentUser }) {\n+\u250a   \u250a111\u250a    async chats(root, args, { currentUser, db }) {\n \u250a 82\u250a112\u250a      if (!currentUser) return [];\n \u250a 83\u250a113\u250a\n-\u250a 84\u250a   \u250a      return chats.filter((c) => c.participants.includes(currentUser.id));\n+\u250a   \u250a114\u250a      const { rows } = await db.query(sql`\n+\u250a   \u250a115\u250a        SELECT chats.* FROM chats, chats_users\n+\u250a   \u250a116\u250a        WHERE chats.id = chats_users.chat_id\n+\u250a   \u250a117\u250a        AND chats_users.user_id = ${currentUser.id}\n+\u250a   \u250a118\u250a      `);\n+\u250a   \u250a119\u250a\n+\u250a   \u250a120\u250a      return rows;\n \u250a 85\u250a121\u250a    },\n \u250a 86\u250a122\u250a\n-\u250a 87\u250a   \u250a    chat(root, { chatId }, { currentUser }) {\n+\u250a   \u250a123\u250a    async chat(root, { chatId }, { currentUser, db }) {\n \u250a 88\u250a124\u250a      if (!currentUser) return null;\n \u250a 89\u250a125\u250a\n-\u250a 90\u250a   \u250a      const chat = chats.find((c) => c.id === chatId);\n-\u250a 91\u250a   \u250a\n-\u250a 92\u250a   \u250a      if (!chat) return null;\n+\u250a   \u250a126\u250a      const { rows } = await db.query(sql`\n+\u250a   \u250a127\u250a        SELECT chats.* FROM chats, chats_users\n+\u250a   \u250a128\u250a        WHERE chats_users.chat_id = ${chatId}\n+\u250a   \u250a129\u250a        AND chats.id = chats_users.chat_id\n+\u250a   \u250a130\u250a        AND chats_users.user_id = ${currentUser.id}\n+\u250a   \u250a131\u250a      `);\n \u250a 93\u250a132\u250a\n-\u250a 94\u250a   \u250a      return chat.participants.includes(currentUser.id) ? chat : null;\n+\u250a   \u250a133\u250a      return rows[0] ? rows[0] : null;\n \u250a 95\u250a134\u250a    },\n \u250a 96\u250a135\u250a\n-\u250a 97\u250a   \u250a    users(root, args, { currentUser }) {\n+\u250a   \u250a136\u250a    async users(root, args, { currentUser, db }) {\n \u250a 98\u250a137\u250a      if (!currentUser) return [];\n \u250a 99\u250a138\u250a\n-\u250a100\u250a   \u250a      return users.filter((u) => u.id !== currentUser.id);\n+\u250a   \u250a139\u250a      const { rows } = await db.query(sql`\n+\u250a   \u250a140\u250a        SELECT * FROM users WHERE users.id != ${currentUser.id}\n+\u250a   \u250a141\u250a      `);\n+\u250a   \u250a142\u250a\n+\u250a   \u250a143\u250a      return rows;\n \u250a101\u250a144\u250a    },\n \u250a102\u250a145\u250a  },\n \u250a103\u250a146\u250a\n \u250a104\u250a147\u250a  Mutation: {\n-\u250a105\u250a   \u250a    signIn(root, { username, password }, { res }) {\n-\u250a106\u250a   \u250a      const user = users.find((u) => u.username === username);\n+\u250a   \u250a148\u250a    async signIn(root, { username, password }, { db, res }) {\n+\u250a   \u250a149\u250a      const { rows } = await db.query(\n+\u250a   \u250a150\u250a        sql`SELECT * FROM users WHERE username = ${username}`\n+\u250a   \u250a151\u250a      );\n+\u250a   \u250a152\u250a      const user = rows[0];\n \u250a107\u250a153\u250a\n \u250a108\u250a154\u250a      if (!user) {\n \u250a109\u250a155\u250a        throw new Error('user not found');\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -122,7 +168,7 @@\n \u250a122\u250a168\u250a      return user;\n \u250a123\u250a169\u250a    },\n \u250a124\u250a170\u250a\n-\u250a125\u250a   \u250a    signUp(root, { name, username, password, passwordConfirm }) {\n+\u250a   \u250a171\u250a    async signUp(root, { name, username, password, passwordConfirm }, { db }) {\n \u250a126\u250a172\u250a      validateLength('req.name', name, 3, 50);\n \u250a127\u250a173\u250a      validateLength('req.username', username, 3, 18);\n \u250a128\u250a174\u250a      validatePassword('req.password', password);\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -131,120 +177,129 @@\n \u250a131\u250a177\u250a        throw Error(\"req.password and req.passwordConfirm don't match\");\n \u250a132\u250a178\u250a      }\n \u250a133\u250a179\u250a\n-\u250a134\u250a   \u250a      if (users.some((u) => u.username === username)) {\n+\u250a   \u250a180\u250a      const existingUserQuery = await db.query(\n+\u250a   \u250a181\u250a        sql`SELECT * FROM users WHERE username = ${username}`\n+\u250a   \u250a182\u250a      );\n+\u250a   \u250a183\u250a      if (existingUserQuery.rows[0]) {\n \u250a135\u250a184\u250a        throw Error('username already exists');\n \u250a136\u250a185\u250a      }\n \u250a137\u250a186\u250a\n \u250a138\u250a187\u250a      const passwordHash = bcrypt.hashSync(password, bcrypt.genSaltSync(8));\n \u250a139\u250a188\u250a\n-\u250a140\u250a   \u250a      const user: User = {\n-\u250a141\u250a   \u250a        id: String(users.length + 1),\n-\u250a142\u250a   \u250a        password: passwordHash,\n-\u250a143\u250a   \u250a        picture: '',\n-\u250a144\u250a   \u250a        username,\n-\u250a145\u250a   \u250a        name,\n-\u250a146\u250a   \u250a      };\n+\u250a   \u250a189\u250a      const createdUserQuery = await db.query(sql`\n+\u250a   \u250a190\u250a        INSERT INTO users(password, picture, username, name)\n+\u250a   \u250a191\u250a        VALUES(${passwordHash}, '', ${username}, ${name})\n+\u250a   \u250a192\u250a        RETURNING *\n+\u250a   \u250a193\u250a      `);\n \u250a147\u250a194\u250a\n-\u250a148\u250a   \u250a      users.push(user);\n+\u250a   \u250a195\u250a      const user = createdUserQuery.rows[0];\n \u250a149\u250a196\u250a\n \u250a150\u250a197\u250a      return user;\n \u250a151\u250a198\u250a    },\n \u250a152\u250a199\u250a\n-\u250a153\u250a   \u250a    addMessage(root, { chatId, content }, { currentUser, pubsub }) {\n+\u250a   \u250a200\u250a    async addMessage(root, { chatId, content }, { currentUser, pubsub, db }) {\n \u250a154\u250a201\u250a      if (!currentUser) return null;\n \u250a155\u250a202\u250a\n-\u250a156\u250a   \u250a      const chatIndex = chats.findIndex((c) => c.id === chatId);\n-\u250a157\u250a   \u250a\n-\u250a158\u250a   \u250a      if (chatIndex === -1) return null;\n+\u250a   \u250a203\u250a      const { rows } = await db.query(sql`\n+\u250a   \u250a204\u250a        INSERT INTO messages(chat_id, sender_user_id, content)\n+\u250a   \u250a205\u250a        VALUES(${chatId}, ${currentUser.id}, ${content})\n+\u250a   \u250a206\u250a        RETURNING *\n+\u250a   \u250a207\u250a      `);\n \u250a159\u250a208\u250a\n-\u250a160\u250a   \u250a      const chat = chats[chatIndex];\n-\u250a161\u250a   \u250a      if (!chat.participants.includes(currentUser.id)) return null;\n-\u250a162\u250a   \u250a\n-\u250a163\u250a   \u250a      const messagesIds = messages.map((currentMessage) =>\n-\u250a164\u250a   \u250a        Number(currentMessage.id)\n-\u250a165\u250a   \u250a      );\n-\u250a166\u250a   \u250a      const messageId = String(Math.max(...messagesIds) + 1);\n-\u250a167\u250a   \u250a      const message: Message = {\n-\u250a168\u250a   \u250a        id: messageId,\n-\u250a169\u250a   \u250a        createdAt: new Date(),\n-\u250a170\u250a   \u250a        sender: currentUser.id,\n-\u250a171\u250a   \u250a        recipient: chat.participants.find(\n-\u250a172\u250a   \u250a          (p) => p !== currentUser.id\n-\u250a173\u250a   \u250a        ) as string,\n-\u250a174\u250a   \u250a        content,\n-\u250a175\u250a   \u250a      };\n-\u250a176\u250a   \u250a\n-\u250a177\u250a   \u250a      messages.push(message);\n-\u250a178\u250a   \u250a      chat.messages.push(messageId);\n-\u250a179\u250a   \u250a      // The chat will appear at the top of the ChatsList component\n-\u250a180\u250a   \u250a      chats.splice(chatIndex, 1);\n-\u250a181\u250a   \u250a      chats.unshift(chat);\n+\u250a   \u250a209\u250a      const messageAdded = rows[0];\n \u250a182\u250a210\u250a\n \u250a183\u250a211\u250a      pubsub.publish('messageAdded', {\n-\u250a184\u250a   \u250a        messageAdded: message,\n+\u250a   \u250a212\u250a        messageAdded,\n \u250a185\u250a213\u250a      });\n \u250a186\u250a214\u250a\n-\u250a187\u250a   \u250a      return message;\n+\u250a   \u250a215\u250a      return messageAdded;\n \u250a188\u250a216\u250a    },\n \u250a189\u250a217\u250a\n-\u250a190\u250a   \u250a    addChat(root, { recipientId }, { currentUser, pubsub }) {\n+\u250a   \u250a218\u250a    async addChat(root, { recipientId }, { currentUser, pubsub, db }) {\n \u250a191\u250a219\u250a      if (!currentUser) return null;\n-\u250a192\u250a   \u250a      if (!users.some((u) => u.id === recipientId)) return null;\n \u250a193\u250a220\u250a\n-\u250a194\u250a   \u250a      let chat = chats.find(\n-\u250a195\u250a   \u250a        (c) =>\n-\u250a196\u250a   \u250a          c.participants.includes(currentUser.id) &&\n-\u250a197\u250a   \u250a          c.participants.includes(recipientId)\n-\u250a198\u250a   \u250a      );\n+\u250a   \u250a221\u250a      const { rows } = await db.query(sql`\n+\u250a   \u250a222\u250a        SELECT chats.* FROM chats, (SELECT * FROM chats_users WHERE user_id = ${currentUser.id}) AS chats_of_current_user, chats_users\n+\u250a   \u250a223\u250a        WHERE chats_users.chat_id = chats_of_current_user.chat_id\n+\u250a   \u250a224\u250a        AND chats.id = chats_users.chat_id\n+\u250a   \u250a225\u250a        AND chats_users.user_id = ${recipientId}\n+\u250a   \u250a226\u250a      `);\n \u250a199\u250a227\u250a\n-\u250a200\u250a   \u250a      if (chat) return chat;\n+\u250a   \u250a228\u250a      // If there is already a chat between these two users, return it\n+\u250a   \u250a229\u250a      if (rows[0]) {\n+\u250a   \u250a230\u250a        return rows[0];\n+\u250a   \u250a231\u250a      }\n \u250a201\u250a232\u250a\n-\u250a202\u250a   \u250a      const chatsIds = chats.map((c) => Number(c.id));\n+\u250a   \u250a233\u250a      try {\n+\u250a   \u250a234\u250a        await db.query('BEGIN');\n \u250a203\u250a235\u250a\n-\u250a204\u250a   \u250a      chat = {\n-\u250a205\u250a   \u250a        id: String(Math.max(...chatsIds) + 1),\n-\u250a206\u250a   \u250a        participants: [currentUser.id, recipientId],\n-\u250a207\u250a   \u250a        messages: [],\n-\u250a208\u250a   \u250a      };\n+\u250a   \u250a236\u250a        const { rows } = await db.query(sql`\n+\u250a   \u250a237\u250a          INSERT INTO chats\n+\u250a   \u250a238\u250a          DEFAULT VALUES\n+\u250a   \u250a239\u250a          RETURNING *\n+\u250a   \u250a240\u250a        `);\n \u250a209\u250a241\u250a\n-\u250a210\u250a   \u250a      chats.push(chat);\n+\u250a   \u250a242\u250a        const chatAdded = rows[0];\n \u250a211\u250a243\u250a\n-\u250a212\u250a   \u250a      pubsub.publish('chatAdded', {\n-\u250a213\u250a   \u250a        chatAdded: chat,\n-\u250a214\u250a   \u250a      });\n+\u250a   \u250a244\u250a        await db.query(sql`\n+\u250a   \u250a245\u250a          INSERT INTO chats_users(chat_id, user_id)\n+\u250a   \u250a246\u250a          VALUES(${chatAdded.id}, ${currentUser.id})\n+\u250a   \u250a247\u250a        `);\n \u250a215\u250a248\u250a\n-\u250a216\u250a   \u250a      return chat;\n-\u250a217\u250a   \u250a    },\n+\u250a   \u250a249\u250a        await db.query(sql`\n+\u250a   \u250a250\u250a          INSERT INTO chats_users(chat_id, user_id)\n+\u250a   \u250a251\u250a          VALUES(${chatAdded.id}, ${recipientId})\n+\u250a   \u250a252\u250a        `);\n \u250a218\u250a253\u250a\n-\u250a219\u250a   \u250a    removeChat(root, { chatId }, { currentUser, pubsub }) {\n-\u250a220\u250a   \u250a      if (!currentUser) return null;\n+\u250a   \u250a254\u250a        await db.query('COMMIT');\n+\u250a   \u250a255\u250a\n+\u250a   \u250a256\u250a        pubsub.publish('chatAdded', {\n+\u250a   \u250a257\u250a          chatAdded,\n+\u250a   \u250a258\u250a        });\n \u250a221\u250a259\u250a\n-\u250a222\u250a   \u250a      const chatIndex = chats.findIndex((c) => c.id === chatId);\n+\u250a   \u250a260\u250a        return chatAdded;\n+\u250a   \u250a261\u250a      } catch (e) {\n+\u250a   \u250a262\u250a        await db.query('ROLLBACK');\n+\u250a   \u250a263\u250a        throw e;\n+\u250a   \u250a264\u250a      }\n+\u250a   \u250a265\u250a    },\n \u250a223\u250a266\u250a\n-\u250a224\u250a   \u250a      if (chatIndex === -1) return null;\n+\u250a   \u250a267\u250a    async removeChat(root, { chatId }, { currentUser, pubsub, db }) {\n+\u250a   \u250a268\u250a      if (!currentUser) return null;\n \u250a225\u250a269\u250a\n-\u250a226\u250a   \u250a      const chat = chats[chatIndex];\n+\u250a   \u250a270\u250a      try {\n+\u250a   \u250a271\u250a        await db.query('BEGIN');\n \u250a227\u250a272\u250a\n-\u250a228\u250a   \u250a      if (!chat.participants.some((p) => p === currentUser.id)) return null;\n+\u250a   \u250a273\u250a        const { rows } = await db.query(sql`\n+\u250a   \u250a274\u250a          SELECT chats.* FROM chats, chats_users\n+\u250a   \u250a275\u250a          WHERE id = ${chatId}\n+\u250a   \u250a276\u250a          AND chats.id = chats_users.chat_id\n+\u250a   \u250a277\u250a          AND chats_users.user_id = ${currentUser.id}\n+\u250a   \u250a278\u250a        `);\n \u250a229\u250a279\u250a\n-\u250a230\u250a   \u250a      chat.messages.forEach((chatMessage) => {\n-\u250a231\u250a   \u250a        const chatMessageIndex = messages.findIndex(\n-\u250a232\u250a   \u250a          (m) => m.id === chatMessage\n-\u250a233\u250a   \u250a        );\n+\u250a   \u250a280\u250a        const chat = rows[0];\n \u250a234\u250a281\u250a\n-\u250a235\u250a   \u250a        if (chatMessageIndex !== -1) {\n-\u250a236\u250a   \u250a          messages.splice(chatMessageIndex, 1);\n+\u250a   \u250a282\u250a        if (!chat) {\n+\u250a   \u250a283\u250a          await db.query('ROLLBACK');\n+\u250a   \u250a284\u250a          return null;\n \u250a237\u250a285\u250a        }\n-\u250a238\u250a   \u250a      });\n \u250a239\u250a286\u250a\n-\u250a240\u250a   \u250a      chats.splice(chatIndex, 1);\n+\u250a   \u250a287\u250a        await db.query(sql`\n+\u250a   \u250a288\u250a          DELETE FROM chats WHERE chats.id = ${chatId}\n+\u250a   \u250a289\u250a        `);\n \u250a241\u250a290\u250a\n-\u250a242\u250a   \u250a      pubsub.publish('chatRemoved', {\n-\u250a243\u250a   \u250a        chatRemoved: chat.id,\n-\u250a244\u250a   \u250a        targetChat: chat,\n-\u250a245\u250a   \u250a      });\n+\u250a   \u250a291\u250a        pubsub.publish('chatRemoved', {\n+\u250a   \u250a292\u250a          chatRemoved: chat.id,\n+\u250a   \u250a293\u250a          targetChat: chat,\n+\u250a   \u250a294\u250a        });\n+\u250a   \u250a295\u250a\n+\u250a   \u250a296\u250a        await db.query('COMMIT');\n \u250a246\u250a297\u250a\n-\u250a247\u250a   \u250a      return chatId;\n+\u250a   \u250a298\u250a        return chatId;\n+\u250a   \u250a299\u250a      } catch (e) {\n+\u250a   \u250a300\u250a        await db.query('ROLLBACK');\n+\u250a   \u250a301\u250a        throw e;\n+\u250a   \u250a302\u250a      }\n \u250a248\u250a303\u250a    },\n \u250a249\u250a304\u250a  },\n \u250a250\u250a305\u250a\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -252,12 +307,19 @@\n \u250a252\u250a307\u250a    messageAdded: {\n \u250a253\u250a308\u250a      subscribe: withFilter(\n \u250a254\u250a309\u250a        (root, args, { pubsub }) => pubsub.asyncIterator('messageAdded'),\n-\u250a255\u250a   \u250a        ({ messageAdded }, args, { currentUser }) => {\n+\u250a   \u250a310\u250a        async (\n+\u250a   \u250a311\u250a          { messageAdded }: { messageAdded: Message },\n+\u250a   \u250a312\u250a          args,\n+\u250a   \u250a313\u250a          { currentUser }\n+\u250a   \u250a314\u250a        ) => {\n \u250a256\u250a315\u250a          if (!currentUser) return false;\n \u250a257\u250a316\u250a\n-\u250a258\u250a   \u250a          return [messageAdded.sender, messageAdded.recipient].includes(\n-\u250a259\u250a   \u250a            currentUser.id\n-\u250a260\u250a   \u250a          );\n+\u250a   \u250a317\u250a          const { rows } = await pool.query(sql`\n+\u250a   \u250a318\u250a            SELECT * FROM chats_users\n+\u250a   \u250a319\u250a            WHERE chat_id = ${messageAdded.chat_id}\n+\u250a   \u250a320\u250a            AND user_id = ${currentUser.id}`);\n+\u250a   \u250a321\u250a\n+\u250a   \u250a322\u250a          return !!rows.length;\n \u250a261\u250a323\u250a        }\n \u250a262\u250a324\u250a      ),\n \u250a263\u250a325\u250a    },\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -265,10 +327,15 @@\n \u250a265\u250a327\u250a    chatAdded: {\n \u250a266\u250a328\u250a      subscribe: withFilter(\n \u250a267\u250a329\u250a        (root, args, { pubsub }) => pubsub.asyncIterator('chatAdded'),\n-\u250a268\u250a   \u250a        ({ chatAdded }: { chatAdded: Chat }, args, { currentUser }) => {\n+\u250a   \u250a330\u250a        async ({ chatAdded }: { chatAdded: Chat }, args, { currentUser }) => {\n \u250a269\u250a331\u250a          if (!currentUser) return false;\n \u250a270\u250a332\u250a\n-\u250a271\u250a   \u250a          return chatAdded.participants.some((p) => p === currentUser.id);\n+\u250a   \u250a333\u250a          const { rows } = await pool.query(sql`\n+\u250a   \u250a334\u250a            SELECT * FROM chats_users\n+\u250a   \u250a335\u250a            WHERE chat_id = ${chatAdded.id}\n+\u250a   \u250a336\u250a            AND user_id = ${currentUser.id}`);\n+\u250a   \u250a337\u250a\n+\u250a   \u250a338\u250a          return !!rows.length;\n \u250a272\u250a339\u250a        }\n \u250a273\u250a340\u250a      ),\n \u250a274\u250a341\u250a    },\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -276,10 +343,15 @@\n \u250a276\u250a343\u250a    chatRemoved: {\n \u250a277\u250a344\u250a      subscribe: withFilter(\n \u250a278\u250a345\u250a        (root, args, { pubsub }) => pubsub.asyncIterator('chatRemoved'),\n-\u250a279\u250a   \u250a        ({ targetChat }: { targetChat: Chat }, args, { currentUser }) => {\n+\u250a   \u250a346\u250a        async ({ targetChat }: { targetChat: Chat }, args, { currentUser }) => {\n \u250a280\u250a347\u250a          if (!currentUser) return false;\n \u250a281\u250a348\u250a\n-\u250a282\u250a   \u250a          return targetChat.participants.some((p) => p === currentUser.id);\n+\u250a   \u250a349\u250a          const { rows } = await pool.query(sql`\n+\u250a   \u250a350\u250a            SELECT * FROM chats_users\n+\u250a   \u250a351\u250a            WHERE chat_id = ${targetChat.id}\n+\u250a   \u250a352\u250a            AND user_id = ${currentUser.id}`);\n+\u250a   \u250a353\u250a\n+\u250a   \u250a354\u250a          return !!rows.length;\n \u250a283\u250a355\u250a        }\n \u250a284\u250a356\u250a      ),\n \u250a285\u250a357\u250a    },\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"We use ",(0,a.kt)("inlineCode",{parentName:"p"},"pool")," itself instead of ",(0,a.kt)("inlineCode",{parentName:"p"},"db")," from the context in the subscriptions. Remember we don't request for a new client from the pool in subscriptions.\nIf you use ",(0,a.kt)("inlineCode",{parentName:"p"},"pool.query"),", it just opens a connection, does that operation and set the client free. In that case, you wouldn't be able to work with transactions which is not need in GraphQL Subscriptions.")),(0,a.kt)("h3",{id:"updating-subscriptions-w-postgresql-pubsub-mechanism"},"Updating Subscriptions w/ PostgreSQL PubSub mechanism"),(0,a.kt)("p",null,"Apollo\u2019s default PubSub mechanism is not for production usage. So, we will use PostgreSQL\u2019s notify/listen for our PubSub mechanism in GraphQL Subscriptions."),(0,a.kt)("p",null,"Install the necessary packages;"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"$ yarn add graphql-postgres-subscriptions\n")),(0,a.kt)("h4",{id:"server-step-117-updating-subscriptions-w-postgresql-pubsub-mechanism"},(0,a.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/a4e0bb70e7ee03bcedbac4198e467699faf35d81"},(0,a.kt)("strong",{parentName:"a"},"Server")," Step 11.7: Updating Subscriptions w/ PostgreSQL PubSub mechanism")),(0,a.kt)("h5",{id:"changed-indexts-1"},"Changed index.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,4 +1,4 @@\n-\u250a1\u250a \u250aimport { ApolloServer, gql, PubSub } from 'apollo-server-express';\n+\u250a \u250a1\u250aimport { ApolloServer } from 'apollo-server-express';\n \u250a2\u250a2\u250aimport cookie from 'cookie';\n \u250a3\u250a3\u250aimport http from 'http';\n \u250a4\u250a4\u250aimport jwt from 'jsonwebtoken';\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -8,8 +8,15 @@\n \u250a 8\u250a 8\u250aimport schema from './schema';\n \u250a 9\u250a 9\u250aimport { MyContext } from './context';\n \u250a10\u250a10\u250aimport sql from 'sql-template-strings';\n+\u250a  \u250a11\u250aconst { PostgresPubSub } = require('graphql-postgres-subscriptions');\n \u250a11\u250a12\u250a\n-\u250a12\u250a  \u250aconst pubsub = new PubSub();\n+\u250a  \u250a13\u250aconst pubsub = new PostgresPubSub({\n+\u250a  \u250a14\u250a  host: 'localhost',\n+\u250a  \u250a15\u250a  port: process.env.DB_PORT ? parseInt(process.env.DB_PORT) : 5432,\n+\u250a  \u250a16\u250a  user: 'testuser',\n+\u250a  \u250a17\u250a  password: 'testpassword',\n+\u250a  \u250a18\u250a  database: 'whatsapp',\n+\u250a  \u250a19\u250a});\n \u250a13\u250a20\u250aconst server = new ApolloServer({\n \u250a14\u250a21\u250a  schema,\n \u250a15\u250a22\u250a  context: async (session: any) => {\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -44,28 +51,28 @@\n \u250a44\u250a51\u250a      currentUser,\n \u250a45\u250a52\u250a      pubsub,\n \u250a46\u250a53\u250a      db,\n-\u250a47\u250a  \u250a      res: session.res\n+\u250a  \u250a54\u250a      res: session.res,\n \u250a48\u250a55\u250a    };\n \u250a49\u250a56\u250a  },\n \u250a50\u250a57\u250a  subscriptions: {\n \u250a51\u250a58\u250a    onConnect(params, ws, ctx) {\n \u250a52\u250a59\u250a      // pass the request object to context\n \u250a53\u250a60\u250a      return {\n-\u250a54\u250a  \u250a        request: ctx.request\n+\u250a  \u250a61\u250a        request: ctx.request,\n \u250a55\u250a62\u250a      };\n-\u250a56\u250a  \u250a    }\n+\u250a  \u250a63\u250a    },\n \u250a57\u250a64\u250a  },\n \u250a58\u250a65\u250a  formatResponse: (res: any, { context }: any) => {\n \u250a59\u250a66\u250a    context.db.release();\n \u250a60\u250a67\u250a\n \u250a61\u250a68\u250a    return res;\n-\u250a62\u250a  \u250a  }\n+\u250a  \u250a69\u250a  },\n \u250a63\u250a70\u250a});\n \u250a64\u250a71\u250a\n \u250a65\u250a72\u250aserver.applyMiddleware({\n \u250a66\u250a73\u250a  app,\n \u250a67\u250a74\u250a  path: '/graphql',\n-\u250a68\u250a  \u250a  cors: { credentials: true, origin }\n+\u250a  \u250a75\u250a  cors: { credentials: true, origin },\n \u250a69\u250a76\u250a});\n \u250a70\u250a77\u250a\n \u250a71\u250a78\u250aconst httpServer = http.createServer(app);\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Unfortunately ",(0,a.kt)("inlineCode",{parentName:"p"},"graphql-postgres-subscription")," doesn't have TypeScript typings, so we have to import it using ",(0,a.kt)("inlineCode",{parentName:"p"},"require"),".")),(0,a.kt)("h3",{id:"updating-tests"},"Updating Tests"),(0,a.kt)("p",null,"We should update tests to use SQL instead of in-memory database."),(0,a.kt)("h4",{id:"server-step-118-updating-tests-with-sql"},(0,a.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/ea0fa2ad6bdcbf38aa3b1aada197b53cf8b5aa3f"},(0,a.kt)("strong",{parentName:"a"},"Server")," Step 11.8: Updating Tests with SQL")),(0,a.kt)("h5",{id:"changed-testsmutationsaddchattestts"},"Changed tests","/","mutations","/","addChat.test.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,18 +1,27 @@\n \u250a 1\u250a 1\u250aimport { createTestClient } from 'apollo-server-testing';\n \u250a 2\u250a 2\u250aimport { ApolloServer, PubSub, gql } from 'apollo-server-express';\n \u250a 3\u250a 3\u250aimport schema from '../../schema';\n-\u250a 4\u250a  \u250aimport { resetDb, users } from '../../db';\n+\u250a  \u250a 4\u250aimport { resetDb, pool } from '../../db';\n+\u250a  \u250a 5\u250aimport sql from 'sql-template-strings';\n+\u250a  \u250a 6\u250aimport { MyContext } from '../../context';\n \u250a 5\u250a 7\u250a\n \u250a 6\u250a 8\u250adescribe('Mutation.addChat', () => {\n \u250a 7\u250a 9\u250a  beforeEach(resetDb);\n \u250a 8\u250a10\u250a\n \u250a 9\u250a11\u250a  it('creates a new chat between current user and specified recipient', async () => {\n+\u250a  \u250a12\u250a    const { rows } = await pool.query(sql`SELECT * FROM users WHERE id = 2`);\n+\u250a  \u250a13\u250a    const currentUser = rows[0];\n \u250a10\u250a14\u250a    const server = new ApolloServer({\n \u250a11\u250a15\u250a      schema,\n-\u250a12\u250a  \u250a      context: () => ({\n+\u250a  \u250a16\u250a      context: async () => ({\n \u250a13\u250a17\u250a        pubsub: new PubSub(),\n-\u250a14\u250a  \u250a        currentUser: users[1],\n+\u250a  \u250a18\u250a        currentUser,\n+\u250a  \u250a19\u250a        db: await pool.connect(),\n \u250a15\u250a20\u250a      }),\n+\u250a  \u250a21\u250a      formatResponse: (res: any, { context }: { context: MyContext }) => {\n+\u250a  \u250a22\u250a        context.db.release();\n+\u250a  \u250a23\u250a        return res;\n+\u250a  \u250a24\u250a      },\n \u250a16\u250a25\u250a    });\n \u250a17\u250a26\u250a\n \u250a18\u250a27\u250a    const { query, mutate } = createTestClient(server);\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -57,12 +66,19 @@\n \u250a57\u250a66\u250a  });\n \u250a58\u250a67\u250a\n \u250a59\u250a68\u250a  it('returns the existing chat if so', async () => {\n+\u250a  \u250a69\u250a    const { rows } = await pool.query(sql`SELECT * FROM users WHERE id = 1`);\n+\u250a  \u250a70\u250a    const currentUser = rows[0];\n \u250a60\u250a71\u250a    const server = new ApolloServer({\n \u250a61\u250a72\u250a      schema,\n-\u250a62\u250a  \u250a      context: () => ({\n+\u250a  \u250a73\u250a      context: async () => ({\n \u250a63\u250a74\u250a        pubsub: new PubSub(),\n-\u250a64\u250a  \u250a        currentUser: users[0],\n+\u250a  \u250a75\u250a        currentUser,\n+\u250a  \u250a76\u250a        db: await pool.connect(),\n \u250a65\u250a77\u250a      }),\n+\u250a  \u250a78\u250a      formatResponse: (res: any, { context }: { context: MyContext }) => {\n+\u250a  \u250a79\u250a        context.db.release();\n+\u250a  \u250a80\u250a        return res;\n+\u250a  \u250a81\u250a      },\n \u250a66\u250a82\u250a    });\n \u250a67\u250a83\u250a\n \u250a68\u250a84\u250a    const { query, mutate } = createTestClient(server);\n")),(0,a.kt)("h5",{id:"changed-testsmutationsaddmessagetestts"},"Changed tests","/","mutations","/","addMessage.test.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,18 +1,27 @@\n \u250a 1\u250a 1\u250aimport { createTestClient } from 'apollo-server-testing';\n \u250a 2\u250a 2\u250aimport { ApolloServer, PubSub, gql } from 'apollo-server-express';\n \u250a 3\u250a 3\u250aimport schema from '../../schema';\n-\u250a 4\u250a  \u250aimport { resetDb, users } from '../../db';\n+\u250a  \u250a 4\u250aimport { resetDb, pool } from '../../db';\n+\u250a  \u250a 5\u250aimport sql from 'sql-template-strings';\n+\u250a  \u250a 6\u250aimport { MyContext } from '../../context';\n \u250a 5\u250a 7\u250a\n \u250a 6\u250a 8\u250adescribe('Mutation.addMessage', () => {\n \u250a 7\u250a 9\u250a  beforeEach(resetDb);\n \u250a 8\u250a10\u250a\n \u250a 9\u250a11\u250a  it('should add message to specified chat', async () => {\n+\u250a  \u250a12\u250a    const { rows } = await pool.query(sql`SELECT * FROM users WHERE id = 1`);\n+\u250a  \u250a13\u250a    const currentUser = rows[0];\n \u250a10\u250a14\u250a    const server = new ApolloServer({\n \u250a11\u250a15\u250a      schema,\n-\u250a12\u250a  \u250a      context: () => ({\n+\u250a  \u250a16\u250a      context: async () => ({\n \u250a13\u250a17\u250a        pubsub: new PubSub(),\n-\u250a14\u250a  \u250a        currentUser: users[0],\n+\u250a  \u250a18\u250a        currentUser,\n+\u250a  \u250a19\u250a        db: await pool.connect(),\n \u250a15\u250a20\u250a      }),\n+\u250a  \u250a21\u250a      formatResponse: (res: any, { context }: { context: MyContext }) => {\n+\u250a  \u250a22\u250a        context.db.release();\n+\u250a  \u250a23\u250a        return res;\n+\u250a  \u250a24\u250a      },\n \u250a16\u250a25\u250a    });\n \u250a17\u250a26\u250a\n \u250a18\u250a27\u250a    const { query, mutate } = createTestClient(server);\n")),(0,a.kt)("h5",{id:"changed-testsmutationsremovechattestts"},"Changed tests","/","mutations","/","removeChat.test.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,18 +1,27 @@\n \u250a 1\u250a 1\u250aimport { createTestClient } from 'apollo-server-testing';\n \u250a 2\u250a 2\u250aimport { ApolloServer, PubSub, gql } from 'apollo-server-express';\n \u250a 3\u250a 3\u250aimport schema from '../../schema';\n-\u250a 4\u250a  \u250aimport { resetDb, users } from '../../db';\n+\u250a  \u250a 4\u250aimport { resetDb, pool } from '../../db';\n+\u250a  \u250a 5\u250aimport sql from 'sql-template-strings';\n+\u250a  \u250a 6\u250aimport { MyContext } from '../../context';\n \u250a 5\u250a 7\u250a\n \u250a 6\u250a 8\u250adescribe('Mutation.removeChat', () => {\n \u250a 7\u250a 9\u250a  beforeEach(resetDb);\n \u250a 8\u250a10\u250a\n \u250a 9\u250a11\u250a  it('removes chat by id', async () => {\n+\u250a  \u250a12\u250a    const { rows } = await pool.query(sql`SELECT * FROM users WHERE id = 1`);\n+\u250a  \u250a13\u250a    const currentUser = rows[0];\n \u250a10\u250a14\u250a    const server = new ApolloServer({\n \u250a11\u250a15\u250a      schema,\n-\u250a12\u250a  \u250a      context: () => ({\n+\u250a  \u250a16\u250a      context: async () => ({\n \u250a13\u250a17\u250a        pubsub: new PubSub(),\n-\u250a14\u250a  \u250a        currentUser: users[0],\n+\u250a  \u250a18\u250a        currentUser,\n+\u250a  \u250a19\u250a        db: await pool.connect(),\n \u250a15\u250a20\u250a      }),\n+\u250a  \u250a21\u250a      formatResponse: (res: any, { context }: { context: MyContext }) => {\n+\u250a  \u250a22\u250a        context.db.release();\n+\u250a  \u250a23\u250a        return res;\n+\u250a  \u250a24\u250a      },\n \u250a16\u250a25\u250a    });\n \u250a17\u250a26\u250a\n \u250a18\u250a27\u250a    const { query, mutate } = createTestClient(server);\n")),(0,a.kt)("h5",{id:"changed-testsqueriesgetchattestts"},"Changed tests","/","queries","/","getChat.test.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,15 +1,26 @@\n \u250a 1\u250a 1\u250aimport { createTestClient } from 'apollo-server-testing';\n \u250a 2\u250a 2\u250aimport { ApolloServer, gql } from 'apollo-server-express';\n \u250a 3\u250a 3\u250aimport schema from '../../schema';\n-\u250a 4\u250a  \u250aimport { users } from '../../db';\n+\u250a  \u250a 4\u250aimport { pool, resetDb } from '../../db';\n+\u250a  \u250a 5\u250aimport sql from 'sql-template-strings';\n+\u250a  \u250a 6\u250aimport { MyContext } from '../../context';\n \u250a 5\u250a 7\u250a\n \u250a 6\u250a 8\u250adescribe('Query.chat', () => {\n+\u250a  \u250a 9\u250a  beforeEach(resetDb);\n+\u250a  \u250a10\u250a\n \u250a 7\u250a11\u250a  it('should fetch specified chat', async () => {\n+\u250a  \u250a12\u250a    const { rows } = await pool.query(sql`SELECT * FROM users WHERE id = 1`);\n+\u250a  \u250a13\u250a    const currentUser = rows[0];\n \u250a 8\u250a14\u250a    const server = new ApolloServer({\n \u250a 9\u250a15\u250a      schema,\n-\u250a10\u250a  \u250a      context: () => ({\n-\u250a11\u250a  \u250a        currentUser: users[0],\n+\u250a  \u250a16\u250a      context: async () => ({\n+\u250a  \u250a17\u250a        currentUser,\n+\u250a  \u250a18\u250a        db: await pool.connect(),\n \u250a12\u250a19\u250a      }),\n+\u250a  \u250a20\u250a      formatResponse: (res: any, { context }: { context: MyContext }) => {\n+\u250a  \u250a21\u250a        context.db.release();\n+\u250a  \u250a22\u250a        return res;\n+\u250a  \u250a23\u250a      },\n \u250a13\u250a24\u250a    });\n \u250a14\u250a25\u250a\n \u250a15\u250a26\u250a    const { query } = createTestClient(server);\n")),(0,a.kt)("h5",{id:"changed-testsqueriesgetchatstestts"},"Changed tests","/","queries","/","getChats.test.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,15 +1,26 @@\n \u250a 1\u250a 1\u250aimport { createTestClient } from 'apollo-server-testing';\n \u250a 2\u250a 2\u250aimport { ApolloServer, gql } from 'apollo-server-express';\n \u250a 3\u250a 3\u250aimport schema from '../../schema';\n-\u250a 4\u250a  \u250aimport { users } from '../../db';\n+\u250a  \u250a 4\u250aimport { pool, resetDb } from '../../db';\n+\u250a  \u250a 5\u250aimport sql from 'sql-template-strings';\n+\u250a  \u250a 6\u250aimport { MyContext } from '../../context';\n \u250a 5\u250a 7\u250a\n \u250a 6\u250a 8\u250adescribe('Query.chats', () => {\n+\u250a  \u250a 9\u250a  beforeEach(resetDb);\n+\u250a  \u250a10\u250a\n \u250a 7\u250a11\u250a  it('should fetch all chats', async () => {\n+\u250a  \u250a12\u250a    const { rows } = await pool.query(sql`SELECT * FROM users WHERE id = 1`);\n+\u250a  \u250a13\u250a    const currentUser = rows[0];\n \u250a 8\u250a14\u250a    const server = new ApolloServer({\n \u250a 9\u250a15\u250a      schema,\n-\u250a10\u250a  \u250a      context: () => ({\n-\u250a11\u250a  \u250a        currentUser: users[0],\n+\u250a  \u250a16\u250a      context: async () => ({\n+\u250a  \u250a17\u250a        currentUser,\n+\u250a  \u250a18\u250a        db: await pool.connect(),\n \u250a12\u250a19\u250a      }),\n+\u250a  \u250a20\u250a      formatResponse: (res: any, { context }: { context: MyContext }) => {\n+\u250a  \u250a21\u250a        context.db.release();\n+\u250a  \u250a22\u250a        return res;\n+\u250a  \u250a23\u250a      },\n \u250a13\u250a24\u250a    });\n \u250a14\u250a25\u250a\n \u250a15\u250a26\u250a    const { query } = createTestClient(server);\n")),(0,a.kt)("h5",{id:"changed-testsqueriesgetmetestts"},"Changed tests","/","queries","/","getMe.test.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,15 +1,24 @@\n \u250a 1\u250a 1\u250aimport { createTestClient } from 'apollo-server-testing';\n \u250a 2\u250a 2\u250aimport { ApolloServer, gql } from 'apollo-server-express';\n \u250a 3\u250a 3\u250aimport schema from '../../schema';\n-\u250a 4\u250a  \u250aimport { users } from '../../db';\n+\u250a  \u250a 4\u250aimport { pool } from '../../db';\n+\u250a  \u250a 5\u250aimport sql from 'sql-template-strings';\n+\u250a  \u250a 6\u250aimport { MyContext } from '../../context';\n \u250a 5\u250a 7\u250a\n \u250a 6\u250a 8\u250adescribe('Query.me', () => {\n \u250a 7\u250a 9\u250a  it('should fetch current user', async () => {\n+\u250a  \u250a10\u250a    const { rows } = await pool.query(sql`SELECT * FROM users WHERE id = 1`);\n+\u250a  \u250a11\u250a    const currentUser = rows[0];\n \u250a 8\u250a12\u250a    const server = new ApolloServer({\n \u250a 9\u250a13\u250a      schema,\n-\u250a10\u250a  \u250a      context: () => ({\n-\u250a11\u250a  \u250a        currentUser: users[0],\n+\u250a  \u250a14\u250a      context: async () => ({\n+\u250a  \u250a15\u250a        currentUser,\n+\u250a  \u250a16\u250a        db: await pool.connect(),\n \u250a12\u250a17\u250a      }),\n+\u250a  \u250a18\u250a      formatResponse: (res: any, { context }: { context: MyContext }) => {\n+\u250a  \u250a19\u250a        context.db.release();\n+\u250a  \u250a20\u250a        return res;\n+\u250a  \u250a21\u250a      },\n \u250a13\u250a22\u250a    });\n \u250a14\u250a23\u250a\n \u250a15\u250a24\u250a    const { query } = createTestClient(server);\n")),(0,a.kt)("h5",{id:"changed-testsqueriesgetuserstestts"},"Changed tests","/","queries","/","getUsers.test.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,15 +1,27 @@\n \u250a 1\u250a 1\u250aimport { createTestClient } from 'apollo-server-testing';\n \u250a 2\u250a 2\u250aimport { ApolloServer, gql } from 'apollo-server-express';\n \u250a 3\u250a 3\u250aimport schema from '../../schema';\n-\u250a 4\u250a  \u250aimport { users } from '../../db';\n+\u250a  \u250a 4\u250aimport { pool } from '../../db';\n+\u250a  \u250a 5\u250aimport sql from 'sql-template-strings';\n+\u250a  \u250a 6\u250aimport { MyContext } from '../../context';\n \u250a 5\u250a 7\u250a\n \u250a 6\u250a 8\u250adescribe('Query.getUsers', () => {\n \u250a 7\u250a 9\u250a  it('should fetch all users except the one signed-in', async () => {\n-\u250a 8\u250a  \u250a    let currentUser = users[0];\n-\u250a 9\u250a  \u250a\n+\u250a  \u250a10\u250a    const firstUserQuery = await pool.query(\n+\u250a  \u250a11\u250a      sql`SELECT * FROM users WHERE id = 1`\n+\u250a  \u250a12\u250a    );\n+\u250a  \u250a13\u250a    let currentUser = firstUserQuery.rows[0];\n+\u250a  \u250a14\u250a    const db = await pool.connect();\n \u250a10\u250a15\u250a    const server = new ApolloServer({\n \u250a11\u250a16\u250a      schema,\n-\u250a12\u250a  \u250a      context: () => ({ currentUser }),\n+\u250a  \u250a17\u250a      context: async () => ({\n+\u250a  \u250a18\u250a        currentUser,\n+\u250a  \u250a19\u250a        db: await pool.connect(),\n+\u250a  \u250a20\u250a      }),\n+\u250a  \u250a21\u250a      formatResponse: (res: any, { context }: { context: MyContext }) => {\n+\u250a  \u250a22\u250a        context.db.release();\n+\u250a  \u250a23\u250a        return res;\n+\u250a  \u250a24\u250a      },\n \u250a13\u250a25\u250a    });\n \u250a14\u250a26\u250a\n \u250a15\u250a27\u250a    const { query } = createTestClient(server);\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -30,7 +42,10 @@\n \u250a30\u250a42\u250a    expect(res.errors).toBeUndefined();\n \u250a31\u250a43\u250a    expect(res.data).toMatchSnapshot();\n \u250a32\u250a44\u250a\n-\u250a33\u250a  \u250a    currentUser = users[1];\n+\u250a  \u250a45\u250a    const secondUserQuery = await pool.query(\n+\u250a  \u250a46\u250a      sql`SELECT * FROM users WHERE id = '2'`\n+\u250a  \u250a47\u250a    );\n+\u250a  \u250a48\u250a    currentUser = secondUserQuery.rows[0];\n \u250a34\u250a49\u250a\n \u250a35\u250a50\u250a    res = await query({\n \u250a36\u250a51\u250a      query: gql`\n")),(0,a.kt)("p",null,"We also added an ",(0,a.kt)("inlineCode",{parentName:"p"},"initDb()")," function to ",(0,a.kt)("inlineCode",{parentName:"p"},"resetDb")," in order to clear and create the tables,\nand also grant privileges to ",(0,a.kt)("inlineCode",{parentName:"p"},"testuser")," before each test is executed."),(0,a.kt)("h4",{id:"server-step-118-updating-tests-with-sql-1"},(0,a.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/ea0fa2ad6bdcbf38aa3b1aada197b53cf8b5aa3f"},(0,a.kt)("strong",{parentName:"a"},"Server")," Step 11.8: Updating Tests with SQL")),(0,a.kt)("h5",{id:"changed-dbts-3"},"Changed db.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -36,8 +36,45 @@\n \u250a36\u250a36\u250aexport const messages: Message[] = [];\n \u250a37\u250a37\u250aexport const chats: Chat[] = [];\n \u250a38\u250a38\u250a\n+\u250a  \u250a39\u250aexport async function initDb(): Promise<void> {\n+\u250a  \u250a40\u250a  // Clear tables\n+\u250a  \u250a41\u250a  await pool.query(sql`DROP TABLE IF EXISTS messages;`);\n+\u250a  \u250a42\u250a  await pool.query(sql`DROP TABLE IF EXISTS chats_users;`);\n+\u250a  \u250a43\u250a  await pool.query(sql`DROP TABLE IF EXISTS users;`);\n+\u250a  \u250a44\u250a  await pool.query(sql`DROP TABLE IF EXISTS chats;`);\n+\u250a  \u250a45\u250a\n+\u250a  \u250a46\u250a  // Create tables\n+\u250a  \u250a47\u250a  await pool.query(sql`CREATE TABLE chats(\n+\u250a  \u250a48\u250a    id SERIAL PRIMARY KEY\n+\u250a  \u250a49\u250a  );`);\n+\u250a  \u250a50\u250a  await pool.query(sql`CREATE TABLE users(\n+\u250a  \u250a51\u250a    id SERIAL PRIMARY KEY,\n+\u250a  \u250a52\u250a    username VARCHAR (50) UNIQUE NOT NULL,\n+\u250a  \u250a53\u250a    name VARCHAR (50) NOT NULL,\n+\u250a  \u250a54\u250a    password VARCHAR (255) NOT NULL,\n+\u250a  \u250a55\u250a    picture VARCHAR (255) NOT NULL\n+\u250a  \u250a56\u250a  );`);\n+\u250a  \u250a57\u250a  await pool.query(sql`CREATE TABLE chats_users(\n+\u250a  \u250a58\u250a    chat_id INTEGER NOT NULL REFERENCES chats(id) ON DELETE CASCADE,\n+\u250a  \u250a59\u250a    user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE\n+\u250a  \u250a60\u250a  );`);\n+\u250a  \u250a61\u250a\n+\u250a  \u250a62\u250a  await pool.query(sql`CREATE TABLE messages(\n+\u250a  \u250a63\u250a    id SERIAL PRIMARY KEY,\n+\u250a  \u250a64\u250a    content VARCHAR (355) NOT NULL,\n+\u250a  \u250a65\u250a    created_at TIMESTAMP NOT NULL DEFAULT NOW(),\n+\u250a  \u250a66\u250a    chat_id INTEGER NOT NULL REFERENCES chats(id) ON DELETE CASCADE,\n+\u250a  \u250a67\u250a    sender_user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE\n+\u250a  \u250a68\u250a  );`);\n+\u250a  \u250a69\u250a\n+\u250a  \u250a70\u250a  // Privileges\n+\u250a  \u250a71\u250a  await pool.query(\n+\u250a  \u250a72\u250a    sql`GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO testuser;`\n+\u250a  \u250a73\u250a  );\n+\u250a  \u250a74\u250a}\n+\u250a  \u250a75\u250a\n \u250a39\u250a76\u250aexport const resetDb = async () => {\n-\u250a40\u250a  \u250a  await pool.query(sql`DELETE FROM users`);\n+\u250a  \u250a77\u250a  await initDb();\n \u250a41\u250a78\u250a\n \u250a42\u250a79\u250a  const sampleUsers = [\n \u250a43\u250a80\u250a    {\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Because we are running tests against a database, we need to first make sure they run serially, one after the other,\nusing Jest's ",(0,a.kt)("inlineCode",{parentName:"p"},"runInBand")," option.\nAlso, because during the test we will access a resource (DB) that will keep living, we need to tell Jest to close itself\nafter the test is done, using the ",(0,a.kt)("inlineCode",{parentName:"p"},"forceExit")," option")),(0,a.kt)("h4",{id:"server-step-118-updating-tests-with-sql-2"},(0,a.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/ea0fa2ad6bdcbf38aa3b1aada197b53cf8b5aa3f"},(0,a.kt)("strong",{parentName:"a"},"Server")," Step 11.8: Updating Tests with SQL")),(0,a.kt)("h5",{id:"changed-packagejson"},"Changed package.json"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},'@@ -9,7 +9,7 @@\n \u250a 9\u250a 9\u250a  "scripts": {\n \u250a10\u250a10\u250a    "prestart": "yarn codegen",\n \u250a11\u250a11\u250a    "start": "ts-node index.ts",\n-\u250a12\u250a  \u250a    "test": "jest",\n+\u250a  \u250a12\u250a    "test": "jest --runInBand --forceExit",\n \u250a13\u250a13\u250a    "codegen": "graphql-codegen",\n \u250a14\u250a14\u250a    "format": "prettier \\"**/*.ts\\" --write"\n \u250a15\u250a15\u250a  },\n')),(0,a.kt)("h3",{id:"remove-in-memory-database"},"Remove in-memory database"),(0,a.kt)("p",null,"We can remove all the stuff related to in-memory database now."),(0,a.kt)("h4",{id:"server-step-119-removing-in-memory-database"},(0,a.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/3a461de6ee3f40dcf29b05727326efbfc5bb82e0"},(0,a.kt)("strong",{parentName:"a"},"Server")," Step 11.9: Removing in-memory database")),(0,a.kt)("h5",{id:"changed-dbts-4"},"Changed db.ts"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -32,10 +32,6 @@\n \u250a32\u250a32\u250a\n \u250a33\u250a33\u250aexport let pool: Pool = new Pool(dbConfig);\n \u250a34\u250a34\u250a\n-\u250a35\u250a  \u250aexport const users: User[] = [];\n-\u250a36\u250a  \u250aexport const messages: Message[] = [];\n-\u250a37\u250a  \u250aexport const chats: Chat[] = [];\n-\u250a38\u250a  \u250a\n \u250a39\u250a35\u250aexport async function initDb(): Promise<void> {\n \u250a40\u250a36\u250a  // Clear tables\n \u250a41\u250a37\u250a  await pool.query(sql`DROP TABLE IF EXISTS messages;`);\n")),(0,a.kt)("p",null,"TODO:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"SELECT DISTINCT ON (unique for the expression inside, and you can combine a few - as expression)\nnot with , between them")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Window functions to do accumulative sum"))),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"left"},(0,a.kt)("a",{parentName:"th",href:"https://github.com/Urigo/WhatsApp-Clone-Tutorial/tree/master@next/.tortilla/manuals/views/step13.md"},"< Previous Step")),(0,a.kt)("th",{parentName:"tr",align:"right"},(0,a.kt)("a",{parentName:"th",href:"https://github.com/Urigo/WhatsApp-Clone-Tutorial/tree/master@next/.tortilla/manuals/views/step15.md"},"Next Step >"))))))}d.isMDXComponent=!0}}]);