"use strict";(self.webpackChunkovrsea_whatsapp_tuto=self.webpackChunkovrsea_whatsapp_tuto||[]).push([[4660],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>h});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=r.createContext({}),l=function(e){var t=r.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},c=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=l(a),h=n,m=u["".concat(p,".").concat(h)]||u[h]||d[h]||o;return a?r.createElement(m,s(s({ref:t},c),{},{components:a})):r.createElement(m,s({ref:t},c))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,s=new Array(o);s[0]=u;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:n,s[1]=i;for(var l=2;l<o;l++)s[l]=a[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},5868:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var r=a(7462),n=(a(7294),a(3905));const o={sidebar_label:"Step 15: Using a REST API",sidebar_position:15},s="Step 15: Using a REST API",i={unversionedId:"tuto-whatsapp/step15",id:"version-1.0.0/tuto-whatsapp/step15",title:"Step 15: Using a REST API",description:"[//]: # (head-end)",source:"@site/versioned_docs/version-1.0.0/tuto-whatsapp/step15.md",sourceDirName:"tuto-whatsapp",slug:"/tuto-whatsapp/step15",permalink:"/docs/1.0.0/tuto-whatsapp/step15",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/versioned_docs/version-1.0.0/tuto-whatsapp/step15.md",tags:[],version:"1.0.0",sidebarPosition:15,frontMatter:{sidebar_label:"Step 15: Using a REST API",sidebar_position:15},sidebar:"tutorialSidebar",previous:{title:"Step 14: Migrating to PostgreSQL",permalink:"/docs/1.0.0/tuto-whatsapp/step14"},next:{title:"Step 16: Modularity",permalink:"/docs/1.0.0/tuto-whatsapp/step16"}},p={},l=[{value:"Retrieve a profile picture from a REST API",id:"retrieve-a-profile-picture-from-a-rest-api",level:2},{value:"<strong>Server</strong> Step 12.1: Retrieve profile picture from REST API",id:"server-step-121-retrieve-profile-picture-from-rest-api",level:4},{value:"Changed schema/resolvers.ts",id:"changed-schemaresolversts",level:5},{value:"<strong>Server</strong> Step 12.1: Retrieve profile picture from REST API",id:"server-step-121-retrieve-profile-picture-from-rest-api-1",level:4},{value:"Changed db.ts",id:"changed-dbts",level:5},{value:"Track the API",id:"track-the-api",level:2},{value:"<strong>Server</strong> Step 12.2: Use safe-api",id:"server-step-122-use-safe-api",level:4},{value:"Changed schema/resolvers.ts",id:"changed-schemaresolversts-1",level:5},{value:"<strong>Server</strong> Step 12.3: Generate typings from safe-api",id:"server-step-123-generate-typings-from-safe-api",level:4},{value:"Changed .gitignore",id:"changed-gitignore",level:5},{value:"Changed codegen.yml",id:"changed-codegenyml",level:5},{value:"Apollo DataSources",id:"apollo-datasources",level:2},{value:"<strong>Server</strong> Step 12.4: Use Apollo DataSources",id:"server-step-124-use-apollo-datasources",level:4},{value:"Added schema/unsplash.api.ts",id:"added-schemaunsplashapits",level:5},{value:"<strong>Server</strong> Step 12.4: Use Apollo DataSources",id:"server-step-124-use-apollo-datasources-1",level:4},{value:"Changed index.ts",id:"changed-indexts",level:5},{value:"<strong>Server</strong> Step 12.4: Use Apollo DataSources",id:"server-step-124-use-apollo-datasources-2",level:4},{value:"Changed context.ts",id:"changed-contextts",level:5},{value:"<strong>Server</strong> Step 12.4: Use Apollo DataSources",id:"server-step-124-use-apollo-datasources-3",level:4},{value:"Changed schema/resolvers.ts",id:"changed-schemaresolversts-2",level:5}],c={toc:l};function d(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"step-15-using-a-rest-api"},"Step 15: Using a REST API"),(0,n.kt)("p",null,"Despite using GraphQL throughout all our app, we will soon meet the need to use some external API and chances are it will be REST.\nOur first idea could be to bridge the REST API through GraphQL, reproposing the very same API to the client. This approach is wrong, because our first concern should always be to provide the client with ready to use data in the best possible shape.\nThe client don\u2019t need to know that our GraphQL API is backed by a REST API, it doesn\u2019t have to pass headers required by the underlying API or do any kind of special considerations: our backend should take care of everything."),(0,n.kt)("h2",{id:"retrieve-a-profile-picture-from-a-rest-api"},"Retrieve a profile picture from a REST API"),(0,n.kt)("p",null,"In this chapter we will discuss how to use an external API called Unsplash to retrieve random profile pictures for the users who didn\u2019t set any."),(0,n.kt)("p",null,"Start heading to ",(0,n.kt)("a",{parentName:"p",href:"https://unsplash.com/developers"},"https://unsplash.com/developers")," and clicking on \u201cRegister as a developer\u201d. After registering you will have to create a new app: take note of the Access Key because we\u2019re going to need it."),(0,n.kt)("p",null,"If you look at the Documentation (",(0,n.kt)("a",{parentName:"p",href:"https://unsplash.com/documentation#get-a-random-photo"},"https://unsplash.com/documentation#get-a-random-photo"),") you\u2019ll notice that in order to retrieve a random photo we have to query the /photos/random endpoint (GET method). We also have to pass some headers for the authent\ncation and some params for the search term and the orientation."),(0,n.kt)("p",null,"On the browser we would probably use the fetch api,\nbut since we are on node we would need a polyfill and it\u2019s better to just use a full fledged library like axios:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"yarn add axios\nyarn add -D @types/axios\n")),(0,n.kt)("p",null,"Before we start implementing, we want to create some typings for our endpoint,\nbecause ideally we would like to be aided by those typings during the development."),(0,n.kt)("p",null,"In order to do so we can use a tool like ",(0,n.kt)("a",{parentName:"p",href:"https://install.advancedrestclient.com/install"},"Advanced Rest Client")," or ",(0,n.kt)("a",{parentName:"p",href:"https://www.postman.com/"},"Postman")," to retrieve the response."),(0,n.kt)("p",null,"Set the Method to GET, the Headers to Authorization: 'Client-ID 4d048cfb4383b407eff92e4a2a5ec36c0a866be85e64caafa588c110efad350d'\nand the Request URL to ",(0,n.kt)("a",{parentName:"p",href:"https://api.unsplash.com/photos/random"},"https://api.unsplash.com/photos/random"),",\nalong with the params to query: 'portrait' and orientation: 'squarish'."),(0,n.kt)("p",null,"Copy the response, create a new file called types/unsplash.ts in your vscode editor\nand run the command \u201cPast JSON as Types\u201d (you need to install the ",(0,n.kt)("a",{parentName:"p",href:"https://marketplace.visualstudio.com/items?itemName=quicktype.quicktype"},"Past JSON as Code extension")," and press CTRL+P to open the run command prompt).\nThat would be enough to automatically create the typings for the random photo endpoint."),(0,n.kt)("p",null,"Now we can finally implement the REST API call in our picture resolver:"),(0,n.kt)("h4",{id:"server-step-121-retrieve-profile-picture-from-rest-api"},(0,n.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/d2cb459a5c45a4fb16a21c747dba9f905f953519"},(0,n.kt)("strong",{parentName:"a"},"Server")," Step 12.1: Retrieve profile picture from REST API")),(0,n.kt)("h5",{id:"changed-schemaresolversts"},"Changed schema","/","resolvers.ts"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -7,6 +7,8 @@\n \u250a 7\u250a 7\u250aimport jwt from 'jsonwebtoken';\n \u250a 8\u250a 8\u250aimport { validateLength, validatePassword } from '../validators';\n \u250a 9\u250a 9\u250aimport sql from 'sql-template-strings';\n+\u250a  \u250a10\u250aimport axios from 'axios';\n+\u250a  \u250a11\u250aimport { RandomPhoto } from '../types/unsplash';\n \u250a10\u250a12\u250a\n \u250a11\u250a13\u250aconst resolvers: Resolvers = {\n \u250a12\u250a14\u250a  Date: DateTimeResolver,\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -71,7 +73,26 @@\n \u250a71\u250a73\u250a\n \u250a72\u250a74\u250a      const participant = rows[0];\n \u250a73\u250a75\u250a\n-\u250a74\u250a  \u250a      return participant ? participant.picture : null;\n+\u250a  \u250a76\u250a      if (participant && participant.picture) return participant.picture;\n+\u250a  \u250a77\u250a\n+\u250a  \u250a78\u250a      try {\n+\u250a  \u250a79\u250a        return (await axios.get<RandomPhoto>(\n+\u250a  \u250a80\u250a          'https://api.unsplash.com/photos/random',\n+\u250a  \u250a81\u250a          {\n+\u250a  \u250a82\u250a            params: {\n+\u250a  \u250a83\u250a              query: 'portrait',\n+\u250a  \u250a84\u250a              orientation: 'squarish',\n+\u250a  \u250a85\u250a            },\n+\u250a  \u250a86\u250a            headers: {\n+\u250a  \u250a87\u250a              Authorization:\n+\u250a  \u250a88\u250a                'Client-ID 4d048cfb4383b407eff92e4a2a5ec36c0a866be85e64caafa588c110efad350d',\n+\u250a  \u250a89\u250a            },\n+\u250a  \u250a90\u250a          }\n+\u250a  \u250a91\u250a        )).data.urls.small;\n+\u250a  \u250a92\u250a      } catch (err) {\n+\u250a  \u250a93\u250a        console.error('Cannot retrieve random photo:', err);\n+\u250a  \u250a94\u250a        return null;\n+\u250a  \u250a95\u250a      }\n \u250a75\u250a96\u250a    },\n \u250a76\u250a97\u250a\n \u250a77\u250a98\u250a    async messages(chat, args, { db }) {\n")),(0,n.kt)("p",null,"In order to test it, we have to remove the picture from one of the users and re-run the server with the ",(0,n.kt)("inlineCode",{parentName:"p"},"RESET_DB=true")," environment variable:"),(0,n.kt)("h4",{id:"server-step-121-retrieve-profile-picture-from-rest-api-1"},(0,n.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/d2cb459a5c45a4fb16a21c747dba9f905f953519"},(0,n.kt)("strong",{parentName:"a"},"Server")," Step 12.1: Retrieve profile picture from REST API")),(0,n.kt)("h5",{id:"changed-dbts"},"Changed db.ts"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -121,6 +121,10 @@\n \u250a121\u250a121\u250a    sql`SELECT setval('users_id_seq', (SELECT max(id) FROM users))`\n \u250a122\u250a122\u250a  );\n \u250a123\u250a123\u250a\n+\u250a   \u250a124\u250a  await pool.query(\n+\u250a   \u250a125\u250a    sql`SELECT setval('users_id_seq', (SELECT max(id) FROM users))`\n+\u250a   \u250a126\u250a  );\n+\u250a   \u250a127\u250a\n \u250a124\u250a128\u250a  await pool.query(sql`DELETE FROM chats`);\n \u250a125\u250a129\u250a\n \u250a126\u250a130\u250a  const sampleChats = [\n")),(0,n.kt)("h2",{id:"track-the-api"},"Track the API"),(0,n.kt)("p",null,"Even if our typings are working pretty well so far, not all REST APIs are versioned and the shape we\u2019ve got from the server could potentially change.\nIn order to keep an eye on it we could use the safe-api middleware in order to check for abnormal answers coming from the server and log them. We can also generate the typings automatically based on the response we get.\nFirst let\u2019s install the safe-api middleware:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"yarn add @safe-api/middleware\n")),(0,n.kt)("p",null,"Then let\u2019s use it inside our resolver:"),(0,n.kt)("h4",{id:"server-step-122-use-safe-api"},(0,n.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/876da6aa4cf01d39aef2117e491a60614f56e98f"},(0,n.kt)("strong",{parentName:"a"},"Server")," Step 12.2: Use safe-api")),(0,n.kt)("h5",{id:"changed-schemaresolversts-1"},"Changed schema","/","resolvers.ts"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -9,6 +9,8 @@\n \u250a 9\u250a 9\u250aimport sql from 'sql-template-strings';\n \u250a10\u250a10\u250aimport axios from 'axios';\n \u250a11\u250a11\u250aimport { RandomPhoto } from '../types/unsplash';\n+\u250a  \u250a12\u250aimport { trackProvider } from '@safe-api/middleware';\n+\u250a  \u250a13\u250aimport { resolve } from 'path';\n \u250a12\u250a14\u250a\n \u250a13\u250a15\u250aconst resolvers: Resolvers = {\n \u250a14\u250a16\u250a  Date: DateTimeResolver,\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -75,20 +77,42 @@\n \u250a 75\u250a 77\u250a\n \u250a 76\u250a 78\u250a      if (participant && participant.picture) return participant.picture;\n \u250a 77\u250a 79\u250a\n+\u250a   \u250a 80\u250a      interface RandomPhotoInput {\n+\u250a   \u250a 81\u250a        query: string;\n+\u250a   \u250a 82\u250a        orientation: 'landscape' | 'portrait' | 'squarish';\n+\u250a   \u250a 83\u250a      }\n+\u250a   \u250a 84\u250a\n+\u250a   \u250a 85\u250a      const trackedRandomPhoto = await trackProvider(\n+\u250a   \u250a 86\u250a        async ({ query, orientation }: RandomPhotoInput) =>\n+\u250a   \u250a 87\u250a          (\n+\u250a   \u250a 88\u250a            await axios.get<RandomPhoto>(\n+\u250a   \u250a 89\u250a              'https://api.unsplash.com/photos/random',\n+\u250a   \u250a 90\u250a              {\n+\u250a   \u250a 91\u250a                params: {\n+\u250a   \u250a 92\u250a                  query,\n+\u250a   \u250a 93\u250a                  orientation,\n+\u250a   \u250a 94\u250a                },\n+\u250a   \u250a 95\u250a                headers: {\n+\u250a   \u250a 96\u250a                  Authorization:\n+\u250a   \u250a 97\u250a                    'Client-ID 4d048cfb4383b407eff92e4a2a5ec36c0a866be85e64caafa588c110efad350d',\n+\u250a   \u250a 98\u250a                },\n+\u250a   \u250a 99\u250a              }\n+\u250a   \u250a100\u250a            )\n+\u250a   \u250a101\u250a          ).data,\n+\u250a   \u250a102\u250a        {\n+\u250a   \u250a103\u250a          provider: 'Unsplash',\n+\u250a   \u250a104\u250a          method: 'RandomPhoto',\n+\u250a   \u250a105\u250a          location: resolve(__dirname, '../logs/main'),\n+\u250a   \u250a106\u250a        }\n+\u250a   \u250a107\u250a      );\n+\u250a   \u250a108\u250a\n \u250a 78\u250a109\u250a      try {\n-\u250a 79\u250a   \u250a        return (await axios.get<RandomPhoto>(\n-\u250a 80\u250a   \u250a          'https://api.unsplash.com/photos/random',\n-\u250a 81\u250a   \u250a          {\n-\u250a 82\u250a   \u250a            params: {\n-\u250a 83\u250a   \u250a              query: 'portrait',\n-\u250a 84\u250a   \u250a              orientation: 'squarish',\n-\u250a 85\u250a   \u250a            },\n-\u250a 86\u250a   \u250a            headers: {\n-\u250a 87\u250a   \u250a              Authorization:\n-\u250a 88\u250a   \u250a                'Client-ID 4d048cfb4383b407eff92e4a2a5ec36c0a866be85e64caafa588c110efad350d',\n-\u250a 89\u250a   \u250a            },\n-\u250a 90\u250a   \u250a          }\n-\u250a 91\u250a   \u250a        )).data.urls.small;\n+\u250a   \u250a110\u250a        return (\n+\u250a   \u250a111\u250a          await trackedRandomPhoto({\n+\u250a   \u250a112\u250a            query: 'portrait',\n+\u250a   \u250a113\u250a            orientation: 'squarish',\n+\u250a   \u250a114\u250a          })\n+\u250a   \u250a115\u250a        ).urls.small;\n \u250a 92\u250a116\u250a      } catch (err) {\n \u250a 93\u250a117\u250a        console.error('Cannot retrieve random photo:', err);\n \u250a 94\u250a118\u250a        return null;\n")),(0,n.kt)("p",null,"Now launch the client in order to retrieve the picture field multiple times."),(0,n.kt)("p",null,"If you look inside the logs directory you will notice that it generated some graphql schema to represent the REST API. You will notice that each time we call the REST endpoint it generates a new schema, because a single response isn\u2019t generic enough to account for all possible responses. Ideally safe-api should be able to average multiple esponses in order to generate the least generic schema matching the given responses."),(0,n.kt)("p",null,"Now we need to remove ",(0,n.kt)("inlineCode",{parentName:"p"},"types/unsplash.ts")," and generate some Typescript typings out of the schema. Do do so we can use the graphql-code-generator:"),(0,n.kt)("h4",{id:"server-step-123-generate-typings-from-safe-api"},(0,n.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/5ba3cc70784fde351ea5cf4214a1c453139f0320"},(0,n.kt)("strong",{parentName:"a"},"Server")," Step 12.3: Generate typings from safe-api")),(0,n.kt)("h5",{id:"changed-gitignore"},"Changed .gitignore"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,4 +1,5 @@\n \u250a1\u250a1\u250anode_modules\n \u250a2\u250a2\u250anpm-debug.log\n \u250a3\u250a3\u250atest-results/\n-\u250a4\u250a \u250atypes/graphql.d.ts\ud83d\udeab\u21b5\n+\u250a \u250a4\u250atypes/graphql.d.ts\n+\u250a \u250a5\u250atypes/unsplash.d.ts\ud83d\udeab\u21b5\n")),(0,n.kt)("h5",{id:"changed-codegenyml"},"Changed codegen.yml"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,7 +1,7 @@\n-\u250a1\u250a \u250aschema: ./schema/typeDefs.graphql\n \u250a2\u250a1\u250aoverwrite: true\n \u250a3\u250a2\u250agenerates:\n \u250a4\u250a3\u250a  ./types/graphql.d.ts:\n+\u250a \u250a4\u250a    schema: ./schema/typeDefs.graphql\n \u250a5\u250a5\u250a    plugins:\n \u250a6\u250a6\u250a      - typescript\n \u250a7\u250a7\u250a      - typescript-resolvers\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -17,3 +17,7 @@\n \u250a17\u250a17\u250a        # e.g. Message.createdAt will be of type Date\n \u250a18\u250a18\u250a        Date: Date\n \u250a19\u250a19\u250a        URL: string\n+\u250a  \u250a20\u250a  ./types/unsplash.d.ts:\n+\u250a  \u250a21\u250a    schema: ./logs/main/Unsplash.RandomPhoto.graphql\n+\u250a  \u250a22\u250a    plugins:\n+\u250a  \u250a23\u250a      - typescript\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"yarn codegen\n")),(0,n.kt)("h2",{id:"apollo-datasources"},"Apollo DataSources"),(0,n.kt)("p",null,"We\u2019re not done yet, there is still room for improvement. Instead of using axios, we could use Apollo\u2019s Data Sources and take advantage of the built-in support for caching, deduplication and error handling."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"yarn remove axios @types/axios\nyarn add apollo-datasource-rest\n")),(0,n.kt)("h4",{id:"server-step-124-use-apollo-datasources"},(0,n.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/6f89bc0aac249ab63694c41652bfe3fe74a80e74"},(0,n.kt)("strong",{parentName:"a"},"Server")," Step 12.4: Use Apollo DataSources")),(0,n.kt)("h5",{id:"added-schemaunsplashapits"},"Added schema","/","unsplash.api.ts"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,47 @@\n+\u250a  \u250a 1\u250aimport { RESTDataSource, RequestOptions } from 'apollo-datasource-rest';\n+\u250a  \u250a 2\u250aimport { resolve } from 'path';\n+\u250a  \u250a 3\u250aimport { trackProvider } from '@safe-api/middleware';\n+\u250a  \u250a 4\u250aimport { RandomPhoto } from '../types/unsplash';\n+\u250a  \u250a 5\u250a\n+\u250a  \u250a 6\u250ainterface RandomPhotoInput {\n+\u250a  \u250a 7\u250a  query: string;\n+\u250a  \u250a 8\u250a  orientation: 'landscape' | 'portrait' | 'squarish';\n+\u250a  \u250a 9\u250a}\n+\u250a  \u250a10\u250a\n+\u250a  \u250a11\u250aexport class UnsplashApi extends RESTDataSource {\n+\u250a  \u250a12\u250a  constructor() {\n+\u250a  \u250a13\u250a    super();\n+\u250a  \u250a14\u250a    this.baseURL = 'https://api.unsplash.com/';\n+\u250a  \u250a15\u250a  }\n+\u250a  \u250a16\u250a\n+\u250a  \u250a17\u250a  willSendRequest(request: RequestOptions) {\n+\u250a  \u250a18\u250a    request.headers.set(\n+\u250a  \u250a19\u250a      'Authorization',\n+\u250a  \u250a20\u250a      'Client-ID 4d048cfb4383b407eff92e4a2a5ec36c0a866be85e64caafa588c110efad350d'\n+\u250a  \u250a21\u250a    );\n+\u250a  \u250a22\u250a  }\n+\u250a  \u250a23\u250a\n+\u250a  \u250a24\u250a  async getRandomPhoto() {\n+\u250a  \u250a25\u250a    const trackedRandomPhoto = await trackProvider(\n+\u250a  \u250a26\u250a      ({ query, orientation }: RandomPhotoInput) =>\n+\u250a  \u250a27\u250a        this.get<RandomPhoto>('photos/random', { query, orientation }),\n+\u250a  \u250a28\u250a      {\n+\u250a  \u250a29\u250a        provider: 'Unsplash',\n+\u250a  \u250a30\u250a        method: 'RandomPhoto',\n+\u250a  \u250a31\u250a        location: resolve(__dirname, '../logs/main'),\n+\u250a  \u250a32\u250a      }\n+\u250a  \u250a33\u250a    );\n+\u250a  \u250a34\u250a\n+\u250a  \u250a35\u250a    try {\n+\u250a  \u250a36\u250a      return (\n+\u250a  \u250a37\u250a        await trackedRandomPhoto({\n+\u250a  \u250a38\u250a          query: 'portrait',\n+\u250a  \u250a39\u250a          orientation: 'squarish',\n+\u250a  \u250a40\u250a        })\n+\u250a  \u250a41\u250a      ).urls.small;\n+\u250a  \u250a42\u250a    } catch (err) {\n+\u250a  \u250a43\u250a      console.error('Cannot retrieve random photo:', err);\n+\u250a  \u250a44\u250a      return null;\n+\u250a  \u250a45\u250a    }\n+\u250a  \u250a46\u250a  }\n+\u250a  \u250a47\u250a}\n")),(0,n.kt)("p",null,"We created the UnsplashApi class, which extends RESTDataSource. In the constructor you need to set the baseUrl (after calling super() to run the constructor of the base class). You also need to create a willSendRequest method to set the authentication headers for each call. Then it\u2019s simply a matter of creating a getRandomPhoto method to perform the actual REST API call. Instead of calling axios you will have to call the get method of the class (which in turn gets inherited from its RESTDataSource base class): the API is very similar to the axios one."),(0,n.kt)("p",null,"In order to access the data source from the resolvers we need to tell Apollo to put them on the context for every request. We shouldn\u2019t use the context field, because that would lead to circular dependencies. Instead we need to use the dataSources field:"),(0,n.kt)("h4",{id:"server-step-124-use-apollo-datasources-1"},(0,n.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/6f89bc0aac249ab63694c41652bfe3fe74a80e74"},(0,n.kt)("strong",{parentName:"a"},"Server")," Step 12.4: Use Apollo DataSources")),(0,n.kt)("h5",{id:"changed-indexts"},"Changed index.ts"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -8,6 +8,7 @@\n \u250a 8\u250a 8\u250aimport schema from './schema';\n \u250a 9\u250a 9\u250aimport { MyContext } from './context';\n \u250a10\u250a10\u250aimport sql from 'sql-template-strings';\n+\u250a  \u250a11\u250aimport { UnsplashApi } from './schema/unsplash.api';\n \u250a11\u250a12\u250aconst { PostgresPubSub } = require('graphql-postgres-subscriptions');\n \u250a12\u250a13\u250a\n \u250a13\u250a14\u250aconst pubsub = new PostgresPubSub({\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -67,6 +68,9 @@\n \u250a67\u250a68\u250a\n \u250a68\u250a69\u250a    return res;\n \u250a69\u250a70\u250a  },\n+\u250a  \u250a71\u250a  dataSources: () => ({\n+\u250a  \u250a72\u250a    unsplashApi: new UnsplashApi(),\n+\u250a  \u250a73\u250a  }),\n \u250a70\u250a74\u250a});\n \u250a71\u250a75\u250a\n \u250a72\u250a76\u250aserver.applyMiddleware({\n")),(0,n.kt)("p",null,"Now we need to update the typings for our context and run the graphq-code-generator again:"),(0,n.kt)("h4",{id:"server-step-124-use-apollo-datasources-2"},(0,n.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/6f89bc0aac249ab63694c41652bfe3fe74a80e74"},(0,n.kt)("strong",{parentName:"a"},"Server")," Step 12.4: Use Apollo DataSources")),(0,n.kt)("h5",{id:"changed-contextts"},"Changed context.ts"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -2,10 +2,14 @@\n \u250a 2\u250a 2\u250aimport { User } from './db';\n \u250a 3\u250a 3\u250aimport { Response } from 'express';\n \u250a 4\u250a 4\u250aimport { PoolClient } from 'pg';\n+\u250a  \u250a 5\u250aimport { UnsplashApi } from './schema/unsplash.api';\n \u250a 5\u250a 6\u250a\n \u250a 6\u250a 7\u250aexport type MyContext = {\n \u250a 7\u250a 8\u250a  pubsub: PubSub;\n \u250a 8\u250a 9\u250a  currentUser: User;\n \u250a 9\u250a10\u250a  res: Response;\n \u250a10\u250a11\u250a  db: PoolClient;\n+\u250a  \u250a12\u250a  dataSources: {\n+\u250a  \u250a13\u250a    unsplashApi: UnsplashApi;\n+\u250a  \u250a14\u250a  };\n \u250a11\u250a15\u250a};\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"yarn codegen\n")),(0,n.kt)("p",null,"Now it should be pretty easy to modify our resolver in order to use our just created datasource:"),(0,n.kt)("h4",{id:"server-step-124-use-apollo-datasources-3"},(0,n.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/6f89bc0aac249ab63694c41652bfe3fe74a80e74"},(0,n.kt)("strong",{parentName:"a"},"Server")," Step 12.4: Use Apollo DataSources")),(0,n.kt)("h5",{id:"changed-schemaresolversts-2"},"Changed schema","/","resolvers.ts"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -7,10 +7,6 @@\n \u250a 7\u250a 7\u250aimport jwt from 'jsonwebtoken';\n \u250a 8\u250a 8\u250aimport { validateLength, validatePassword } from '../validators';\n \u250a 9\u250a 9\u250aimport sql from 'sql-template-strings';\n-\u250a10\u250a  \u250aimport axios from 'axios';\n-\u250a11\u250a  \u250aimport { RandomPhoto } from '../types/unsplash';\n-\u250a12\u250a  \u250aimport { trackProvider } from '@safe-api/middleware';\n-\u250a13\u250a  \u250aimport { resolve } from 'path';\n \u250a14\u250a10\u250a\n \u250a15\u250a11\u250aconst resolvers: Resolvers = {\n \u250a16\u250a12\u250a  Date: DateTimeResolver,\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -64,7 +60,7 @@\n \u250a64\u250a60\u250a      return participant ? participant.name : null;\n \u250a65\u250a61\u250a    },\n \u250a66\u250a62\u250a\n-\u250a67\u250a  \u250a    async picture(chat, args, { currentUser, db }) {\n+\u250a  \u250a63\u250a    async picture(chat, args, { currentUser, db, dataSources }) {\n \u250a68\u250a64\u250a      if (!currentUser) return null;\n \u250a69\u250a65\u250a\n \u250a70\u250a66\u250a      const { rows } = await db.query(sql`\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -75,48 +71,9 @@\n \u250a 75\u250a 71\u250a\n \u250a 76\u250a 72\u250a      const participant = rows[0];\n \u250a 77\u250a 73\u250a\n-\u250a 78\u250a   \u250a      if (participant && participant.picture) return participant.picture;\n-\u250a 79\u250a   \u250a\n-\u250a 80\u250a   \u250a      interface RandomPhotoInput {\n-\u250a 81\u250a   \u250a        query: string;\n-\u250a 82\u250a   \u250a        orientation: 'landscape' | 'portrait' | 'squarish';\n-\u250a 83\u250a   \u250a      }\n-\u250a 84\u250a   \u250a\n-\u250a 85\u250a   \u250a      const trackedRandomPhoto = await trackProvider(\n-\u250a 86\u250a   \u250a        async ({ query, orientation }: RandomPhotoInput) =>\n-\u250a 87\u250a   \u250a          (\n-\u250a 88\u250a   \u250a            await axios.get<RandomPhoto>(\n-\u250a 89\u250a   \u250a              'https://api.unsplash.com/photos/random',\n-\u250a 90\u250a   \u250a              {\n-\u250a 91\u250a   \u250a                params: {\n-\u250a 92\u250a   \u250a                  query,\n-\u250a 93\u250a   \u250a                  orientation,\n-\u250a 94\u250a   \u250a                },\n-\u250a 95\u250a   \u250a                headers: {\n-\u250a 96\u250a   \u250a                  Authorization:\n-\u250a 97\u250a   \u250a                    'Client-ID 4d048cfb4383b407eff92e4a2a5ec36c0a866be85e64caafa588c110efad350d',\n-\u250a 98\u250a   \u250a                },\n-\u250a 99\u250a   \u250a              }\n-\u250a100\u250a   \u250a            )\n-\u250a101\u250a   \u250a          ).data,\n-\u250a102\u250a   \u250a        {\n-\u250a103\u250a   \u250a          provider: 'Unsplash',\n-\u250a104\u250a   \u250a          method: 'RandomPhoto',\n-\u250a105\u250a   \u250a          location: resolve(__dirname, '../logs/main'),\n-\u250a106\u250a   \u250a        }\n-\u250a107\u250a   \u250a      );\n-\u250a108\u250a   \u250a\n-\u250a109\u250a   \u250a      try {\n-\u250a110\u250a   \u250a        return (\n-\u250a111\u250a   \u250a          await trackedRandomPhoto({\n-\u250a112\u250a   \u250a            query: 'portrait',\n-\u250a113\u250a   \u250a            orientation: 'squarish',\n-\u250a114\u250a   \u250a          })\n-\u250a115\u250a   \u250a        ).urls.small;\n-\u250a116\u250a   \u250a      } catch (err) {\n-\u250a117\u250a   \u250a        console.error('Cannot retrieve random photo:', err);\n-\u250a118\u250a   \u250a        return null;\n-\u250a119\u250a   \u250a      }\n+\u250a   \u250a 74\u250a      return participant && participant.picture\n+\u250a   \u250a 75\u250a        ? participant.picture\n+\u250a   \u250a 76\u250a        : dataSources.unsplashApi.getRandomPhoto();\n \u250a120\u250a 77\u250a    },\n \u250a121\u250a 78\u250a\n \u250a122\u250a 79\u250a    async messages(chat, args, { db }) {\n")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},(0,n.kt)("a",{parentName:"th",href:"https://github.com/Urigo/WhatsApp-Clone-Tutorial/tree/master@next/.tortilla/manuals/views/step14.md"},"< Previous Step")),(0,n.kt)("th",{parentName:"tr",align:"right"},(0,n.kt)("a",{parentName:"th",href:"https://github.com/Urigo/WhatsApp-Clone-Tutorial/tree/master@next/.tortilla/manuals/views/step16.md"},"Next Step >"))))))}d.isMDXComponent=!0}}]);