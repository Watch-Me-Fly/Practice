"use strict";(self.webpackChunkovrsea_whatsapp_tuto=self.webpackChunkovrsea_whatsapp_tuto||[]).push([[3681],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>m});var n=a(7294);function s(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){s(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,s=function(e,t){if(null==e)return{};var a,n,s={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(s[a]=e[a]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var l=n.createContext({}),h=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=h(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,s=e.mdxType,r=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=h(a),m=s,u=p["".concat(l,".").concat(m)]||p[m]||c[m]||r;return a?n.createElement(u,i(i({ref:t},d),{},{components:a})):n.createElement(u,i({ref:t},d))}));function m(e,t){var a=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=a.length,i=new Array(r);i[0]=p;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:s,i[1]=o;for(var h=2;h<r;h++)i[h]=a[h];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},8437:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>h});var n=a(7462),s=(a(7294),a(3905));const r={sidebar_label:"Step 8: Sending messages with GraphQL mutations",sidebar_position:8},i="Step 8: Sending messages with GraphQL mutations",o={unversionedId:"tuto-whatsapp/step8",id:"tuto-whatsapp/step8",title:"Step 8: Sending messages with GraphQL mutations",description:"[//]: # (head-end)",source:"@site/docs/tuto-whatsapp/step8.md",sourceDirName:"tuto-whatsapp",slug:"/tuto-whatsapp/step8",permalink:"/docs/next/tuto-whatsapp/step8",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tuto-whatsapp/step8.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_label:"Step 8: Sending messages with GraphQL mutations",sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Step 7: Caching with Apollo-Client",permalink:"/docs/next/tuto-whatsapp/step7"},next:{title:"Step 9: Type safety with GraphQL Code Generator",permalink:"/docs/next/tuto-whatsapp/step9"}},l={},h=[{value:"<strong>Server</strong> Step 5.1: Add addMessage() mutation",id:"server-step-51-add-addmessage-mutation",level:4},{value:"Changed schema/typeDefs.graphql",id:"changed-schematypedefsgraphql",level:5},{value:"<strong>Server</strong> Step 5.1: Add addMessage() mutation",id:"server-step-51-add-addmessage-mutation-1",level:4},{value:"Changed schema/resolvers.ts",id:"changed-schemaresolversts",level:5},{value:"<strong>Client</strong> Step 8.1: Send message with a GraphQL mutation",id:"client-step-81-send-message-with-a-graphql-mutation",level:4},{value:"Changed src/components/ChatRoomScreen/index.tsx",id:"changed-srccomponentschatroomscreenindextsx",level:5},{value:"<strong>Client</strong> Step 8.2: Rewrite lastMessage to chats query",id:"client-step-82-rewrite-lastmessage-to-chats-query",level:4},{value:"Added src/graphql/queries/chats.query.ts",id:"added-srcgraphqlquerieschatsqueryts",level:5},{value:"Added src/graphql/queries/index.ts",id:"added-srcgraphqlqueriesindexts",level:5},{value:"<strong>Client</strong> Step 8.2: Rewrite lastMessage to chats query",id:"client-step-82-rewrite-lastmessage-to-chats-query-1",level:4},{value:"Changed src/components/ChatRoomScreen/index.tsx",id:"changed-srccomponentschatroomscreenindextsx-1",level:5},{value:"Changed src/components/ChatsListScreen/ChatsList.tsx",id:"changed-srccomponentschatslistscreenchatslisttsx",level:5},{value:"<strong>Client</strong> Step 8.3: Update queries to use GraphQL fragments",id:"client-step-83-update-queries-to-use-graphql-fragments",level:4},{value:"Added src/graphql/fragments/chat.fragment.ts",id:"added-srcgraphqlfragmentschatfragmentts",level:5},{value:"Added src/graphql/fragments/fullChat.fragment.ts",id:"added-srcgraphqlfragmentsfullchatfragmentts",level:5},{value:"Added src/graphql/fragments/index.ts",id:"added-srcgraphqlfragmentsindexts",level:5},{value:"Added src/graphql/fragments/message.fragment.ts",id:"added-srcgraphqlfragmentsmessagefragmentts",level:5},{value:"<strong>Client</strong> Step 8.3: Update queries to use GraphQL fragments",id:"client-step-83-update-queries-to-use-graphql-fragments-1",level:4},{value:"Changed src/components/ChatRoomScreen/index.tsx",id:"changed-srccomponentschatroomscreenindextsx-2",level:5},{value:"Changed src/graphql/queries/chats.query.ts",id:"changed-srcgraphqlquerieschatsqueryts",level:5},{value:"<strong>Client</strong> Step 8.4: Rewrite fragments",id:"client-step-84-rewrite-fragments",level:4},{value:"Changed src/components/ChatRoomScreen/index.tsx",id:"changed-srccomponentschatroomscreenindextsx-3",level:5}],d={toc:h};function c(e){let{components:t,...a}=e;return(0,s.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"step-8-sending-messages-with-graphql-mutations"},"Step 8: Sending messages with GraphQL mutations"),(0,s.kt)("p",null,"The view and the functionality for updating the component's state when sending a message already exists.\nThe thing is that messages are not really being sent, we only update the memory in the client."),(0,s.kt)("p",null,"If so, how exactly can we send messages and store them in the DB? For this purpose we're gonna learn about GraphQL mutations -\na method for sending and applying mutations in our back-end."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"What are GraphQL mutations?")),(0,s.kt)("p",null,"If you have an API endpoint that alters data, like inserting data into a database or altering data that's already in a database,\nyou should make this endpoint a ",(0,s.kt)("inlineCode",{parentName:"p"},"Mutation")," rather than a ",(0,s.kt)("inlineCode",{parentName:"p"},"Query"),".\nThis is as simple as making the API endpoint part of the top-level ",(0,s.kt)("inlineCode",{parentName:"p"},"Mutation")," type instead of the top-level ",(0,s.kt)("inlineCode",{parentName:"p"},"Query")," type."),(0,s.kt)("p",null,"Mutation is a remote procedure call (RPC), meaning it is used to trigger a function on the server,\nbut unlike other protocols which have RPCs, GraphQL Mutation also includes a query, which means the client can ask for data\nonce the operation is complete."),(0,s.kt)("p",null,"It's often convenient to have a mutation that maps to a database create or update operation and have it return the same thing that the server stored.\nThat way, if you modify the data on the server, the client can learn about those modifications.\nYou can also think about a GraphQL Mutation as a ",(0,s.kt)("strong",{parentName:"p"}," GraphQL query, only with side effects"),".\nIt's equivalent to GET (query) and POST/PUT (mutation) in the context of REST API."),(0,s.kt)("p",null,"Below is a sample GraphQL mutation request:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-graphql"},"mutation AddMessage($chatId: ID!) {\n  addMessage(chatId: $chatId) {\n    id\n    contents\n    createdAt\n  }\n}\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"How to implement a GraphQL mutation?")),(0,s.kt)("p",null,"Since GraphQL is schema based, we will need to create a new type called ",(0,s.kt)("inlineCode",{parentName:"p"},"Mutation")," in the ",(0,s.kt)("inlineCode",{parentName:"p"},"typeDefs.graphql")," file.\nIn this chapter we want to have the ability to send messages, thus we will have a field named ",(0,s.kt)("inlineCode",{parentName:"p"},"addMessage")," in the new mutation type:"),(0,s.kt)("h4",{id:"server-step-51-add-addmessage-mutation"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/edfc8a87c138e977beea6105c5042da6e58f240f"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 5.1: Add addMessage() mutation")),(0,s.kt)("h5",{id:"changed-schematypedefsgraphql"},"Changed schema","/","typeDefs.graphql"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -19,3 +19,7 @@\n \u250a19\u250a19\u250a  chats: [Chat!]!\n \u250a20\u250a20\u250a  chat(chatId: ID!): Chat\n \u250a21\u250a21\u250a}\n+\u250a  \u250a22\u250a\n+\u250a  \u250a23\u250atype Mutation {\n+\u250a  \u250a24\u250a  addMessage(chatId: ID!, content: String!): Message\n+\u250a  \u250a25\u250a}\n")),(0,s.kt)("p",null,"Note that our mutation resolver ",(0,s.kt)("inlineCode",{parentName:"p"},"addMessage")," receives a ",(0,s.kt)("inlineCode",{parentName:"p"},"chatId")," and it is a non-optional parameter.\nThis is because when adding a message, we should update both the messages collection, and the correlated chat document."),(0,s.kt)("p",null,"Mutations are resolved exactly like any other type in our resolvers manifest. The new resolver should look like this:"),(0,s.kt)("h4",{id:"server-step-51-add-addmessage-mutation-1"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Server/commit/edfc8a87c138e977beea6105c5042da6e58f240f"},(0,s.kt)("strong",{parentName:"a"},"Server")," Step 5.1: Add addMessage() mutation")),(0,s.kt)("h5",{id:"changed-schemaresolversts"},"Changed schema","/","resolvers.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -26,6 +26,32 @@\n \u250a26\u250a26\u250a      return chats.find(c => c.id === chatId);\n \u250a27\u250a27\u250a    },\n \u250a28\u250a28\u250a  },\n+\u250a  \u250a29\u250a\n+\u250a  \u250a30\u250a  Mutation: {\n+\u250a  \u250a31\u250a    addMessage(root: any, { chatId, content }: any) {\n+\u250a  \u250a32\u250a      const chatIndex = chats.findIndex(c => c.id === chatId);\n+\u250a  \u250a33\u250a\n+\u250a  \u250a34\u250a      if (chatIndex === -1) return null;\n+\u250a  \u250a35\u250a\n+\u250a  \u250a36\u250a      const chat = chats[chatIndex];\n+\u250a  \u250a37\u250a\n+\u250a  \u250a38\u250a      const messagesIds = messages.map(currentMessage => Number(currentMessage.id));\n+\u250a  \u250a39\u250a      const messageId = String(Math.max(...messagesIds) + 1);\n+\u250a  \u250a40\u250a      const message = {\n+\u250a  \u250a41\u250a        id: messageId,\n+\u250a  \u250a42\u250a        createdAt: new Date(),\n+\u250a  \u250a43\u250a        content,\n+\u250a  \u250a44\u250a      };\n+\u250a  \u250a45\u250a\n+\u250a  \u250a46\u250a      messages.push(message);\n+\u250a  \u250a47\u250a      chat.messages.push(messageId);\n+\u250a  \u250a48\u250a      // The chat will appear at the top of the ChatsList component\n+\u250a  \u250a49\u250a      chats.splice(chatIndex, 1);\n+\u250a  \u250a50\u250a      chats.unshift(chat);\n+\u250a  \u250a51\u250a\n+\u250a  \u250a52\u250a      return message;\n+\u250a  \u250a53\u250a    },\n+\u250a  \u250a54\u250a  },\n \u250a29\u250a55\u250a};\n \u250a30\u250a56\u250a\n \u250a31\u250a57\u250aexport default resolvers;\n")),(0,s.kt)("p",null,"When we add a message, we first find the right chat,\nthen we generate a new message ID that is bigger then all the previous messages (when we'll move to a real database it will do that for us)\nand push the message into the right chat."),(0,s.kt)("p",null,"Now we have the infrastructure set for sending a new message and we can start using it in our client."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"How to use a GraphQL mutation?")),(0,s.kt)("p",null,"Like in the previous chapters, we're gonna use a React hook so we can run a mutation more efficiently in a React.Component.\nFor this we're gonna use the ",(0,s.kt)("a",{parentName:"p",href:"https://www.apollographql.com/docs/react/essentials/mutations/#the-usemutation-hook"},(0,s.kt)("inlineCode",{parentName:"a"},"useMutation()"))," react hook.\nThe first argument of the hook is the mutation string, and the second one is the ",(0,s.kt)("a",{parentName:"p",href:"https://www.apollographql.com/docs/react/api/apollo-client.html#ApolloClient.mutate"},"mutation options"),".\nWe're gonna provide our mutation call with a single option called ",(0,s.kt)("inlineCode",{parentName:"p"},"optimisticResponse"),"."),(0,s.kt)("p",null,"Optimistic response is a common pattern that will update the state of the component twice so we can have a better UX: First it updates the component's state with the predicted result,\nand then it will update the state with the actual result."),(0,s.kt)("p",null,(0,s.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/7648874/54883302-859df900-4e9f-11e9-9eb7-a98108cd2482.png",alt:"optimistic_response"})),(0,s.kt)("p",null,"This is how the component should look like:"),(0,s.kt)("h4",{id:"client-step-81-send-message-with-a-graphql-mutation"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/205ea79503fc94e98e52234197c6ed5fb284a714"},(0,s.kt)("strong",{parentName:"a"},"Client")," Step 8.1: Send message with a GraphQL mutation")),(0,s.kt)("h5",{id:"changed-srccomponentschatroomscreenindextsx"},"Changed src","/","components","/","ChatRoomScreen","/","index.tsx"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,7 +1,7 @@\n \u250a1\u250a1\u250aimport gql from 'graphql-tag';\n \u250a2\u250a2\u250aimport React from 'react';\n \u250a3\u250a3\u250aimport { useCallback } from 'react';\n-\u250a4\u250a \u250aimport { useApolloClient, useQuery } from '@apollo/react-hooks';\n+\u250a \u250a4\u250aimport { useQuery, useMutation } from '@apollo/react-hooks';\n \u250a5\u250a5\u250aimport styled from 'styled-components';\n \u250a6\u250a6\u250aimport ChatNavbar from './ChatNavbar';\n \u250a7\u250a7\u250aimport MessageInput from './MessageInput';\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -30,6 +30,16 @@\n \u250a30\u250a30\u250a  }\n \u250a31\u250a31\u250a`;\n \u250a32\u250a32\u250a\n+\u250a  \u250a33\u250aconst addMessageMutation = gql`\n+\u250a  \u250a34\u250a  mutation AddMessage($chatId: ID!, $content: String!) {\n+\u250a  \u250a35\u250a    addMessage(chatId: $chatId, content: $content) {\n+\u250a  \u250a36\u250a      id\n+\u250a  \u250a37\u250a      content\n+\u250a  \u250a38\u250a      createdAt\n+\u250a  \u250a39\u250a    }\n+\u250a  \u250a40\u250a  }\n+\u250a  \u250a41\u250a`;\n+\u250a  \u250a42\u250a\n \u250a33\u250a43\u250ainterface ChatRoomScreenParams {\n \u250a34\u250a44\u250a  chatId: string;\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -54,35 +64,42 @@\n \u250a 55\u250a 65\u250a  chatId,\n \u250a 56\u250a 66\u250a}) => {\n-\u250a 57\u250a   \u250a  const client = useApolloClient();\n \u250a 58\u250a 67\u250a  const { data } = useQuery<any>(getChatQuery, {\n \u250a 59\u250a 68\u250a    variables: { chatId },\n \u250a 60\u250a 69\u250a  });\n \u250a 61\u250a 70\u250a  const chat = data?.chat;\n+\u250a   \u250a 71\u250a  const [addMessage] = useMutation(addMessageMutation);\n \u250a 62\u250a 72\u250a\n \u250a 63\u250a 73\u250a  const onSendMessage = useCallback(\n \u250a 64\u250a 74\u250a    (content: string) => {\n-\u250a 65\u250a   \u250a      if (!chat) return null;\n-\u250a 66\u250a   \u250a\n-\u250a 67\u250a   \u250a      const message = {\n-\u250a 68\u250a   \u250a        id: (chat.messages.length + 10).toString(),\n-\u250a 69\u250a   \u250a        createdAt: new Date(),\n-\u250a 70\u250a   \u250a        content,\n-\u250a 71\u250a   \u250a        __typename: 'Chat',\n-\u250a 72\u250a   \u250a      };\n-\u250a 73\u250a   \u250a\n-\u250a 74\u250a   \u250a      client.writeQuery({\n-\u250a 75\u250a   \u250a        query: getChatQuery,\n-\u250a 76\u250a   \u250a        variables: { chatId },\n-\u250a 77\u250a   \u250a        data: {\n-\u250a 78\u250a   \u250a          chat: {\n-\u250a 79\u250a   \u250a            ...chat,\n-\u250a 80\u250a   \u250a            messages: chat.messages.concat(message),\n+\u250a   \u250a 75\u250a      addMessage({\n+\u250a   \u250a 76\u250a        variables: { chatId, content },\n+\u250a   \u250a 77\u250a        optimisticResponse: {\n+\u250a   \u250a 78\u250a          __typename: 'Mutation',\n+\u250a   \u250a 79\u250a          addMessage: {\n+\u250a   \u250a 80\u250a            __typename: 'Message',\n+\u250a   \u250a 81\u250a            id: Math.random().toString(36).substr(2, 9),\n+\u250a   \u250a 82\u250a            createdAt: new Date(),\n+\u250a   \u250a 83\u250a            content,\n \u250a 81\u250a 84\u250a          },\n \u250a 82\u250a 85\u250a        },\n+\u250a   \u250a 86\u250a        update: (client, { data }) => {\n+\u250a   \u250a 87\u250a          if (data && data.addMessage) {\n+\u250a   \u250a 88\u250a            client.writeQuery({\n+\u250a   \u250a 89\u250a              query: getChatQuery,\n+\u250a   \u250a 90\u250a              variables: { chatId },\n+\u250a   \u250a 91\u250a              data: {\n+\u250a   \u250a 92\u250a                chat: {\n+\u250a   \u250a 93\u250a                  ...chat,\n+\u250a   \u250a 94\u250a                  messages: chat.messages.concat(data.addMessage),\n+\u250a   \u250a 95\u250a                },\n+\u250a   \u250a 96\u250a              },\n+\u250a   \u250a 97\u250a            });\n+\u250a   \u250a 98\u250a          }\n+\u250a   \u250a 99\u250a        },\n \u250a 83\u250a100\u250a      });\n \u250a 84\u250a101\u250a    },\n-\u250a 85\u250a   \u250a    [chat, chatId, client]\n+\u250a   \u250a102\u250a    [chat, chatId, addMessage]\n \u250a 86\u250a103\u250a  );\n \u250a 87\u250a104\u250a\n \u250a 88\u250a105\u250a  if (!chat) return null;\n")),(0,s.kt)("p",null,"Note that unlike ",(0,s.kt)("inlineCode",{parentName:"p"},"useQuery()"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"useMutation()")," returns a callback that will run the mutation only once called, NOT immediately.\nSeemingly, everything works fine, but if you'll try to navigate from ",(0,s.kt)("inlineCode",{parentName:"p"},"ChatsListScreen")," to ",(0,s.kt)("inlineCode",{parentName:"p"},"ChatRoomScreen"),", send a message, and then go back, you'll see that the last message was not updated.\nSo why is that exactly?"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Cache updating")),(0,s.kt)("p",null,"As explained in the previous chapter, Apollo-Client will cache all the results in a data-store.\nLater on, rather than re-fetching the data, it will look up for the result in the store and will serve it to you in case it exists.\nThat means, that even though we ran the mutation and updated the data on the server, our data-store is still left behind and it needs to be updated as well,\notherwise Apollo-Client will see nothing wrong with the outcome."),(0,s.kt)("p",null,"Apollo-Client stores the data in a hash, where the key represents the query and the value represents the retrieved result.\nThis means that the cache will need to be updated for:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"chats")," query - which we already did, without really diving into the reason behind it."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"chat(chatId: $chatId)")," where ",(0,s.kt)("inlineCode",{parentName:"li"},"chatId")," is the chat that was just mutated.")),(0,s.kt)("p",null,"Indeed, a query will be duplicated for each and every distinct set of parameters.\nSo potentially our data-store can grow infinite amount of times, and we will need to take care of it and manage it correctly, so things won't get out of hand."),(0,s.kt)("p",null,"To update a query, we will first export the ",(0,s.kt)("inlineCode",{parentName:"p"},"getChats")," query to a separate file so it can be imported in the ",(0,s.kt)("inlineCode",{parentName:"p"},"ChatRoomScreen"),".\nWe will define all our GraphQL assets under the ",(0,s.kt)("inlineCode",{parentName:"p"},"src/graphql")," directory:"),(0,s.kt)("h4",{id:"client-step-82-rewrite-lastmessage-to-chats-query"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/bd5da0454bf47d24a305b66426b5f35c5c1a4beb"},(0,s.kt)("strong",{parentName:"a"},"Client")," Step 8.2: Rewrite lastMessage to chats query")),(0,s.kt)("h5",{id:"added-srcgraphqlquerieschatsqueryts"},"Added src","/","graphql","/","queries","/","chats.query.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,16 @@\n+\u250a  \u250a 1\u250aimport gql from 'graphql-tag';\n+\u250a  \u250a 2\u250a\n+\u250a  \u250a 3\u250aexport default gql`\n+\u250a  \u250a 4\u250a  query Chats {\n+\u250a  \u250a 5\u250a    chats {\n+\u250a  \u250a 6\u250a      id\n+\u250a  \u250a 7\u250a      name\n+\u250a  \u250a 8\u250a      picture\n+\u250a  \u250a 9\u250a      lastMessage {\n+\u250a  \u250a10\u250a        id\n+\u250a  \u250a11\u250a        content\n+\u250a  \u250a12\u250a        createdAt\n+\u250a  \u250a13\u250a      }\n+\u250a  \u250a14\u250a    }\n+\u250a  \u250a15\u250a  }\n+\u250a  \u250a16\u250a`;\n")),(0,s.kt)("h5",{id:"added-srcgraphqlqueriesindexts"},"Added src","/","graphql","/","queries","/","index.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1 @@\n+\u250a \u250a1\u250aexport { default as chats } from './chats.query';\n")),(0,s.kt)("p",null,"And then we will read the memoized result from the store using ",(0,s.kt)("a",{parentName:"p",href:"https://www.apollographql.com/docs/react/features/caching.html#readquery"},(0,s.kt)("inlineCode",{parentName:"a"},"client.readQuery")),",\nupdate it, and then rewrite it using ",(0,s.kt)("a",{parentName:"p",href:"https://www.apollographql.com/docs/react/features/caching.html#writequery-and-writefragment"},(0,s.kt)("inlineCode",{parentName:"a"},"client.writeQuery")),".\nWe can gain access to the client object via the ",(0,s.kt)("inlineCode",{parentName:"p"},"update")," callback which will be triggered right after the mutation has been successfully executed.\nThis is how it should look like:"),(0,s.kt)("h4",{id:"client-step-82-rewrite-lastmessage-to-chats-query-1"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/bd5da0454bf47d24a305b66426b5f35c5c1a4beb"},(0,s.kt)("strong",{parentName:"a"},"Client")," Step 8.2: Rewrite lastMessage to chats query")),(0,s.kt)("h5",{id:"changed-srccomponentschatroomscreenindextsx-1"},"Changed src","/","components","/","ChatRoomScreen","/","index.tsx"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -7,6 +7,7 @@\n \u250a 7\u250a 7\u250aimport MessageInput from './MessageInput';\n \u250a 8\u250a 8\u250aimport MessagesList from './MessagesList';\n \u250a 9\u250a 9\u250aimport { useParams } from 'react-router-dom';\n+\u250a  \u250a10\u250aimport * as queries from '../../graphql/queries';\n \u250a10\u250a11\u250a\n \u250a11\u250a12\u250aconst Container = styled.div`\n \u250a12\u250a13\u250a  background: url(/assets/chat-background.jpg);\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -60,6 +61,10 @@\n \u250a60\u250a61\u250a\n \u250a61\u250a62\u250atype OptionalChatQueryResult = ChatQueryResult | null;\n \u250a62\u250a63\u250a\n+\u250a  \u250a64\u250ainterface ChatsResult {\n+\u250a  \u250a65\u250a  chats: any[];\n+\u250a  \u250a66\u250a}\n+\u250a  \u250a67\u250a\n \u250a63\u250a68\u250aconst ChatRoomScreen: React.FC = () => {\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -96,6 +101,37 @@\n \u250a 96\u250a101\u250a              },\n \u250a 97\u250a102\u250a            });\n \u250a 98\u250a103\u250a          }\n+\u250a   \u250a104\u250a\n+\u250a   \u250a105\u250a          let clientChatsData;\n+\u250a   \u250a106\u250a          try {\n+\u250a   \u250a107\u250a            clientChatsData = client.readQuery<ChatsResult>({\n+\u250a   \u250a108\u250a              query: queries.chats,\n+\u250a   \u250a109\u250a            });\n+\u250a   \u250a110\u250a          } catch (e) {\n+\u250a   \u250a111\u250a            return;\n+\u250a   \u250a112\u250a          }\n+\u250a   \u250a113\u250a\n+\u250a   \u250a114\u250a          if (!clientChatsData || clientChatsData === null) {\n+\u250a   \u250a115\u250a            return null;\n+\u250a   \u250a116\u250a          }\n+\u250a   \u250a117\u250a          if (!clientChatsData.chats || clientChatsData.chats === undefined) {\n+\u250a   \u250a118\u250a            return null;\n+\u250a   \u250a119\u250a          }\n+\u250a   \u250a120\u250a          const chats = clientChatsData.chats;\n+\u250a   \u250a121\u250a\n+\u250a   \u250a122\u250a          const chatIndex = chats.findIndex((currentChat: any) => currentChat.id === chatId);\n+\u250a   \u250a123\u250a          if (chatIndex === -1) return;\n+\u250a   \u250a124\u250a          const chatWhereAdded = chats[chatIndex];\n+\u250a   \u250a125\u250a\n+\u250a   \u250a126\u250a          chatWhereAdded.lastMessage = data.addMessage;\n+\u250a   \u250a127\u250a          // The chat will appear at the top of the ChatsList component\n+\u250a   \u250a128\u250a          chats.splice(chatIndex, 1);\n+\u250a   \u250a129\u250a          chats.unshift(chatWhereAdded);\n+\u250a   \u250a130\u250a\n+\u250a   \u250a131\u250a          client.writeQuery({\n+\u250a   \u250a132\u250a            query: queries.chats,\n+\u250a   \u250a133\u250a            data: { chats: chats },\n+\u250a   \u250a134\u250a          });\n \u250a 99\u250a135\u250a        },\n \u250a100\u250a136\u250a      });\n \u250a101\u250a137\u250a    },\n")),(0,s.kt)("h5",{id:"changed-srccomponentschatslistscreenchatslisttsx"},"Changed src","/","components","/","ChatsListScreen","/","ChatsList.tsx"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -4,8 +4,8 @@\n \u250a 4\u250a 4\u250aimport styled from 'styled-components';\n \u250a 5\u250a 5\u250aimport { useCallback } from 'react';\n \u250a 6\u250a 6\u250aimport { useNavigate } from 'react-route-dom';\n-\u250a 7\u250a  \u250aimport gql from 'graphql-tag';\n \u250a 8\u250a 7\u250aimport { useQuery } from '@apollo/react-hooks';\n+\u250a  \u250a 8\u250aimport * as queries from '../../graphql/queries';\n \u250a 9\u250a 9\u250a\n \u250a10\u250a10\u250aconst Container = styled.div`\n \u250a11\u250a11\u250a  height: calc(100% - 56px);\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -59,27 +59,12 @@\n \u250a59\u250a59\u250a  font-size: 13px;\n \u250a60\u250a60\u250a`;\n \u250a61\u250a61\u250a\n-\u250a62\u250a  \u250aexport const getChatsQuery = gql`\n-\u250a63\u250a  \u250a  query GetChats {\n-\u250a64\u250a  \u250a    chats {\n-\u250a65\u250a  \u250a      id\n-\u250a66\u250a  \u250a      name\n-\u250a67\u250a  \u250a      picture\n-\u250a68\u250a  \u250a      lastMessage {\n-\u250a69\u250a  \u250a        id\n-\u250a70\u250a  \u250a        content\n-\u250a71\u250a  \u250a        createdAt\n-\u250a72\u250a  \u250a      }\n-\u250a73\u250a  \u250a    }\n-\u250a74\u250a  \u250a  }\n-\u250a75\u250a  \u250a`;\n-\u250a76\u250a  \u250a\n \u250a77\u250a62\u250a\n \u250a78\u250a63\u250a\n \u250a79\u250a64\u250a\n \u250a80\u250a65\u250a\n \u250a81\u250a66\u250aconst ChatsList: React.FC = () => {\n-\u250a82\u250a  \u250a  const { data } = useQuery<any>(getChatsQuery);\n+\u250a  \u250a67\u250a  const { data } = useQuery<any>(queries.chats);\n \u250a83\u250a68\u250a  const navigate = useNavigate();\n \u250a84\u250a69\u250a  const navToChat = useCallback(\n \u250a85\u250a70\u250a    (chat) => {\n")),(0,s.kt)("p",null,"Right now what happens is that we update a single chat document twice: Once for the ",(0,s.kt)("inlineCode",{parentName:"p"},"chats")," query and another time for the ",(0,s.kt)("inlineCode",{parentName:"p"},"chat($chatId)")," query.\nThis work is redundant and become more complex as we add more ",(0,s.kt)("inlineCode",{parentName:"p"},"chat")," related queries.\nTo solve it, we can define and use a ",(0,s.kt)("a",{parentName:"p",href:"https://www.apollographql.com/docs/react/advanced/fragments.html"},"GraphQL fragment"),"."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Using Fragments")),(0,s.kt)("p",null,"A GraphQL fragment is a shared piece of query logic."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-graphql"},'fragment NameParts on Person {\n  firstName\n  lastName\n}\n\nquery GetPerson {\n  people(id: "7") {\n    ...NameParts\n    avatar(size: LARGE)\n  }\n}\n')),(0,s.kt)("p",null,"It's important to note that the component after the ",(0,s.kt)("inlineCode",{parentName:"p"},"on")," clause is designated for the type we are selecting from. In this case, ",(0,s.kt)("inlineCode",{parentName:"p"},"people")," is of type ",(0,s.kt)("inlineCode",{parentName:"p"},"Person")," and we want to select the ",(0,s.kt)("inlineCode",{parentName:"p"},"firstName")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"lastName")," fields from ",(0,s.kt)("inlineCode",{parentName:"p"},'people(id: "7")'),"."),(0,s.kt)("p",null,"Apollo maps the fragment ID to its retrieved data in the store. By default, Apollo will compose the fragment ID out of the entity type and the ID of the document. For example, for a ",(0,s.kt)("inlineCode",{parentName:"p"},"Chat")," document with an ID of ",(0,s.kt)("inlineCode",{parentName:"p"},"7"),", the fragment ID would be ",(0,s.kt)("inlineCode",{parentName:"p"},"Chat:7"),". This behavior can be modified, but there's no need to."),(0,s.kt)("p",null,"We will define the following fragments in our app:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"Message")," - represents a message"),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"Chat")," - represents a chat, ",(0,s.kt)("strong",{parentName:"li"},"without its messages list"),"."),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"FullChat")," - represents a chat, ",(0,s.kt)("strong",{parentName:"li"},"including its messages list"),".")),(0,s.kt)("p",null,"Once we define the fragments we can start embedding them in our queries. We will create a new directory path ",(0,s.kt)("inlineCode",{parentName:"p"},"src/graphql/fragments"),", and inside we will create a dedicated fragment file for each fragment type: ",(0,s.kt)("inlineCode",{parentName:"p"},"message.fragment.ts"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"chat.fragment.ts")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"fullChat.fragment.ts"),":"),(0,s.kt)("h4",{id:"client-step-83-update-queries-to-use-graphql-fragments"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/07af086f7e50ab6e79ad1936109b96ef2638e8d7"},(0,s.kt)("strong",{parentName:"a"},"Client")," Step 8.3: Update queries to use GraphQL fragments")),(0,s.kt)("h5",{id:"added-srcgraphqlfragmentschatfragmentts"},"Added src","/","graphql","/","fragments","/","chat.fragment.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,14 @@\n+\u250a  \u250a 1\u250aimport gql from 'graphql-tag';\n+\u250a  \u250a 2\u250aimport message from './message.fragment';\n+\u250a  \u250a 3\u250a\n+\u250a  \u250a 4\u250aexport default gql`\n+\u250a  \u250a 5\u250a  fragment Chat on Chat {\n+\u250a  \u250a 6\u250a    id\n+\u250a  \u250a 7\u250a    name\n+\u250a  \u250a 8\u250a    picture\n+\u250a  \u250a 9\u250a    lastMessage {\n+\u250a  \u250a10\u250a      ...Message\n+\u250a  \u250a11\u250a    }\n+\u250a  \u250a12\u250a  }\n+\u250a  \u250a13\u250a  ${message}\n+\u250a  \u250a14\u250a`;\n")),(0,s.kt)("h5",{id:"added-srcgraphqlfragmentsfullchatfragmentts"},"Added src","/","graphql","/","fragments","/","fullChat.fragment.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,14 @@\n+\u250a  \u250a 1\u250aimport gql from 'graphql-tag';\n+\u250a  \u250a 2\u250aimport chat from './chat.fragment';\n+\u250a  \u250a 3\u250aimport message from './message.fragment';\n+\u250a  \u250a 4\u250a\n+\u250a  \u250a 5\u250aexport default gql`\n+\u250a  \u250a 6\u250a  fragment FullChat on Chat {\n+\u250a  \u250a 7\u250a    ...Chat\n+\u250a  \u250a 8\u250a    messages {\n+\u250a  \u250a 9\u250a      ...Message\n+\u250a  \u250a10\u250a    }\n+\u250a  \u250a11\u250a  }\n+\u250a  \u250a12\u250a  ${chat}\n+\u250a  \u250a13\u250a  ${message}\n+\u250a  \u250a14\u250a`;\n")),(0,s.kt)("h5",{id:"added-srcgraphqlfragmentsindexts"},"Added src","/","graphql","/","fragments","/","index.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,3 @@\n+\u250a \u250a1\u250aexport { default as chat } from './chat.fragment';\n+\u250a \u250a2\u250aexport { default as fullChat } from './fullChat.fragment';\n+\u250a \u250a3\u250aexport { default as message } from './message.fragment';\n")),(0,s.kt)("h5",{id:"added-srcgraphqlfragmentsmessagefragmentts"},"Added src","/","graphql","/","fragments","/","message.fragment.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -0,0 +1,9 @@\n+\u250a \u250a1\u250aimport gql from 'graphql-tag';\n+\u250a \u250a2\u250a\n+\u250a \u250a3\u250aexport default gql`\n+\u250a \u250a4\u250a  fragment Message on Message {\n+\u250a \u250a5\u250a    id\n+\u250a \u250a6\u250a    createdAt\n+\u250a \u250a7\u250a    content\n+\u250a \u250a8\u250a  }\n+\u250a \u250a9\u250a`;\n")),(0,s.kt)("p",null,"And now that we have the fragments available to us, let's embed them in the relevant queries:"),(0,s.kt)("h4",{id:"client-step-83-update-queries-to-use-graphql-fragments-1"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/07af086f7e50ab6e79ad1936109b96ef2638e8d7"},(0,s.kt)("strong",{parentName:"a"},"Client")," Step 8.3: Update queries to use GraphQL fragments")),(0,s.kt)("h5",{id:"changed-srccomponentschatroomscreenindextsx-2"},"Changed src","/","components","/","ChatRoomScreen","/","index.tsx"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -8,6 +8,7 @@\n \u250a 8\u250a 8\u250aimport MessagesList from './MessagesList';\n \u250a 9\u250a 9\u250aimport { History } from 'history';\n \u250a10\u250a10\u250aimport * as queries from '../../graphql/queries';\n+\u250a  \u250a11\u250aimport * as fragments from '../../graphql/fragments';\n \u250a11\u250a12\u250a\n \u250a12\u250a13\u250aconst Container = styled.div`\n \u250a13\u250a14\u250a  background: url(/assets/chat-background.jpg);\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -19,26 +20,19 @@\n \u250a19\u250a20\u250aconst getChatQuery = gql`\n \u250a20\u250a21\u250a  query GetChat($chatId: ID!) {\n \u250a21\u250a22\u250a    chat(chatId: $chatId) {\n-\u250a22\u250a  \u250a      id\n-\u250a23\u250a  \u250a      name\n-\u250a24\u250a  \u250a      picture\n-\u250a25\u250a  \u250a      messages {\n-\u250a26\u250a  \u250a        id\n-\u250a27\u250a  \u250a        content\n-\u250a28\u250a  \u250a        createdAt\n-\u250a29\u250a  \u250a      }\n+\u250a  \u250a23\u250a      ...FullChat\n \u250a30\u250a24\u250a    }\n \u250a31\u250a25\u250a  }\n+\u250a  \u250a26\u250a  ${fragments.fullChat}\n \u250a32\u250a27\u250a`;\n \u250a33\u250a28\u250a\n \u250a34\u250a29\u250aconst addMessageMutation = gql`\n \u250a35\u250a30\u250a  mutation AddMessage($chatId: ID!, $content: String!) {\n \u250a36\u250a31\u250a    addMessage(chatId: $chatId, content: $content) {\n-\u250a37\u250a  \u250a      id\n-\u250a38\u250a  \u250a      content\n-\u250a39\u250a  \u250a      createdAt\n+\u250a  \u250a32\u250a      ...Message\n \u250a40\u250a33\u250a    }\n \u250a41\u250a34\u250a  }\n+\u250a  \u250a35\u250a  ${fragments.message}\n \u250a42\u250a36\u250a`;\n \u250a43\u250a37\u250a\n \u250a44\u250a38\u250ainterface ChatRoomScreenParams {\n")),(0,s.kt)("h5",{id:"changed-srcgraphqlquerieschatsqueryts"},"Changed src","/","graphql","/","queries","/","chats.query.ts"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,16 +1,11 @@\n \u250a 1\u250a 1\u250aimport gql from 'graphql-tag';\n+\u250a  \u250a 2\u250aimport * as fragments from '../fragments';\n \u250a 2\u250a 3\u250a\n \u250a 3\u250a 4\u250aexport default gql`\n \u250a 4\u250a 5\u250a  query Chats {\n \u250a 5\u250a 6\u250a    chats {\n-\u250a 6\u250a  \u250a      id\n-\u250a 7\u250a  \u250a      name\n-\u250a 8\u250a  \u250a      picture\n-\u250a 9\u250a  \u250a      lastMessage {\n-\u250a10\u250a  \u250a        id\n-\u250a11\u250a  \u250a        content\n-\u250a12\u250a  \u250a        createdAt\n-\u250a13\u250a  \u250a      }\n+\u250a  \u250a 7\u250a      ...Chat\n \u250a14\u250a 8\u250a    }\n \u250a15\u250a 9\u250a  }\n+\u250a  \u250a10\u250a  ${fragments.chat}\n \u250a16\u250a11\u250a`;\n")),(0,s.kt)("p",null,"Similarly to query rewriting, we will use the ",(0,s.kt)("a",{parentName:"p",href:"https://www.apollographql.com/docs/react/features/caching.html#readfragment"},(0,s.kt)("inlineCode",{parentName:"a"},"readFragment()"))," and ",(0,s.kt)("a",{parentName:"p",href:"https://www.apollographql.com/docs/react/features/caching.html#writefragment"},(0,s.kt)("inlineCode",{parentName:"a"},"writeFragment()"))," methods in the same way to rewrite the fragments. When working with a fragment we need to compose its ID, just like explained earlier. The default mapping function called ",(0,s.kt)("inlineCode",{parentName:"p"},"defaultDataIdFromObject")," can be imported from ",(0,s.kt)("inlineCode",{parentName:"p"},"apollo-cache-inmemory")," and be used to specify the fragment that we would like to read/write. Accordingly, we're gonna replace all our query re-writings with fragments re-writings, as we don't need them anymore:"),(0,s.kt)("h4",{id:"client-step-84-rewrite-fragments"},(0,s.kt)("a",{parentName:"h4",href:"https://github.com/Urigo/WhatsApp-Clone-Client-React/commit/878054e70b2ec9bc44e2984c5cd41e9f6a4ff8a3"},(0,s.kt)("strong",{parentName:"a"},"Client")," Step 8.4: Rewrite fragments")),(0,s.kt)("h5",{id:"changed-srccomponentschatroomscreenindextsx-3"},"Changed src","/","components","/","ChatRoomScreen","/","index.tsx"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -1,3 +1,4 @@\n+\u250a \u250a1\u250aimport { defaultDataIdFromObject } from 'apollo-cache-inmemory';\n \u250a1\u250a2\u250aimport gql from 'graphql-tag';\n \u250a2\u250a3\u250aimport React from 'react';\n \u250a3\u250a4\u250aimport { useCallback } from 'react';\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-diff"},"@@ -84,48 +85,75 @@\n \u250a 84\u250a 85\u250a        },\n \u250a 85\u250a 86\u250a        update: (client, { data }) => {\n \u250a 86\u250a 87\u250a          if (data && data.addMessage) {\n-\u250a 87\u250a   \u250a            client.writeQuery({\n-\u250a 88\u250a   \u250a              query: getChatQuery,\n-\u250a 89\u250a   \u250a              variables: { chatId },\n-\u250a 90\u250a   \u250a              data: {\n-\u250a 91\u250a   \u250a                chat: {\n-\u250a 92\u250a   \u250a                  ...chat,\n-\u250a 93\u250a   \u250a                  messages: chat.messages.concat(data.addMessage),\n-\u250a 94\u250a   \u250a                },\n-\u250a 95\u250a   \u250a              },\n+\u250a   \u250a 88\u250a            type FullChat = { [key: string]: any };\n+\u250a   \u250a 89\u250a            let fullChat;\n+\u250a   \u250a 90\u250a            const chatIdFromStore = defaultDataIdFromObject(chat);\n+\u250a   \u250a 91\u250a\n+\u250a   \u250a 92\u250a            if (chatIdFromStore === null) {\n+\u250a   \u250a 93\u250a              return;\n+\u250a   \u250a 94\u250a            }\n+\u250a   \u250a 95\u250a\n+\u250a   \u250a 96\u250a            try {\n+\u250a   \u250a 97\u250a              fullChat = client.readFragment<FullChat>({\n+\u250a   \u250a 98\u250a                id: chatIdFromStore,\n+\u250a   \u250a 99\u250a                fragment: fragments.fullChat,\n+\u250a   \u250a100\u250a                fragmentName: 'FullChat',\n+\u250a   \u250a101\u250a              });\n+\u250a   \u250a102\u250a            } catch (e) {\n+\u250a   \u250a103\u250a              return;\n+\u250a   \u250a104\u250a            }\n+\u250a   \u250a105\u250a\n+\u250a   \u250a106\u250a            if (fullChat === null ||\n+\u250a   \u250a107\u250a                fullChat.messages === null ||\n+\u250a   \u250a108\u250a                data === null ||\n+\u250a   \u250a109\u250a                data.addMessage === null ||\n+\u250a   \u250a110\u250a                data.addMessage.id === null) {\n+\u250a   \u250a111\u250a              return;\n+\u250a   \u250a112\u250a            }\n+\u250a   \u250a113\u250a            if (fullChat.messages.some((currentMessage: any) => currentMessage.id === data.addMessage.id)){\n+\u250a   \u250a114\u250a              return;\n+\u250a   \u250a115\u250a            }\n+\u250a   \u250a116\u250a\n+\u250a   \u250a117\u250a            fullChat.messages.push(data.addMessage);\n+\u250a   \u250a118\u250a            fullChat.lastMessage = data.addMessage;\n+\u250a   \u250a119\u250a\n+\u250a   \u250a120\u250a            client.writeFragment({\n+\u250a   \u250a121\u250a              id: chatIdFromStore,\n+\u250a   \u250a122\u250a              fragment: fragments.fullChat,\n+\u250a   \u250a123\u250a              fragmentName: 'FullChat',\n+\u250a   \u250a124\u250a              data: fullChat,\n \u250a 96\u250a125\u250a            });\n-\u250a 97\u250a   \u250a          }\n \u250a 98\u250a126\u250a\n-\u250a 99\u250a   \u250a          let clientChatsData;\n-\u250a100\u250a   \u250a          try {\n-\u250a101\u250a   \u250a            clientChatsData = client.readQuery<ChatsResult>({\n+\u250a   \u250a127\u250a            let clientChatsData;\n+\u250a   \u250a128\u250a            try {\n+\u250a   \u250a129\u250a              clientChatsData = client.readQuery<ChatsResult>({\n+\u250a   \u250a130\u250a                query: queries.chats,\n+\u250a   \u250a131\u250a              });\n+\u250a   \u250a132\u250a            } catch (e) {\n+\u250a   \u250a133\u250a              return;\n+\u250a   \u250a134\u250a            }\n+\u250a   \u250a135\u250a\n+\u250a   \u250a136\u250a            if (!clientChatsData || clientChatsData === null) {\n+\u250a   \u250a137\u250a              return null;\n+\u250a   \u250a138\u250a            }\n+\u250a   \u250a139\u250a            if (!clientChatsData.chats || clientChatsData.chats === undefined) {\n+\u250a   \u250a140\u250a              return null;\n+\u250a   \u250a141\u250a            }\n+\u250a   \u250a142\u250a            const chats = clientChatsData.chats;\n+\u250a   \u250a143\u250a\n+\u250a   \u250a144\u250a            const chatIndex = chats.findIndex((currentChat: any) => currentChat.id === chatId);\n+\u250a   \u250a145\u250a            if (chatIndex === -1) return;\n+\u250a   \u250a146\u250a            const chatWhereAdded = chats[chatIndex];\n+\u250a   \u250a147\u250a\n+\u250a   \u250a148\u250a            // The chat will appear at the top of the ChatsList component\n+\u250a   \u250a149\u250a            chats.splice(chatIndex, 1);\n+\u250a   \u250a150\u250a            chats.unshift(chatWhereAdded);\n+\u250a   \u250a151\u250a\n+\u250a   \u250a152\u250a            client.writeQuery({\n \u250a102\u250a153\u250a              query: queries.chats,\n+\u250a   \u250a154\u250a              data: { chats: chats },\n \u250a103\u250a155\u250a            });\n-\u250a104\u250a   \u250a          } catch (e) {\n-\u250a105\u250a   \u250a            return;\n-\u250a106\u250a   \u250a          }\n-\u250a107\u250a   \u250a\n-\u250a108\u250a   \u250a          if (!clientChatsData || clientChatsData === null) {\n-\u250a109\u250a   \u250a            return null;\n \u250a110\u250a156\u250a          }\n-\u250a111\u250a   \u250a          if (!clientChatsData.chats || clientChatsData.chats === undefined) {\n-\u250a112\u250a   \u250a            return null;\n-\u250a113\u250a   \u250a          }\n-\u250a114\u250a   \u250a          const chats = clientChatsData.chats;\n-\u250a115\u250a   \u250a\n-\u250a116\u250a   \u250a          const chatIndex = chats.findIndex((currentChat: any) => currentChat.id === chatId);\n-\u250a117\u250a   \u250a          if (chatIndex === -1) return;\n-\u250a118\u250a   \u250a          const chatWhereAdded = chats[chatIndex];\n-\u250a119\u250a   \u250a\n-\u250a120\u250a   \u250a          chatWhereAdded.lastMessage = data.addMessage;\n-\u250a121\u250a   \u250a          // The chat will appear at the top of the ChatsList component\n-\u250a122\u250a   \u250a          chats.splice(chatIndex, 1);\n-\u250a123\u250a   \u250a          chats.unshift(chatWhereAdded);\n-\u250a124\u250a   \u250a\n-\u250a125\u250a   \u250a          client.writeQuery({\n-\u250a126\u250a   \u250a            query: queries.chats,\n-\u250a127\u250a   \u250a            data: { chats: chats },\n-\u250a128\u250a   \u250a          });\n \u250a129\u250a157\u250a        },\n \u250a130\u250a158\u250a      });\n \u250a131\u250a159\u250a    },\n")),(0,s.kt)("hr",null),(0,s.kt)("p",null,"TODO: Isn\u2019t ",(0,s.kt)("inlineCode",{parentName:"p"},"chats.splice(0, Infinity, ...[ \u2026 ])")," the same as ",(0,s.kt)("inlineCode",{parentName:"p"},"chats = [...]")," ?\nI see an explanation of apollo-cache but it makes you feel it\u2019s the fragment that\u2019s being cached, which is not true, it\u2019s the object type.\nWe shouldn\u2019t use ",(0,s.kt)("inlineCode",{parentName:"p"},"defaultDataIdFromObject")," directly from ",(0,s.kt)("inlineCode",{parentName:"p"},"apollo-cache-inmemory")," but define it somewhere in our code and use that. It might change in the future and then we would have to do it in 500 files.\nI would explain a lot more than it is now, about the caching. It should be based on a simpler example and show that when an entity ",(0,s.kt)("inlineCode",{parentName:"p"},"Foo:1")," is modified, the change reflects in all component. We should describe how it\u2019s stored, as references and not real data and so on."),(0,s.kt)("p",null,"TODO: Better fragments naming and convensions"),(0,s.kt)("table",null,(0,s.kt)("thead",{parentName:"table"},(0,s.kt)("tr",{parentName:"thead"},(0,s.kt)("th",{parentName:"tr",align:"left"},(0,s.kt)("a",{parentName:"th",href:"https://github.com/Urigo/WhatsApp-Clone-Tutorial/tree/master@next/.tortilla/manuals/views/step7.md"},"< Previous Step")),(0,s.kt)("th",{parentName:"tr",align:"right"},(0,s.kt)("a",{parentName:"th",href:"https://github.com/Urigo/WhatsApp-Clone-Tutorial/tree/master@next/.tortilla/manuals/views/step9.md"},"Next Step >"))))))}c.isMDXComponent=!0}}]);